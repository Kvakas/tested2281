GUI Customization Guidelink
Ren'Py features a GUI system that (we hope) looks attractive out of the box, can be customized somewhat, and can be replaced entirely if necessary. This page explains how to do simple and intermediate levels of GUI customization.

For more advanced customization, please take a look at the documentation for styles (including the list of style properties) and screens (including screen actions and special screens).

This assumes that you're using a new-style Ren'Py GUI (contained in the gui.rpy file). Older GUIs (that use the screens.rpy file) should be treated as advanced GUI customization for the purposes of this guide.

Simple GUI Customizationlink
There are a few simple pieces of GUI customization that make sense for all but the simplest visual novels. What these customizations have in common is that they do not require editing gui.rpy. These customizations change the GUI somewhat, but do not drastically change the look of the GUI.

Change Size and Colorslink
The easiest thing to change about the GUI is to change the size and color of the GUI. Ren'Py will prompt you to make these choices when you first create a project, but choosing "Change/Update GUI" in the launcher will let you change your choice.

When changing the GUI through the launcher, Ren'Py will prompt if you want to simply change the launcher, or update gui.rpy. Both choices will overwrite most image files, and overwriting gui.rpy will get rid of changes to that file.

As a result, you probably want to do this before any other customization.

Ren'Py will prompt for the default resolution of the project, and then also for the color scheme to use. Once you select those, it will update the GUI to match your choices.

Options.rpylink
There are a couple of variables in options.rpy that are used by the GUI.

config.name
A string giving a human-readable name for the game. This is used as the window title, and throughout the GUI wherever the title of the game is needed.

gui.show_name
This should be set to False to hide the title and version number from the main menu. (Say, because the title is "baked into" the main menu image.)

config.version
A string giving the version of the game. This is presented to the user in various places in the default GUI. It has other uses apart from that, such as error messages or tracebacks.

gui.about
Additional text that is added to the about screen. If you want multiple paragraphs of credits, \n\n can be used to separate the paragraphs.

Here's an example of these defines:

define config.name = _('Old School High School')

define gui.show_name = True

define config.version = "1.0"

define gui.about = _("Created by PyTom.\n\nHigh school backgrounds by Mugenjohncel.")
For convenience, it might make sense to define gui.about using a triple-quoted string, in which case line endings are respected.

define gui.about = _("""\
Created by PyTom.

High school backgrounds by Mugenjohncel.""")
Game and Main Menu Background Imageslink
The images used by the GUI can be found in the game/gui directory, which can be opened by choosing "Open Directory: gui" from the launcher. The relevant files are:

gui/main_menu.png
A file that contains an image that is used in the background of all screens of the main menu.

gui/game_menu.png
A file that contains an image that is used in the background of all screens of the game menu.

_images/easy_main_menu.jpg
The main menu, with only gui/main_menu.png replaced.link

_images/easy_game_menu.jpg
The about screen can be part of the game menu (using gui/game_menu.png as the background) or the main menu (using gui/main_menu.png as the background). Both can be set to the same image.link

Window Iconlink
The window icon is the icon that is displayed (in places like the Windows task bar and Macintosh dock) by a running application.

The window icon can be changed by replacing gui/window_icon.png.

Note that this only changes the icon used by the running game. To change the icon used by Windows .exe files and Macintosh applications, see the build documentation.

Intermediate GUI Customizationlink
Next, we will demonstrate the intermediate level of GUI customization. At the intermediate level, it's possible to change the colors, fonts, and images used by the game. In general, intermediate customization keeps the screens mostly the same, with buttons and bars in the same places, although modifying the screens to add new functionality is certainly possible.

Many of these changes involve editing variables in gui.rpy. For example, to increase the dialogue font size, find the line that reads:

define gui.text_size = 22
and increase or decrease it, for example, to:

define gui.text_size = 20
Note that the default values are often different than what's found in this documentation. The default values can changed based on size and colors selected for the game, and the values in this file are an example of extensive GUI customization. It's best to search gui.rpy for define and the variable in question – for example, "define gui.text_size".

Some of the adjustments below either partially or completely effect image files. As a result, the changes only take effect when the image files themselves are updated, which can be done by choosing "Change GUI" in the launcher, and telling it to regenerate image files. (But note that doing so will overwrite any image files you have already modified.)

You may want to consider waiting until your game is nearly complete before customizing gui.rpy in this way. While old gui.rpys will work in newer Ren'Py versions, newer gui.rpys may have features and fixes that older versions lack. Customizing the GUI early may make it harder to take advantage of such improvements.

Dialoguelink
There are a number of relatively easy customizations that can be performed to change how dialogue is displayed to the player. The first is changing the textbox.

gui/textbox.png
This file contains the background of the text window, displayed as part of the say screen. While this should be the full width of the game, text is only displayed in the central 60% of the screen, with a 20% border on either side.

In addition, there are a number of variables that can be customized to change dialogue.

define gui.text_color = "#402000"link
This sets the color of the dialogue text.

define gui.text_font = "ArchitectsDaughter.ttf"link
This sets the font that is used for dialogue text, menus, inputs, and other in-game text. The font file should exist in the game directory.

define gui.text_size = 33link
Sets the size of the dialogue text. This may need to be increased or decreased to fit the selected font in the space allotted.

define gui.name_text_size = 45link
Sets the size of character names.

By default, the character name label uses the accent color. The color can be easily changed when defining a character:

define e = Character("Eileen", who_color="#104010")
_images/textbox.png
An example textbox image.link

_images/easy_say_screen.jpg
Dialogue customized using the textbox image and the variable settings given above.link

Choice Menuslink
The choice screen is used by the menu statement to display choices to the player. Again, there are some relatively easy customizations that can be performed on the choice screen. The first are the two image files:

gui/button/choice_idle_background.png
This image is used as the background of choice buttons that are not focused.

gui/button/choice_hover_background.png
This image is used as the background of choice buttons that are focused.

By default, text is placed in the central 75% of these images. There are also a couple of variables that control the color of the text in choice buttons.

define gui.choice_button_text_idle_color = '#888888'link
The color used for the text of unfocused choice buttons.

define gui.choice_text_hover_color = '#0066cc'link
The color used for the text of focused choice buttons.

These should suffice for simple customization, where the size of the images does not need to be changed. For more complex customizations, check out the section on buttons, below.

_images/choice_idle_background.png
An example gui/button/idle_background.png image.link

_images/choice_hover_background.png
An example gui/button/choice_hover_background.png image.link

_images/easy_choice_screen.jpg
An example of the choice screen, as customized using the images and variable settings given above.link

Overlay Imageslink
There are also a pair of overlay images. These are used to darken or lighten the background image to make buttons and other user interface components more readable. These images are in the overlay directory:

gui/overlay/main_menu.png
The overlay used by the main menu screen.

gui/overlay/game_menu.png
The overlay used by game-menu-like screens, including load, save, preferences, about, help, etc. This overlay is selected by the screen in question, and is used even when at the main menu.

gui/overlay/confirm.png
The overlay used in the confirm screen to darken the background.

Here are a pair of example overlay images, and what the game looks like with the overlay images added.

_images/main_menu.png
An example gui/overlay/main_menu.png image.link

_images/game_menu.png
An example gui/overlay/game_menu.png image.link

_images/overlay_main_menu.jpg
The main menu after changing the overlays.link

_images/overlay_game_menu.jpg
The game menu after changing the overlays.link

Colors, Fonts, and Font Sizeslink
There are a number of GUI variables that can be used to change the color, font, and size of text.

These variables should generally be set to hexadecimal color codes, which are are strings of the form "#rrggbb" (or "#rrggbbaa" to specify an alpha component), similar to color codes used by web browsers. For example, "#663399" is the code for a shade of purple. There are many tools online that let you create HTML color codes, such as this one.

In addition to gui.text_color, gui.choice_idle_color, and gui.choice_hover_color, documented above, the following variables exist:

define gui.accent_color = '#000060'link
The accent color is used in many places in the GUI, including titles and labels.

define gui.idle_color = '#606060'link
The color used for most buttons when not focused or selected.

define gui.idle_small_color = '#404040'link
The color used for small text (like the date and name of a save slot, and quick menu buttons) when not hovered. This color often needs to be a bit lighter or darker than idle_color to compensate for the smaller size of the font.

define gui.hover_color = '#3284d6'link
The color used by focused items in the GUI, including the text of of buttons and the thumbs (movable areas) of sliders and scrollbars.

define gui.selected_color = '#555555'link
The color used by the text of selected buttons. (This takes priority over the hover and idle colors.)

define gui.insensitive_color = '#8888887f'link
The color used by the text of buttons that are insensitive to user input. (For example, the rollback button when no rollback is possible.)

define gui.interface_text_color = '#404040'link
The color used by static text in the game interface, such as text on the help and about screens.

define gui.muted_color = '#6080d0'link
define gui.hover_muted_color = '#8080f0'link
Muted colors, used for the sections of bars, scrollbars, and sliders that do not represent the value or visible area. (These are only used when generating images, and will not take effect until images are regenerated in the launcher.)

In additional to gui.text_font, the following variables selects the fonts used for text. These fonts should also be placed in the game directory.

define gui.interface_text_font = "ArchitectsDaughter.ttf"link
The font used for text for user interface elements, like the main and game menus, buttons, and so on.

define gui.glyph_font = "DejaVuSans.ttf"link
A font used for certain glyphs, such as the arrow glyphs used by the skip indicator. DejaVuSans is a reasonable default for these glyphs, and is automatically included with every Ren'Py game.

In addition to gui.text_size and gui.name_text_size, the following variables control text sizes.

define gui.interface_text_size = 36link
The size of static text in the game's user interface, and the default size of button text in the game's interface.

define gui.label_text_size = 45link
The size of section labels in the game's user interface.

define gui.notify_text_size = 24link
The size of notification text.

define gui.title_text_size = 75link
The size of the game's title.

_images/text.jpg
The game menu after customizing text colors, fonts, and sizes.link

Borderslink
There are a number of GUI components – such as buttons and bars – that use scalable backgrounds configured using Border objects. Before discussing, how to customize buttons and bars, we'll first describe how this works.

Borders are given to the Frame() displayable. A Frame takes an image, and divides it into nine parts – the four corners, the four sides, and the center. The corners always remain the same size, the left and right sides are stretched vertically, the top and bottom sides are stretched horizontally, and the center is stretched in both directions.

A Borders object gives the size of each of the borders, in left, top, right, bottom order. So if the following border image is used:

_images/borders.png
along with the following borders:

Borders(40, 40, 40, 40)
one possible result is this:

_images/borders1.png
As the child changes size, so will the background.

A Border object can also be given padding, including negative padding that causes the child to overlap the borders. For example, these borders:

Borders(40, 40, 40, 40, -20, -20, -20, -20)
allow the child to overlap the sides. Note that due to this overlap, the result is smaller, since the borders themselves now take up less space.

_images/borders2.png
Borders can also be tiled, rather than scaled. This is invoked by variables, and produces this result.

_images/borders3.png
These example images are a bit ugly, since we need to show what's going on. In practice, this system can produce quite pleasing results. This is the case when a Frame displayable is used as the background of a frame window holding user interface components.

These frame windows can be customized in two ways. The first is by changing the background image file:

gui/frame.png
The image used as the background of frames windows.

And the second is by customizing variables.

define gui.frame_borders = Borders(15, 15, 15, 15)link
The borders applied to frame windows.

define gui.confirm_frame_borders = Borders(60, 60, 60, 60)link
The borders applied to the fame used in the confirm screen.

define gui.frame_tile = Truelink
If true, the sides and center of the confirm screen are tiled. If false, they are scaled.

_images/frame.png
An example gui/frame.png image.link

_images/frame_confirm.jpg
The confirm screen after applying the customizations given above.link

Buttonslink
The Ren'Py user interface includes a large number of buttons, buttons that come in different sizes and that are used for different purposes. The various kinds of buttons are:

button
A basic button. Used for navigation within the user interface.

choice_button
A button used for choices in the in-game menu.

quick_button
A button, displayed in-game, that is intended to allow quick access to the game menu.

navigation_button
A button used in main and game menu for navigation between screens, and to start the game.

page_button
A button used to switch between pages on the load and save screens.

slot_button
Buttons that represent file slots, and contain a thumbnail, the save time, and an optional save name. These are described in more detail below.

radio_button
A button used for multiple-choice preferences on the preferences screen.

check_button
A button used for toggleable preferences on the preferences screen.

test_button
A button used to test audio playback on the preferences screen. This should be the same height as a horizontal slider.

help_button
A button used to select what kind of help the player wants.

confirm_button
A button used on the confirm screen to select yes or no.

nvl_button
A button used for an NVL-mode menu choice.

The following image files are used to customize button backgrounds, if they exist.

gui/button/idle_background.png
The background image used by buttons that are not focused.

gui/button/hover_background.png
The background image used by buttons that are focused.

gui/button/selected_idle_background.png
The background image used by buttons that are selected but not focused. This is optional, and is used in preference to idle_background.png if it exists.

gui/button/selected_hover_background.png
The background image used by buttons that are selected but not focused. This is optional, and is used in preference to hover_background.png if it exists.

More specific backgrounds can be given for each kind of button, by prefixing it with the kind. For example, gui/button/check_idle_background.png is used as the background of check buttons that are not focused.

Four image files are used as foreground decorations on radio and check buttons, to indicate if the option is chosen or not.

gui/button/check_foreground.png, gui/button/radio_foreground.png
These images are used when a check or radio button is not selected.

gui/button/check_selected_foreground.png, gui/button/radio_selected_foreground.png
These images are used when a check or radio button is selected.

The following variables set various properties of buttons:

define gui.button_width = Nonelink
define gui.button_height = 64link
The width and height of a button, in pixels. If None, the size is automatically determined based on the size of the text inside a button, and the borders given below.

define gui.button_borders = Borders(10, 10, 10, 10)link
The borders surrounding a button, in left, top, right, bottom order.

define gui.button_tile = Truelink
If true, the sides and center of the button background are tiled to increase or decrease their size. If false, the sides and center are scaled.

define gui.button_text_font = gui.interface_fontlink
define gui.button_text_size = gui.interface_text_sizelink
The font and size of the button text.

define gui.button_text_idle_color = gui.idle_colorlink
define gui.button_text_hover_color = gui.hover_colorlink
define gui.button_text_selected_color = gui.accent_colorlink
define gui.button_text_insensitive_color = gui.insensitive_colorlink
The color of the button text in various states.

define gui.button_text_xalign = 0.0link
The horizontal alignment of the button text. 0.0 is left-aligned, 0.5 is centered, and 1.0 is right-aligned.

define gui.button_image_extension = ".png"link
The extension for button images. This could be changed to .webp to use WEBP button images instead of png ones.

These variables can be prefixed with the button kind to configure a property for a particular kind of button. For example, gui.choice_button_text_idle_color configures the color of an idle choice button.

For example, we customize these variables in our sample game.

define gui.navigation_button_width = 290link
Increases the width of navigation buttons.

define gui.radio_button_borders = Borders(40, 10, 10, 10)link
define gui.check_button_borders = Borders(40, 10, 10, 10)link
Increases the width of radio and check button borders, leaving extra space on the left for the check mark.

Here's an example of how the play screen can be customized.

_images/idle_background.png
An example gui/button/idle_background.png image.link

_images/hover_background.png
An example gui/button/hover_background.png image.link

_images/check_foreground.png
An image that can be used as gui/button/check_foreground.png and gui/button/radio_foreground.png.link

_images/check_selected_foreground.png
An image that can be used as gui/button/check_selected_foreground.png and gui/button/radio_selected_foreground.png.link

_images/button_preferences.jpg
The preferences screen with the customizations described in this section applied.link

Save Slot Buttonslink
The load and save screens use slot buttons, which are buttons that present a thumbnail and information about when the file was saved. The following variables are quite useful when it comes to customizing the size of the save slots.

define gui.slot_button_width = 414link
define gui.slot_button_height = 309link
The width and height of the save slot button.

define gui.slot_button_borders = Borders(15, 15, 15, 15)link
The borders applied to each save slot.

config.thumbnail_width = 384 and config.thumbnail_height = 216 set the width and height of the save thumbnails. Note that these live in the config namespace, not the gui namespace. These do not take effect until the file is saved and loaded.

define gui.file_slot_cols = 3link
define gui.file_slot_rows = 2link
The number of columns and rows in the grid of save slots.

There are the background images used for save slots.

gui/button/slot_idle_background.png
The image used for the background of save slots that are not focused.

gui/button/slot_hover_background.png
The image used for the background of save slots that are focused.

Putting those to use, we get:

_images/slot_idle_background.png
An example gui/button/slot_idle_background.png image.link

_images/slot_hover_background.png
An example gui/button/slot/slot_hover_background.png image.link

_images/slot_save.jpg
The save screen after applying the customizations given in this section.link

Sliderslink
Sliders are a type of bar that is used in the preferences screen to allow the player to adjust preference with a large number of values. By default, the GUI only uses horizontal sliders, but a game may also use vertical sliders.

Sliders are customized with the following images:

gui/slider/horizontal_idle_bar.png, gui/slider/horizontal_hover_bar.png, gui/slider/vertical_idle_bar.png, gui/slider/vertical_hover_bar.png
Images used for vertical and idle bar backgrounds in idle and hover states.

gui/slider/horizontal_idle_thumb.png, gui/slider/horizontal_hover_thumb.png, gui/slider/vertical_idle_thumb.png, gui/slider/vertical_hover_thumb.png
Images used for the thumb – the movable part of the bar.

The following variables are also used:

define gui.slider_size = 64link
The height of horizontal sliders, and width of vertical sliders.

define gui.slider_tile = Truelink
If true, the frame containing the bar of a slider is tiled. If False, if it scaled.

define gui.slider_borders = Borders(6, 6, 6, 6)link
define gui.vslider_borders = Borders(6, 6, 6, 6)link
The borders that are used with the Frame containing the bar image.

Here's an example of how we customize the horizontal slider.

_images/horizontal_idle_bar.png
An example gui/slider/horizontal_idle_bar.png image.link

_images/horizontal_hover_bar.png
An example gui/slider/horizontal_hover_bar.png image.link

_images/horizontal_idle_thumb.png
An example gui/slider/horizontal_idle_thumb.png image.link

_images/horizontal_hover_thumb.png
An example gui/slider/horizontal_hover_thumb.png image.link

_images/slider_preferences.jpg
The preferences screen after applying the customizations given in this section.link

Scrollbarslink
Scrollbars are bars that are used to scroll viewports. In the GUI, the most obvious place a scrollbar is used is the history screen, but vertical scrollbars can be used on other screens as well.

Sliders are customized with the following images:

gui/scrollbar/horizontal_idle_bar.png, gui/scrollbar/horizontal_hover_bar.png, gui/scrollbar/vertical_idle_bar.png, gui/scrollbar/vertical_hover_bar.png
Images used for vertical and idle bar backgrounds in idle and hover states.

gui/scrollbar/horizontal_idle_thumb.png, gui/scrollbar/horizontal_hover_thumb.png, gui/scrollbar/vertical_idle_thumb.png, gui/scrollbar/vertical_hover_thumb.png
Images used for the thumb – the movable part of the bar.

The following variables are also used:

define gui.scrollbar_size = 24link
The height of horizontal scrollbars, and width of vertical scrollbars.

define gui.scrollbar_tile = Truelink
If true, the frame containing the bar of a scrollbar is tiled. If False, if it scaled.

define gui.scrollbar_borders = Borders(10, 6, 10, 6)link
define gui.vscrollbar_borders = Borders(6, 10, 6, 10)link
The borders that are used with the Frame containing the bar image.

define gui.unscrollable = "hide"link
This controls what to do if the bar is unscrollable. "hide" hides the bar, while None keeps it shown.

Here's an example of how we customize the vertical scrollbar.

_images/vertical_idle_bar.png
An example gui/scrollbar/vertical_idle_bar.png image.link

_images/vertical_hover_bar.png
An example gui/scrollbar/vertical_hover_bar.png image.link

_images/vertical_idle_thumb.png
An example gui/scrollbar/vertical_idle_thumb.png image.link

_images/vertical_hover_thumb.png
An example gui/scrollbar/vertical_hover_thumb.png image.link

_images/scrollbar_history.jpg
The history screen after applying the customizations given in this section.link

Barslink
Plain old bars are used to display a number to the player. They're not used in the GUI, but can be used in creator-defined screens.

A bar can customized by editing the following images:

gui/bar/left.png, gui/bar/bottom.png
Images that are used for the filled section of horizontal and vertical bars.

gui/bar/right.pbg, gui/bar/top.png
Images that are used for the filled section of horizontal and vertical bars.

There are also the usual variables that control bars:

define gui.bar_size = 64link
The height of horizontal bars, and width of vertical bars.

define gui.bar_tile = Falselink
If true, the bar images are tiled. If false, the images are linearly scaled.

define gui.bar_borders = Borders(10, 10, 10, 10)link
define gui.vbar_borders = Borders(10, 10, 10, 10)link
The borders that are used with the Frames containing the bar images.

Here's an example of how we customize horizontal bars.

_images/left.png
An example gui/bar/left.png image.link

_images/right.png
An example gui/bar/right.png image.link

_images/bar.jpg
A screen we defined to give an example of a bar.link

Skip and Notifylink
The skip and notify screens both display frames with messages in them. Both use custom frame background images:

gui/skip.png
The background of the skip indicator.

gui/notify.png
The background of the notify screen.

The variables that control these are:

define gui.skip_frame_borders = Borders(24, 8, 75, 8)link
The borders of the frame that is used by the skip screen.

define gui.notify_frame_borders = Borders(24, 8, 60, 8)link
The borders of the frame that is used by the notify screen.

define gui.skip_ypos = 15link
The vertical position of the skip indicator, in pixels from the top of the window.

define gui.notify_ypos = 68link
The vertical position of the notify message, in pixels from the top of the window.

Here is an example of customizing the skip and notify screens.

_images/skip.png
An example gui/skip.png image.link

_images/notify.png
An example gui/notify.png image.link

_images/skip_notify.jpg
These skip and notify screens in action.link

Dialogue, Continuedlink
In addition to the simple customizations given above, there are a number of ways to control how dialogue is presented to the player.

Textboxlink
The textbox (or window) is the window the dialogue is displayed in. In addition to changing gui/textbox.png, the following variables control how the textbox is displayed.

define gui.textbox_height = 278link
The height of the textbox window, which should also be the height of gui/ textbox.png.

define gui.textbox_yalign = 1.0link
The placement of the textbox vertically on the screen. 0.0 is the top, 0.5 is center, and 1.0 is the bottom.

Name and Nameboxlink
The character's name is placed inside a frame that uses gui/namebox.png as its background. In addition, there are a number of variables that control the presentation of the name. The namebox is only show if the speaking character has a name (an empty name, like " ", counts).

define gui.name_xpos = 360link
define gui.name_ypos = 0link
The horizontal and vertical positions of the name and namebox. These are usually a number of pixels from the left or top side of the textbox. Setting a variable to 0.5 centers the name in the textbox (see below). These numbers can also be negative – for example, setting gui.name_ypos to -22 causes it to be places 22 pixels above the top of the textbox.

define gui.name_xalign = 0.0link
The horizontal alignment of the character's name. This can be 0.0 for left- aligned, 0.5 for centered, and 1.0 for right-aligned. (It's almost always 0.0 or 0.5.) This is used for both the position of the namebox relative to gui.name_xpos, and to select the side of of the namebox that is aligned with xpos.

define gui.namebox_width = Nonelink
define gui.namebox_height = Nonelink
define gui.namebox_borders = Borders(5, 5, 5, 5)link
define gui.namebox_tile = Falselink
These variables control the display of the frame containing the namebox.

Dialoguelink
define gui.dialogue_xpos = 402link
define gui.dialogue_ypos = 75link
The horizontal and vertical positions of the actual dialogue. These are usually a number of pixels from the left or top side of the textbox. Setting a variable to 0.5 centers the dialogue in the textbox (see below).

define gui.dialogue_width = 1116link
This variable gives the maximum width of a line of dialogue, in pixels. When dialogue reaches this width, it will be wrapped by Ren'Py.

define gui.dialogue_text_xalign = 0.0link
The horizontal alignment of dialogue text. 0.0 is left aligned, 0.5 is centered, and 1.0 is right-aligned.

Exampleslink
To center the character's name, use:

define gui.name_xpos = 0.5
define gui.name_xalign = 0.5
To center dialogue text, use:

define gui.dialogue_xpos = 0.5
define gui.dialogue_text_xalign = 0.5
Our example game uses these statements to customize the centered namebox:

define gui.namebox_width = 300
define gui.name_ypos = -22
define gui.namebox_borders = Borders(15, 7, 15, 7)
define gui.namebox_tile = True
_images/namebox.png
An example gui/namebox.png image.link

_images/intermediate_dialogue.jpg
The example game, customized with the settings above.link

Historylink
There are a few variables that control the way the history screen is displayed.

The config.history_length variable, which defaults to 250, sets the number of blocks of dialogue Ren'Py will keep at history.

define gui.history_height = 210link
The height of a history entry, in pixels. This can be None to allow the height of a history entry to vary at the cost of performance – config.history_length may need to be lowered significantly when this is None.

define gui.history_name_xpos = 0.5link
define gui.history_text_xpos = 0.5link
The horizontal positions of the name label and dialogue text. These can be a number of pixels from the left side of the history entry, or 0.5 to center.

define gui.history_name_ypos = 0link
define gui.history_text_ypos = 60link
The vertical positions of the name label and dialogue text, relative to the top of a history entry, in pixels.

define gui.history_name_width = 225link
define gui.history_text_width = 1110link
The width of the name label and dialogue text, in pixels.

define gui.history_name_xalign = 0.5link
define gui.history_text_xalign = 0.5link
This controls the alignment of text and the side of the text that is aligned with xpos. 0.0 is left-aligned, 0.5 is center-aligned, 1.0 is right-aligned.

_images/history.png
The history screen customized with the settings given above.link

NVLlink
The nvl screen displays NVL-mode dialogue. There are a number of ways it can be customized. The first is to customize the NVL-mode background image:

gui/nvl.png
The background image used in NVL-mode. This should be the same size as the game window.

There are also a number of variables that are used to customize the way NVL-mode text is displayed.

define gui.nvl_borders = Borders(0, 15, 0, 30)link
The borders around the background of the NVL-mode. Since the background is not a frame, this is only used to pad out the NVL-mode to prevent it from pressing up against the sides of the screen.

define gui.nvl_height = 173link
The height of a single NVL-mode entry. Setting this to a fixed height makes it possible to have NVL-mode without paging, showing a fixed number of entries at once. Setting this to None allows entries to be of a variable size.

define gui.nvl_spacing = 15link
The spacing between entries when gui.nvl_height is None, and the spacing between NVL-mode menu buttons.

define gui.nvl_name_xpos = 0.5link
define gui.nvl_text_xpos = 0.5link
define gui.nvl_thought_xpos = 0.5link
The positioning of character names, dialogue text, and thought/narration text, relative to the left side of the entry. This can be a number of pixels, or 0.5 to represent the center of the entry.

define gui.nvl_name_xalign = 0.5link
define gui.nvl_text_xalign = 0.5link
define gui.nvl_thought_xalign = 0.5link
The alignment of the text. This controls both the alignment of the text, and the side of the text that is placed at xpos. This can be 0.0 for left, 0.5 for center, and 1.0 for right.

define gui.nvl_name_ypos = 0link
define gui.nvl_text_ypos = 60link
define gui.nvl_thought_ypos = 0link
The position of character names, dialogue text, and thought/narration text, relative to the top of the entry. This should be a number of pixels from the top.

define gui.nvl_name_width = 740link
define gui.nvl_text_width = 740link
define gui.nvl_thought_width = 740link
The width of each kind of text, in pixels.

define gui.nvl_button_xpos = 0.5link
define gui.nvl_button_xalign = 0.5link
The position and alignment of NVL-mode menu buttons.

Ren'Py does not use NVL-mode by default. It must be invoked using NVL-mode characters, and by defining a few variables in script.rpy.

define e = Character("Eileen", kind=nvl)
define narrator = nvl_narrator
define menu = nvl_menu
Here's an example of the NVL screen as customized with the settings above.

_images/nvl.png
An example gui/nvl.png image.link

_images/nvl.jpg
The example game, customized with the settings above.link

Textlink
Most text can be customized using GUI variables. The variables used are of the form:

define gui.kind_text_fontlink
If present, the font used for the text.

define gui.kind_text_sizelink
If present, the size of the text.

define gui.kind_text_colorlink
If present, the color of the text.

Other text style properties cam also be set in the same way. For example, gui.kind_text_outlines sets the outlines property.

The kind prefix can be omitted, in which case it customizes the default look of text. Otherwise, it may be one of the button kinds above, or one of:

interface
For default text in the out-of-game interface.

input
For text in a text input widget.

input_prompt
For the prompt portion of a text input.

label
For decorative labels.

prompt
For confirmation prompts asking the player a question.

name
For character names.

dialogue
For dialogue.

notify
For notification text.

For example:

define gui.dialogue_text_outlines = [ (0, "#00000080", 2, 2) ]
puts a drop shadow to the right of and below dialogue text.

Translation and GUI Variableslink
The gui namespace is special, in that it is saved after the init phase, but before any translate python blocks are run. This makes it possible to change any GUI variable in a translate python block to accommodate a second language. For example, the following code changes the default text font and size.

translate japanese python:
    gui.text_font = "MTLc3m.ttf"
    gui.text_size = 24
There is one issue that translators need to be aware of, and that is that in some places in gui.rpy, one variable is assigned the value of another. For example, the default gui.rpy has:

define gui.interface_text_font = "DejaVuSans.ttf"
and later on:

define gui.button_text_font = gui.interface_text_font
Since both of these statements run before any translate block runs, both variables need to be changed.

translate japanese python::

    define gui.interface_text_font = "MTLc3m.ttf"
    define gui.button_text_font = "MTLc3m.ttf"
If the second statement was missing, DejaVuSans would still be used.

Advanced Customizationlink
More advanced customization is possible by customizing screens.rpy, up to and including deleting the entire contents of the file and replacing it with something of your own. Here are a few places to get started.

Styleslink
Styles and style properties control how displayables are displayed. To find out what style a displayable is using, put the mouse over it and type Shift+I. This invokes the style inspector, which shows style names. Once the style name is known, a style statement can be used to customize it.

For example, say we've lost our minds writing GUI documentation, and want to add a bright red outline to the dialogue text. We can hover the text and press Shift+I to find out the style used is named say_dialogue. We can then add (to the end of screens.rpy, or somewhere in options.rpy) the style statement:

style say_dialogue:
    outlines [ (1, "#f00", 0, 0 ) ]
A huge number of customizations are possible using style statements.

Screens - Navigationlink
The next level of customization is to modify the screens. The most important documentation about screens is located in the Screens and Screen Language and Screen Actions, Values, and Functions sections.

One of the most important screens is the navigation screen, which serves both as the main menu, and to provide navigation for the game menu. This screen can be edited to add more buttons to one or both of those. For example, by changing the navigation screen to:

screen navigation():

    vbox:
        style_prefix "navigation"

        xpos gui.navigation_xpos
        yalign 0.5

        spacing gui.navigation_spacing

        if main_menu:

            textbutton _("Start") action Start()

            textbutton _("Prologue") action Start("prologue")

        else:

            textbutton _("Codex") action ShowMenu("codex")

            textbutton _("History") action ShowMenu("history")

            textbutton _("Save") action ShowMenu("save")

        textbutton _("Load") action ShowMenu("load")

        textbutton _("Preferences") action ShowMenu("preferences")

        if _in_replay:

            textbutton _("End Replay") action EndReplay(confirm=True)

        elif not main_menu:

            textbutton _("Main Menu") action MainMenu()

        textbutton _("About") action ShowMenu("about")

        textbutton _("Extras") action ShowMenu("extras")

        if renpy.variant("pc"):

            textbutton _("Help") action ShowMenu("help")

            textbutton _("Quit") action Quit(confirm=not main_menu)
We add access to a prologue screen from the main menu, a codex screen from the game menu, and an extras screen from both menus.

Screens - Game Menulink
Custom game menu screens can also be created. These screens can use the game_menu screen to provide a title and scrollable viewport. An minimal custom game menu screen is:

screen codex():

    tag menu

    use game_menu(_("Codex"), scroll="viewport"):

        style_prefix "codex"

        has vbox:
            spacing 20

        text _("{b}Mechanical Engineering:{/b} Where we learn to build things like missiles and bombs.")

        text _("{b}Civil Engineering:{/b} Where we learn to build targets.")
Clearly, a functional codex would need to be more elaborate than this.

Note the "tag menu" line. This line is important, as it hides other menu screens when the codex is shown. Without it, it would be hard to switch to and from the other menu screens.

Screens - Click to Continuelink
A screen we expect to be commonly added is the click to continue screen. This is a screen that is shown when text finishes displaying. Here's a simple example:

screen ctc(arg=None):

    frame:
        at ctc_appear
        xalign .99
        yalign .99

        text _("(click to continue)"):
            size 18

transform ctc_appear:
    alpha 0.0
    pause 5.0
    linear 0.5 alpha 1.0
This particular ctc screen uses a transform to show the frame after 5 seconds. It's a good idea to delay CTC animations for several seconds, to give Ren'Py time to predict and load images.

Total GUI Replacementlink

Textlink
Ren'Py contains several ways of displaying text. The say and menu statements are primarily concerned with the display of text to the user. The user interface often contains text, displayed using the text, textbutton, and label screen language statements. These functions, along with others, create Text() displayables, and show them on the screen.

The Text displayable is responsible for managing the process of showing the text to the user. The text displayable performs actions in the following order:

Translating text.

Interpolating data into the text.

Styling the text using styles and text tags.

Laying out the styled text.

Drawing the text to the screen.

This chapter discusses the process of text display in Ren'Py.

Escape Characterslink
There are three special characters that can control the way Ren'Py displays text. A creator needs to be aware of these characters to ensure that their writing is not accidentally misinterpreted by the engine.

(backslash)
The backslash character is used to introduce when writing a Ren'Py or Python string. Some common escape codes are:

\" (backslash-doublequote)
Includes a doublequote in a double-quoted string.

\' (backslash-quote)
Includes a single quote in a single-quoted string.

\ (backslash-space)
Includes an additional space in a Ren'Py string. By default, Ren'Py script text collapses adjacent whitespace into a single space character.

\n (backslash-n)
Includes a newline character in the text.

\\ (backslash-backslash)
Includes a backslash character in the text.

\% (backslash-percent)
Includes a protected percent character in the text. It's also possible to write it as %% : both protections will result in a single % character being written in the end.

[ (left bracket)
The left bracket is used to introduce interpolation of a value into the text. To include a single left bracket in your text, double it – write [[.

{ (left brace)
The left brace is used to introduce a text tag. To include a left brace in your text, double it – write {{.

【 (left lenticular bracket)
The left lenticular bracket is used to to introduce ruby/furigana text. To include a left lenticular bracket in your text, double it – write 【【.

Interpolating Datalink
Ren'Py supports interpolating data into the text string before it is displayed. For example, if the player's name is stored in the playername variable, one could write a line of dialogue like:

g "Welcome to the Nekomimi Institute, [playername]!"
Ren'Py will interpolate variables found in the global store. When using a text widget in a screen, Ren'Py will also interpolate screen local variables. (This can be overridden by supplying an explicit scope argument to the Text displayable.)

Ren'Py isn't limited to interpolating simple variables. It can also interpolate fields and components of tuples. So it's possible to have:

g "My first name is [player.names[0]]."
It's possible to apply formatting when displaying numbers. This will display a floating point number to two decimal places:

$ percent = 100.0 * points / max_points
g "I like you [percent:.2] percent!"
Ren'Py's string interpolation is taken from the PEP 3101 string formatting syntax. Ren'Py uses [ to introduce string formatting because { was taken by text tags.

Along with the !s and !r conversion flags supported by Python, Ren'Py supports several more flags. The !q conversion flag ensures that text tags are properly quoted, so that displaying a string will not introduce unwanted formatting constructs. For example:

g "Don't pull a fast one on me, [playername!q]."
The !t flag will translate the interpolated string:

if points > 5:
    $ mood = _("happy")
else:
    $ mood = _("annoyed")

g "I'm [mood!t] to see you."
The !i flag will make additional interpolate for the interpolated string:

define earned_points_info = _("[points]{image=points.png} earned points")
g "I'm happy to see you you have [earned_points_info!ti]."
This should be used to substitute the text that has a substitution inside. It's often useful in screen language, see Const Text.

The !u flag forces the text to uppercase and the !l flag forces the text to lowercase. The !c flag acts only on the first character, capitalizing it. These flags may be combined, for example using !cl would capitalize the first character, and force the remaining text to lowercase.

It should be noted that:

the order in which the flags are given does not change the result : !cl will do just the same as !lc.

Supplementarly exclamation marks will be ignored, and will not circumvent the previous rule : !l!c will do the same as !c!l or !cl.

The transformations are done in the following order:

r/s (repr or str)

t (translate)

i (recursive interpolation)

q (quoting)

u (uppercase)

l (lowercase)

c (capitalize)

Styling and Text Tagslink
In Ren'Py, text gains style information in two ways. The first is from the style that is applied to the entire block of text. Please see the section about the style system for more details, especially the section on text style properties.

The second way is through text tags. Text tags are suitable for styling a portion of text block, or a small fraction of the text blocks in the program. If you find yourself applying the same text tags to every line of text, consider using a style instead.

There are two types of text tags. Some text tags are self-closing, while others allow a closing tag. The close tag starts with a slash (/), and tags are closed in last-in, first-out order. Each closing tag should match the corresponding opening tag. If not, Ren'Py will produce a lint warning.

For example:

# This line is correct.
"Plain {b}Bold {i}Bold-Italic{/i} Bold{/b} Plain"

# This line is incorrect, and will cause incorrect behavior.
"Plain {b}Bold {i}Bold-Italic{/b} Italic{/i} Plain"
It is not necessary to close all text tags. Ren'Py will close all tags that are open at the end of the text block. For example:

"{size=+20}This is big!"
Some text tags take an argument. In that case, the tag name is followed by an equals sign (=), and the argument. The argument may not contain the right-brace (}) character. The meaning of the argument varies based on the text tag.

General Text Tagslink
Tags that apply to all text are:

alink
The anchor tag creates a hyperlink between itself and its closing tag. While the behavior of the hyperlink is controlled by the hyperlink_functions style property, the default handler has the following behavior.

When the argument begins with jump:, the rest of the argument is a label to jump to.

When the argument begins with call:, the rest of the argument is a label to call. As usual, a call ends the current Ren'Py statement.

When the argument begins with call_in_new_context:, the rest of the argument is a label to call in a new context (using renpy.call_in_new_context()).

When the argument begins with show:, the rest of the argument is a screen to show.

When the argument begins with showmenu:, the rest of the argument is a game menu screen to show.

Otherwise, the argument is a URL that is opened by the system web browser.

If there is no protocol section in the argument, config.hyperlink_protocol is prepended to it. If config.hyperlink_protocol has been set to "jump", {a=label} and {a=jump:label} become equivalent. Creators can define new protocols using config.hyperlink_handlers.

label test:

    e "Why don't you visit {a=https://renpy.org}Ren'Py's home page{/a}?"

    e "Or {a=jump:more_text}here for more info{/a}."

    return

label more_text:

    e "In Hot Springs, Arkansas, there's a statue of Al Capone you can take a picture with."

    e "That's more info, but not the kind you wanted, is it?"

    return
alphalink
The alpha text tag renders the text between itself and its closing tag in the specified opacity. The opacity should be a value between 0.0 and 1.0, corresponding to fully invisible and fully opaque, respectively. If the value is prefixed by + or -, the opacity will be changed by that amount instead of completely replaced. If the value is prefixed by *, the opacity will be multiplied by that amount.

"{alpha=0.1}This text is barely readable!{/alpha}"
"{alpha=-0.1}This text is 10 percent more transparent than the default.{/alpha}"
"{alpha=*0.5}This text is half as opaque as the default.{/alpha}"
altlink
The alt tag prevents text from being rendered, while still making the text available for the text-to-speech system.

g "Good to see you! {image=heart.png}{alt}heart{/alt}"
See also the alt character.

artlink
The alternate ruby top tag marks text between itself and its closing tag as alternate ruby top text. See the section on Ruby Text for more information.

blink
The bold tag renders the text between itself and its closing tag in a bold font.

"An example of {b}bold test{/b}."
colorlink
The color text tag renders the text between itself and its closing tag in the specified color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format.

"{color=#f00}Red{/color}, {color=#00ff00}Green{/color}, {color=#0000ffff}Blue{/color}"
cpslink
The characters per second tag sets the speed of text display, for text between the tag and its closing tag. If the argument begins with an asterisk, it's taken as a multiplier to the current text speed. Otherwise, the argument gives the speed to show the text at, in characters per second.

"{cps=20}Fixed Speed{/cps} {cps=*2}Double Speed{/cps}
fontlink
The font tag renders the text between itself and its closing tag in the specified font. The argument is the filename of the font to use.

"Try out the {font=mikachan.ttf}mikachan font{/font}."
ilink
The italics tag renders the text between itself and its closing tag in italics.

"Visit the {i}leaning tower of Pisa{/i}."
imagelink
The image tag is a self-closing tag that inserts an image into the text. The image should be the height of a single line of text. The argument should be either the image filename, or the name of an image defined with the image statement.

g "Good to see you! {image=heart.png}{alt}heart{/alt}"
klink
The kerning tag is a tag that adjust the kerning of characters between itself and its closing tag. It takes as an argument a floating point number giving the number of pixels of kerning to add to each kerning pair. (The number may be negative to decrease kerning.)

"{k=-.5}Negative{/k} Normal {k=.5}Positive{/k}"
noaltlink
The noalt tag prevents text from being spoken by the text-to-speech system. This is often used in conjuction with the alt tag, to provide accessible and visual optiopns

g "Good to see you! {noalt}<3{/noalt}{alt}heart{/alt}"
outlinecolorlink
The outline text tag changes all the outlines (including drop shadows) to the given color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format.

"Let's have a {outlinecolor=#00ff00}Green{/outlinecolor} outline."
plainlink
The plain tag ensures the text does not have bold, italics, underline, or strikethrough applied.

"{b}This is bold. {plain}This is not.{/plain} This is bold.{/b}"
rblink
The ruby bottom tag marks text between itself and its closing tag as ruby bottom text. See the section on Ruby Text for more information.

rtlink
The ruby top tag marks text between itself and its closing tag as ruby top text. See the section on Ruby Text for more information.

slink
The strikethrough tag draws a line through text between itself and its closing tag.

g "It's good {s}to see you{/s}."
sizelink
The size tag changes the size of text between itself and its closing tag. The argument should be an integer, optionally preceded by + or -. If the argument is just an integer, the size is set to that many pixels high. Otherwise, the size is increased or decreased by that amount.

"{size=+10}Bigger{/size} {size=-10}Smaller{/size} {size=24}24 px{/size}."
You can also provide a floating point number preceded by a *, in which case the size will be multiplied by that number and then rounded down.

"{size=*2}Twice as big{/size} {size=*0.5}half as big.{/size}"
spacelink
The space tag is a self-closing tag that inserts horizontal space into a line of text. As an argument, it takes an integer giving the number of pixels of space to add.

"Before the space.{space=30}After the space."
ulink
The underline tag underlines the text between itself and its closing tag.

g "It's good to {u}see{/u} you."
vspacelink
The vspace tag is a self-closing tag that inserts vertical space between lines of text. As an argument, it takes an integer giving the number of pixels of space to add.

"Line 1{vspace=30}Line 2"
#link
Text tags beginning with # are ignored, but can be included to distinguish strings for the purpose of translation.

"New{#playlist}"
Dialogue Text Tagslink
Text tags that only apply to dialogue are:

donelink
Text after the done tag is not displayed. Why would you want this? It's to allow text to avoid jumping around when adjust_spacing is True.

When the done tag is present, the line of dialogue is not added to the history buffer. If the nw tag is present, it should be before the done tag.:

g "Looks like they're{nw}{done} playing with their trebuchet again."
show trebuchet
g "Looks like they're{fast} playing with their trebuchet again."
fastlink
If the fast tag is displayed in a line of text, then all text before it is displayed instantly, even in slow text mode. The fast tag is a self-closing tag.

g "Looks like they're{nw}"
show trebuchet
g "Looks like they're{fast} playing with their trebuchet again."
If present, the {fast} tag will cause voice to be sustained from the previous line.

nwlink
The no-wait tag is a self-closing tag that causes the current line of dialogue to automatically dismiss itself once the end of line has been displayed.

g "Looks like they're{nw}"
show trebuchet
g "Looks like they're{fast} playing with their trebuchet again."
The no-wait tag will wait for self-voicing to complete before advancing.

plink
The paragraph pause tag is a self-closing tag that terminates the current paragraph, and waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed.

"Line 1{p}Line 2{p=1.0}Line 3"
wlink
The wait tag is a self-closing tag that waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed.

"Line 1{w} Line 1{w=1.0} Line 1"
clearlink
The clear text tag only makes sense on a line by itself in the NVL monologue mode. It does the same thing at the nvl clear statement without ending the block of text.

"""
Block 1 on page 1.

Block 2 on page 1.

{clear}

Block 1 on page 2.

etc.
"""
It's also possible to define custom text tags using Python.

Style Text Tagslink
Ren'Py supports text tags that access styles. These are text tags where the tag name is empty. In this case, the argument is taken to be the name of a style. For example, the {=mystyle} tag will acces the mystyle style.

The text between the tag and the corresponding closing tag has the following properties set to those defined in the style:

antialias

font

size

bold

italic

underline

strikethrough

color

black_color

kerning

Non-English Languageslink
The default font for Ren'Py contains characters for English and many other languages. For size reasons, it doesn't contain the characters required to render other languages, including Chinese, Japanese, and Korean. In order to support these languages, a project must first change the fonts it uses.

Ren'Py should then support most world languages without further configuration. However, Korean can be written with or without spacing between words. Ren'Py has a special mode to support Korean with spaces, which can be enabled by setting:

define gui.language = "korean-with-spaces"
This can be changed from the default of "unicode" in gui.rpy.

Japanese has multiple rules for line breaking. We recommend starting with "japanese-normal", and moving to "japanese-loose" or "japanese-strict" for more or less break opportunities, respectively.

define gui.language = "japanese-loose"
Ideographic languages provide a large number of opportunities for line breaking. To enable a faster but less-accurate line-breaking algorithm, use:

define gui.language = "greedy"
The faster line-breaking algorithm is not be necessary unless the game is displaying huge amounts of text, such as in NVL-mode.

The line breaking algorithms can be further configured using the renpy.language_tailor() function.

Vertical Textlink
When the vertical style property is set, Ren'Py will produce vertically oriented text. The text is written top-to-bottom, right-to-left.

There are two text tags that interact with vertical text.

horizlink
Includes horizontally-oriented text inside vertical text.

vertlink
Includes vertically-oriented text inside horizontal text. (This will not rotate the text to the vertical orientation.)

Note

If the font does not contain vertical text spacing information, Ren'Py will attempt to synthesize this information from horizontal text information. The spacing may not remain constant between Ren'Py releases.

Ruby Textlink
Ruby text (also known as furigana or interlinear annotations) is a way of placing small text above a character or word. There are several steps required for your game to support ruby text.

First, you must set up styles for the ruby text. The following style changes are required:

The line_leading property must be used to leave enough vertical space for the ruby text.

A new named style must be created. The properties of this style, such as size should be set in a fashion appropriate for ruby text.

The yoffset of the new style should be set, in order to move the ruby text above the baseline.

The ruby_style field of the text's style should be set to the newly-created style, for both dialogue and history window text.

For example:

style ruby_style is default:
    size 12
    yoffset -20

style say_dialogue:
    line_leading 12
    ruby_style style.ruby_style

style history_text:
    line_leading 12
    ruby_style style.ruby_style
(Use style.style_name to refer to a style for this purpose.)

Once Ren'Py has been configured, ruby text can be included in two way.

Lenticular brackets. Ruby text can be written by enclosing it full-width lenticular brackets (【】), with the full-width or half-width vertical line character (｜ or |) separating the bottom text from the top text. For example:

e "Ruby can be used for furigana (【東｜とう】 【京｜きょう】)."

e "It's also used for translations (【東京｜Tokyo】)."
Ruby text will only trigger if a vertical line is present. The left lenticular bracket can be quoted by doubling it. Lenticular ruby text may not contain other text tags.

The {rt} and {rb} text tags. The {rt} tag is used to mark one or more characters to be displayed as ruby text. If the ruby text is preceded by text enclosed in the {rb} tag, the ruby text is centered over that text. Otherwise, it is centered over the preceding character.

For example:

e "Ruby can be used for furigana (東{rt}とう{/rt} 京{rt}きょう{/rt})."

e "It's also used for translations ({rb}東京{/rb}{rt}Tokyo{/rt})."
It's the creator's responsibility to ensure that ruby text does not leave the boundaries of the text. It may be necessary to add leading or spaces to the left and right of the text to prevent these errors from occurring.

Ren'Py also supports alternate ruby text, which is a second kind of ruby top text. This is introduced with the {art} text tag (instead of {rt}), and the altruby_style property (instead of ruby_style).

Fontslink
Ren'Py supports TrueType/OpenType fonts and collections, and Image-Based fonts.

A TrueType or OpenType font is specified by giving the name of the font file. The file must be present in the game directory or one of the archive files.

Ren'Py also supports TrueType/OpenType collections that define more than one font. When accessing a collection, use the 0-based font index, followed by an at-sign and the file name. For example, "0@font.ttc" is the first font in a collection, "1@font.ttc" the second, and so on.

When looking for a font files, if the file is not found, Ren'Py will search in the game/fonts directory. For example, when looking for test.ttf, Ren'Py will first search for game/test.ttf, and then for game/fonts/test.ttf.

Font Replacementlink
The config.font_replacement_map variable is used to map fonts. The combination of font filename, boldness, and italics is mapped to a similar combination. This allows a font with proper italics to be used instead of the automatically-generated italics.

Once such mapping would be to replace the italic version of the Deja Vu Sans font with the official oblique version (You'll need to download the oblique font from the web):

init python:
    config.font_replacement_map["DejaVuSans.ttf", False, True] = ("DejaVuSans-Oblique.ttf", False, False)
This mapping can improve the look of italic text.

Font names and aliaseslink
The config.font_name_map variable is used to give names or aliases to fonts. This allows two things : first, to make dialogues using the {font} tag shorter and easier to use, and second, to enable Font Groups to be used by these tags.

define config.font_name_map["jap"] = "electroharmonix.ttf"
define config.font_name_map["tjap"] = FontGroup().add("OrthodoxHerbertarian.ttf", "A", "Z").add("electroharmonix.ttf", None, None)

label yamato:
    e "Sorry, what does {font=jap}Black holes and revelations{/font} mean ?"
    y "You pronounce it {font=tjap}Black Holes And Revelations{/font}." # the capital letters appear in OrthodoxHerbertarian
Image-Based Fontslink
Image based fonts can be registered by calling one of the following registration functions. Registering an image-based font requires the specification of a name, size, boldness, italicness, and underline. When all of these properties match the registered font, the registered font is used.

renpy.register_bmfont(name=None, size=None, bold=False, italics=False, underline=False, filename=None)link
This registers a BMFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font.

Please see the BMFont home page for the tool that creates BMFonts. Ren'Py expects that the filename parameter will be to a file in the BMFont text format, that describes a 32-bit font. The Alpha channel should contain the font information, while the Red, Green, and Blue channels should be set to one. The image files, kerning, and other control information is read out of the BMFont file.

We recommend including Latin and General Punctuation as part of your BMFont, to ensure all of the Ren'Py interface can render.

name
The name of the font being registered, a string.

size
The size of the font being registered, an integer.

bold
The boldness of the font being registered, a boolean.

italics
The italicness of the font being registered, a boolean.

underline
An ignored parameter.

filename
The file containing BMFont control information.

renpy.register_mudgefont(name=None, size=None, bold=False, italics=False, underline=False, filename=None, xml=None, spacewidth=10, default_kern=0, kerns={})link
This registers a MudgeFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font.

Please see the MudgeFont home page for the tool that creates MudgeFonts. Ren'Py assumes that character codes found in the MudgeFont xml file are unicode character numbers, and ignores negative character codes.

name
The name of the font being registered, a string.

size
The size of the font being registered, an integer.

bold
The boldness of the font being registered, a boolean.

italics
The italicness of the font being registered, a boolean.

underline
An ignored parameter.

filename
The file containing the MudgeFont image, a string. The image is usually a TGA file, but could be a PNG or other format that Ren'Py supports.

xml
The xml file containing information generated by the MudgeFont tool.

spacewidth
The width of a space character, an integer in pixels.

default_kern
The default kern spacing between characters, in pixels.

kerns
A map from two-character strings to the kern that should be used between those characters.

renpy.register_sfont(name=None, size=None, bold=False, italics=False, underline=False, filename=None, spacewidth=10, baseline=None, default_kern=0, kerns={}, charset='!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~')link
This registers an SFont with the given details. Please note that size, bold, italic, and underline are all advisory (used for matching), and do not change the appearance of the font.

More information about SFont.

name
The name of the font being registered, a string.

size
The size of the font being registered, an integer.

bold
The boldness of the font being registered, a boolean.

italics
The italicness of the font being registered, a boolean.

underline
An ignored parameter.

filename
The file containing the sfont image, a string.

spacewidth
The width of a space character, an integer in pixels.

baseline
The distance from the top of the font to the baseline (the invisible line letters sit on), an integer in pixels. If this font is mixed with other fonts, their baselines will be aligned. Negative values indicate distance from the bottom of the font instead, and None means the baseline equals the height (i.e., is at the very bottom of the font).

default_kern
The default kern spacing between characters, in pixels.

kerns
A map from two-character strings to the kern that should be used between those characters.

charset
The character set of the font. A string containing characters in the order in which they are found in the image. The default character set for a SFont is

! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _
` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~
As BMFont is the most complete of the three image font formats Ren'Py supports, it's the one recommended for new projects. An example of BMFont use is:

init python:
    renpy.register_bmfont("bmfont", 22, filename="bmfont.fnt")

define ebf = Character('Eileen', what_font="bmfont", what_size=22)

label demo_bmfont:

    ebf "Finally, Ren'Py supports BMFonts."
Font Groupslink
When creating a multilingual game, it may not be possible to find a single font that covers every writing system the game use while projecting the the mood the creator intends. To support this, Ren'Py supports font groups that can take characters from two or more fonts and combine them into a single font.

To create a font group, create a FontGroup object and call the .add method on it once or more. A FontGroup can be used wherever a font name can be used. The add method takes the start and end of a range of Unicode character points, and the first range to cover a point is used.

For example:

style default:
     font FontGroup().add("english.ttf", 0x0020, 0x007f).add("japanese.ttf", 0x0000, 0xffff)
classFontGrouplink
A group of fonts that can be used as a single font.

add(font, start, end, target=None, target_increment=False)link
Associates a range of characters with a font.

start
The start of the range. This may be a single-character string, or an integer giving a unicode code point. If start is None, then the font is used as the default.

end
The end of the range. This may be a single-character string, or an integer giving a unicode code point. This is ignored if start is None.

target
If given, associates the given range of characters with specific characters from the given font, depending on target_increment. This may be a single-character string, or an integer giving a unicode code point. This is ignored if the character had already been added.

target_increment
If True, the [start, end] range is mapped to the [target, target+end-start] range. If False, every character from the range is associated with the target character.

When multiple .add() calls include the same character, the first call takes precedence.

This returns the FontGroup, so that multiple calls to .add() can be chained together.

remap(cha, target)link
Remaps one or a set of characters to a single target character.

cha
The character or characters to remap. This may be a single-character string, or an integer giving a unicode code point, or an iterable of either.

target
The character to remap to. This may be a single-character string, or an integer giving a unicode code point.

Any given character having already been remapped (either with add or with remap) will be ignored. However, if the FontGroup has no default font, any given character must have been previously added.

This method also returns the FontGroup, for the same reasons.

Note that while FontGroups can be given a name using config.font_name_map, a FontGroup only takes filepaths as fonts, and does not recognize names or aliases defined using that variable.

Text Displayableslink
Text can also be used as a displayable, which allows you to apply transforms to text, displaying it as if it was an image and moving it around the screen.

classParameterizedText(style='default', **properties)link
This is a displayable that can be shown with an additional string parameter, which then shows that string as if it was an image. This is usually used as part of the pre-defined text image.

For example, one can do:

show text "Hello, World" at truecenter
with dissolve
pause 1
hide text
with dissolve
You can use ParameterizedText directly to define similar images with different style properties. For example, one can write:

image top_text = ParameterizedText(xalign=0.5, yalign=0.0)

label start:
    show top_text "This text is shown at the center-top of the screen"
classText(text, slow=None, scope=None, substitute=None, slow_done=None, *, tokenized=False, **properties)link
A displayable that displays text on the screen.

text
The text to display on the screen. This may be a string, or a list of strings and displayables.

slow
Determines if the text is displayed slowly, being typed out one character at the time. If None, slow text mode is determined by the slow_cps style property. Otherwise, the truth value of this parameter determines if slow text mode is used.

scope
If not None, this should be a dictionary that provides an additional scope for text interpolation to occur in.

substitute
If true, text interpolation occurs. If false, it will not occur. If None, they are controlled by config.new_substitutions.

slow_done
If not None, and if slow text mode is enabled (see the slow parameter), this is a function or callable which is called with no arguments when the text finishes displaying.

tokenized
If true, text is expected to be a list of tokens, rather than a string. The tokens are introduced in the Custom Text Tags page.

**properties
Like other Displayables, Text takes style properties, including (among many others) the mipmap property.

Text Utility Functionslink
renpy.filter_text_tags(s, allow=None, deny=None)link
Returns a copy of s with the text tags filtered. Exactly one of the allow and deny keyword arguments must be given.

allow
A set of tags that are allowed. If a tag is not in this list, it is removed.

deny
A set of tags that are denied. If a tag is not in this list, it is kept in the string.

renpy.substitute(s, scope=None, translate=True)link
Applies translation and new-style formatting to the string s.

scope
If not None, a scope which is used in formatting, in addition to the default store.

translate
Determines if translation occurs.

Returns the translated and formatted string.

renpy.transform_text(s, function)link
Transforms s, while leaving text tags and interpolation the same.

function
A function that is called with strings corresponding to runs of text, and should return a second string that replaces that run of text.

init python:
    def upper(s):
        return s.upper()

$ upper_string = renpy.transform_text("{b}Not Upper{/b}", upper)
Slow Text Concernslink
Ren'Py allows the creator or user to indicate that text should be displayed slowly. In this case, Ren'Py will render the text to a texture, and then draw rectangles from the texture to the screen.

Unfortunately, this means that it's possible to get rendering artifacts when characters overlap. To minimize these rendering artifacts, ensure that the line_leading and line_spacing properties are large enough that lines do not overlap. If the bottoms of characters on the first line are clipped, especially if line_spacing is negative, consider increasing line_overlap_split.

Horizontal artifacts are also possible when characters are kerned together, but these artifacts are less severe, as they exist for only a single frame.

Artifacts aren't a problem for static text, like the text in menus and other parts of the user interface.

Text Overflow Logginglink
Ren'Py can log cases where text expands outside of the area allocated for it. To enable text overflow logging, the following steps are necessary.

Set the config.debug_text_overflow variable to true.

Set the xmaximum and ymaximum style properties on either the Text displayable, or a container enclosing it.

Run the game.

Whenever text is displayed that overflows the available area, Ren'Py will log an error to the text_overflow.txt file.

Translationlink
Ren'Py contains a comprehensive framework for the translation of visual novels. There are four main types of things that can be translated:

Dialogue
The main dialogue of the script can be translated, including a provision for splitting, combining, omitting, and reordering lines.

Menus and Interface Strings
All interface text can be translated.

Images and Files
It's possible to include variant images and other files that are used when a language is selected.

Styles
It's possible to customize styles based on the language, so that the game can automatically switch to a font appropriate for the language that was chosen.

Ren'Py's translation support is currently focused on sanctioned translations, where the game's creators either release the game scripts to the translator or create translation templates themselves. Support for unsanctioned translations is more limited.

Primary and Alternate Languageslink
Ren'Py expects each game to be written in a single primary language. This is called the None language, regardless of what language it actually is. (For example, if the game was written in English, English will be the None language.)

Alternate languages are referred to by names which can double as Python identifiers (starts with a letter or underscore, followed by letters, numbers, and underscores).

When the None language is selected, most of Ren'Py's translation functionality is disabled, with the notable exception of Renpy's internal built-in strings, from the accessibility menu for example. Theses strings are not found in your project's code, yet they will still be included in the distributed version of the game. You can find them in the game/tl/None/common.rpym file, whose only purposes are 1) to provide translations to these strings when the None language is not english, and 2) to allow creators to customize these strings for their game.

The language of the launcher at the time when the project is created will be the language this file will initially translate the internal strings to.

Generating Translation Fileslink
When the project scripts are available, translation files can be generated by opening the project in the Ren'Py Launcher, and choosing "Generate Translations". The launcher will prompt you for the name of the language to generate, and will then proceed to create or update the translation files.

The translation files live in directories underneath the "tl" subdirectory of the game directory. For example, if you create a piglatin translation of the tutorial project, translation files will be placed under tutorial/game/tl/piglatin.

There will be one translation file created per game script file. The common.rpy file will also be created to contain translations of strings that are common to all games made using Ren'Py.

Translating Dialoguelink
As Ren'Py is a visual novel engine, we expect most translation to involve dialogue. Ren'Py includes a flexible framework that allows dialogue to be split, combined, reordered, and omitted entirely.

Translation Unitslink
The fundamental unit of translation is a block of zero or more translatable statements, optionally followed by a single say statement. Translatable statements are the voice and nvl statements. For example, take the following game:

label start:
    e "Thank you for taking a look at the Ren'Py translation framework."

    show eileen happy

    e "We aim to provide a comprehensive framework for translating dialogue, strings, images, and styles."

    e "Pretty much everything your game needs!"
This is broken up into multiple translation units. Each unit has an identifier assigned to it, with the identifier being generated from the label preceding the unit, and the statements inside the unit. (If multiple units would be assigned the same translation number, a serial number to the second and later units to distinguish them.)

In the example above, the first unit generated is assigned the identifier start_636ae3f5, and contains the statement:

e "Thank you for taking a look at the Ren'Py translation framework."
The second unit is given the identifier start_bd1ad9e1m and contains:

e "We aim to provide a comprehensive framework for translating dialogue, strings, images, and styles."
The third unit has the identifier start_9e949aac, and contains:

e "Pretty much everything your game needs!"
These units are created automatically by Ren'Py when the game script is loaded.

Translate Statementlink
When you generate translations for a language, Ren'Py will generate a translate statement corresponding to each translation unit. When translating the script above, Ren'Py will generate:

# game/script.rpy:95
translate piglatin start_636ae3f5:

    # e "Thank you for taking a look at the Ren'Py translation framework."
    e ""

# game/script.rpy:99
translate piglatin start_bd1ad9e1:

    # e "We aim to provide a comprehensive framework for translating dialogue, strings, images, and styles."
    e ""

# game/script.rpy:101
translate piglatin start_9e949aac:

    # e "Pretty much everything your game needs!"
    e ""
This can be translated by editing the generated files. A finished translation might look like:

# game/script.rpy:95
translate piglatin start_636ae3f5:
    # e "Thank you for taking a look at the Ren'Py translation framework."
    e "Ankthay ouyay orfay akingtay away ooklay atway ethay En'Pyray anslationtray ameworkfray."

# game/script.rpy:99
translate piglatin start_bd1ad9e1:

    # e "We aim to provide a comprehensive framework for translating dialogue, strings, images, and styles."
    e "Eway aimway otay ovidepray away omprehensivecay ameworkfray orfay anslatingtray ialogueday, ingsstray, imagesway, andway ylesstay."

# game/script.rpy:101
translate piglatin start_9e949aac:

    # e "Pretty much everything your game needs!"
    e "Ettypray uchmay everythingway ouryay amegay eedsnay!"
When a block in the main script is encountered, Ren'Py checks to see if a translate statement corresponding to that block exists. If so, it executes the translate statement instead of the translated block, showing the user the translation.

More Complex Translationslink
Translate statements do not need to contain 1-to-1 translations of the original language. For example, a long line could be split:

# game/script.rpy:99
translate piglatin start_bd1ad9e1:
    # e "We aim to provide a comprehensive framework for translating dialogue, strings, images, and styles."
    e "Eway aimway otay ovidepray away omprehensivecay ameworkfray..."
    e "...orfay anslatingtray ialogueday, ingsstray, imagesway, andway ylesstay."
Or a statement can be removed, by replacing it with the pass statement:

# game/script.rpy:101
translate piglatin start_9e949aac:

    # e "Pretty much everything your game needs!"
    pass
It's also possible to run non-dialogue statements, such as conditionals or Python. For example, we can translate:

e "You scored [points] points!"
into:

# game/script.rpy:103
translate piglatin start_36562aba:

    # e "You scored [points] points!"
    $ latin_points = to_roman_numerals(points)
    e "Ouyay oredscay [latin_points] ointspay!"
Tipslink
Be very careful when changing dialogue that has been translated, especially when that dialogue is repeated in more than one place inside a label.

Sometimes it might be desirable to change a line of dialogue in the original language, without requiring the translators to retranslate the line. For example, a typo in English is unlikely to have survived the process of being translated into Russian.

This can be done by including an id clause as part of the say statement, giving the translation ID to use for this statement. For example:

label start:
    e "This used to have a typo." id start_61b861a2
Adding labels can also confuse the translation process. To prevent this, labels that are given the hide clause are ignored when generating translations.

label ignored_by_translation hide:
    "..."
While translation blocks may include Python, this Python should not have side effects visible outside of the block. That's because changing languages will restart the translation block, causing the side effects to occur multiple times.

Menu and String Translationslink
In addition to dialogue, Ren'Py is able to translate text found in menus and other strings. Interface translations are a 1-to-1 substitution. Wherever a string is found, it will be replaced by a single replacement.

When generating translations, Ren'Py will scan the script files for menus, and for strings enclosed inside the _() function. It will then place the strings inside a translate strings block. For example, if we have the following script:

define e = Character(_("Eileen"))

# ...

menu:

     "Go West":
        # ...

     "Head East":
        # ...
Ren'Py will generate:

translate piglatin strings:

    old "Eileen"
    new ""

    old "Go West"
    new ""

    old "Head East"
    new ""
Which can then be translated:

translate piglatin strings:

    old "Eileen"
    new "Eileenway"

    old "Go West"
    new "Ogay Estway"

    old "Head East"
    new "Eadhay Eastway"
String translations are also applied to dialogue strings that are not translated as dialogue.

When the same string is used in multiple places, the string can be distinguished using the {#...} text tag. Even though they display the same, Ren'Py considers all of these distinct strings for the purpose of translation:

"New"
"New{#project}"
"New{#game}"
"New{#playlist}"
The translate strings statement can also be used to translate the None language. This can be used to when the game is written in a non-English language, to translate the Ren'Py user interface.

translate None strings:
     old "Start Game"
     new "Artstay Amegay"
Translating Substitutionslink
String substitutions can be translated using the !t conversion flag. So the following will be translatable using a combination of the dialogue and string translation systems:

if mood_points > 5:
    $ mood = _("great")
else:
    $ mood = _("awful")

"I'm feeling [mood!t]."
Extracting and Merging String Translationslink
String translations can be extracted from one project, and moved to another. This is a multiple-step process:

Select the source project, and choose "Generate Translations".

Enter the language to extract, and click "Extract String Translations".

Return to the main menu, select the target project, and choose "Generate Translations".

Enter the language to merge to (often the same language), and choose "Merge String Translations".

There are a couple of options that control merging:

Replace existing translations
When checked, this will cause non-trivial existing translations (those that are not empty or the source string) to be replaced. By default, merging will refuse to overwrite non-trivial translations that already exist.

Reverse languages
Reverses the strings before merging. This can be used, for example, to use a set of English -> Russian translations to create a Russian -> English translation.

Image and File Translationslink
When translating a game, it may be necessary to replace a file with a translated version. For example, if an image contains text, it might make sense to replace it with a version of the image where the text is in another language.

Ren'Py handles this by looking in the translation directory for the image. For example, if the "piglatin" language is in use, and "library.png" is loaded, Ren'Py will use "game/tl/piglatin/library.png" in preference to "game/library.png".

If the file is in a directory under game, that directory should be included underneath the language. For example, the file "game/gui/main_menu.png" can be translated by creating the file "game/tl/piglatin/gui/main_menu.png".

Style Translationslink
It may be necessary to change styles – especially font-related styles – when translating a game. Ren'Py handles this with translate style blocks and translate python blocks. These blocks can change language-related variables and styles. For example:

translate piglatin style default:
    font "stonecutter.ttf"
More usually, the font used for dialogue is set with gui.text_font, which can be customized using:

translate piglatin python:
    gui.text_font = "stonecutter.ttf"
When a language is activated – either at the start of the game, or after a language change – Ren'Py resets the styles to their contents at the end of the init phase. It then runs all translate python blocks, all style blocks, and all translate style blocks associated with the current language, guaranteeing that blocks appearing earlier in a file are executed first. Finally, it rebuilds styles, allowing the changes to take effect.

Style translations may be added to any .rpy file.

Default Languagelink
The default language is chosen using the following method:

If the RENPY_LANGUAGE environment variable is set, that language is used.

If config.language is set, that language is used, overriding all of the following.

If the game has ever chosen a language in the past, that language is used.

If this is the first time the game has been run and config.enable_language_autodetect is True, Ren'Py tries to autodetect the language using config.locale_to_language_function.

If this is the first time the game has been run, config.default_language is used.

Otherwise, the None language is used.

Translation Actions, Functions, and Variableslink
The main way to switch languages is with the Language action.

Language(language)link
Changes the language of the game to language.

language
A string giving the language to translate to, or None to use the default language of the game script.

The Language action can be used to add a language preference to the preferences screen:

frame:
    style_prefix "pref"
    has vbox

    label _("Language")
    textbutton "English" action Language(None)
    textbutton "Igpay Atinlay" action Language("piglatin")
There are two translation-related functions:

renpy.change_language(language, force=False)link
Changes the current language to language, which can be a string or None to use the default language.

renpy.get_translation_identifier()link
Returns the translation identifier for the current statement.

renpy.known_languages()link
Returns the set of known languages. This does not include the default language, None.

In addition, there are four functions that are related to string translation:

_(s)link
(Single underscore) Returns s unchanged. Ren'Py will scan for strings enclosed in this function, and add them to the list of translatable strings. The strings will not be translated until they are displayed.

__(s)link
(Double underscore) Returns s immediately translated into the current language. Strings enclosed in this function will be added to the list of translatable strings. Note that the string may be double-translated, if it matches a string translation when it is displayed.

_p(s)link
Reformats a string and flags it as translatable. The string will be translated when displayed by the text displayable. This is intended to define multi-line for use in strings, of the form:

define gui.about = _p("""
    These two lines will be combined together
    to form a long line.

    This line will be separate.
    """)
The reformatting is done by breaking the text up into lines, removing whitespace from the start and end of each line. Blank lines are removed at the end. When there is a blank line, a blank line is inserted to separate paragraphs. The {p} tag breaks a line, but doesn't add a blank one.

This can be used in a string translation, using the construct:

old "These two lines will be combined together to form a long line.\n\nThis line will be separate."
new _p("""
    These two lines will be combined together
    to form a long line. Bork bork bork.

    This line will be separate. Bork bork bork.
    """)
renpy.translate_string(s, language=<renpy.object.Sentinel object at 0x7ff68242eb00>)link
Returns s immediately translated into language. If language is Default, uses the language set in the preferences. Strings enclosed in this function will not be added to the list of translatable strings. Note that the string may be double-translated, if it matches a string translation when it is displayed.

There are two language-related variables. One is config.default_language, which is used to change the default language of the game.

_preferences.languagelink
The name of the current language, or None if the default language is being used. This should be treated as a read-only variable. To change the language, call renpy.change_language().

Unsanctioned Translationslink
Note

It's best to ask a game's creators for permission before creating an unsanctioned translation.

Ren'Py includes a small amount of support for creating translations without the active assistance of the game's creators. This support consists of the ability to automatically create a string translation file from all of the strings in the game. Since string translations are used for untranslated dialogue, this technique makes it possible to translate a game.

To create a string translation file, perform the following steps:

Set the RENPY_LANGUAGE environment variable to the language you want to translate to.

Set the RENPY_UPDATE_STRINGS environment variable to a non-empty value.

Play through the game until all text is seen.

This will update the "game/tl/language/strings.rpy" file with a translation template that contains all of the strings in it.

If a game doesn't include support for changing the language, it may be appropriate to use an init python block to set config.language to the target language.

define config.language = Nonelink
If not None, sets the language to use at game launch, overriding any memorized choice made by the user.

Along with the use of string translations for dialogue, unsanctioned translators may be interested in using the techniques described above to translate images and styles.

Displayableslink
A displayable is an object that can be shown to the user. Ren'Py displayables can be used in many ways.

Assignment to an image name using the image statement.

Added to a screen using the screen language add statement.

Assignment to certain config variables.

Assignment to certain style properties.

When a Ren'Py function or variable expects a displayable, there are five things that can be provided:

An object of type Displayable, created by calling one of the functions given below.

A string with a colon : in it. These are rare, but see the section on displayable prefixes below.

A string with a dot . in it. Such a string is interpreted as a filename by Image().

A color. A color may either be given as a hexadecimal color string in "#rgb", "#rgba", "#rrggbb", or "#rrggbbaa" form, a Color, or an (r, g, b, a) tuple, where each component is an integer between 0 and 255. Colors are passed to Solid().

An image name. Any other string is interpreted as a reference to an image, either defined with the image statement or auto-defined from the images directory.

A list. If a list is provided, each item is expanded as described below, and checked to see if it matches a filename or image name. If so, expansion stops and the matched thing is then processed as described above.

Strings may have one or more square-bracket substitutions in them, such as "eileen [mood]" or "eileen_[outfit]_[mood].png". When such a string is given, a dynamic image is created. A dynamic image has text interpolation performed at the start of each interaction (such as say statements and menus). The resulting string is processed according to the rules above.

When a string has "[prefix_]" in it, that substitution is replaced with each of the style prefixes associated with the current displayable.

Imageslink
The most commonly used displayable is Image, which loads a file from disk and displays it. Since Image is so commonly used, when a string giving a filename is used in a context that expects a displayable, an Image is automatically created. The only time it's necessary to use Image directly is when you want to create an image with style properties.

Image(filename, *, optimize_bounds=True, oversample=1, **properties)link
Loads an image from a file. filename is a string giving the name of the file.

filename
This should be an image filename, including the extension.

optimize_bounds
If true, only the portion of the image that inside the bounding box of non-transparent pixels is loaded into GPU memory. (The only reason to set this to False is when using an image as input to a shader.)

oversample
If this is greater than 1, the image is considered to be oversampled, with more pixels than its logical size would imply. For example, if an image file is 2048x2048 and oversample is 2, then the image will be treated as a 1024x1024 image for the purpose of layout.

# These two lines are equivalent.
image logo = "logo.png"
image logo = Image("logo.png")

# Using Image allows us to specify a default position as part of
# an image.
image logo right = Image("logo.png", xalign=1.0)
There are four image file formats we recommend you use:

AVIF

WEBP

PNG

JPG

And one vector image file format we recommend:

SVG

Non-animated GIF and BMP files are also supported, but should not be used in modern games.

Loading an Image from a file on disk and decoding it so it can be drawn to the screen takes a long amount of time. While measured in the tenths or hundreds of seconds, the duration of the loading process is long enough that it can prevent an acceptable framerate, and become annoying to the user.

Since an Image is of a fixed size, and doesn't change in response to input, game state, or the size of the area available to it, an Image can be loaded before it is needed and placed into an area of memory known as the image cache. Once an Image is decoded and in the cache, it can be quickly drawn to the screen.

Ren'Py attempts to predict the images that will be used in the future, and loads them into the image cache before they are used. When space in the cache is needed for other images, Ren'Py will remove images that are no longer being used.

By default, Ren'Py will predictively cache up to 8 screens worth of image data. (If your screen is 800x600, then a screen's worth of data is one 800x600 image, two 400x600 images, and so on.) This can be changed with the config.image_cache_size configuration variable.

Although the precise amount is dependent on implementation details and there is significant overhead, as a rule of thumb, each pixel in the image cache consumes 4 bytes of main memory and 4 bytes of video memory.

SVG Imageslink
Ren'Py supports many SVG 1.0 images, using the NanoSVG library. Some unsupported features include:

Text elements are ignored. If the text is converted into a path, it will be rendered.

Embedded bitmaps are ignored.

Scripts are ignored.

Animations are ignored.

A list of features NanoSVG supports may be found here.

It's recommended to convert everything in an SVG image that will not render properly into paths.

Ren'Py will render SVG images as if the virtual screen was 96dpi. If the window is enlarged or shrunk, the SVG image will be scaled up or down, respectively, and oversampling will be used to ensture the image is rendered at the correct virtual size.

This ensures the SVG will be rendered sharp if it is not scaled.

Image-Like Displayableslink
We call these displayables image-like because they take up a rectangular area of the screen, and do not react to input. These differ from normal images by varying their size to fill an area (Frame, Tile, and Solid), or by allowing the user to specify their size (Composite, Crop, Null). They are not image manipulators.

Image-like displayables take Position Style Properties.

classAlphaMask(child, mask, **properties)link
This displayable takes its colors from child, and its alpha channel from the multiplication of the alpha channels of child and mask. The result is a displayable that has the same colors as child, is transparent where either child or mask is transparent, and is opaque where child and mask are both opaque.

The child and mask parameters may be arbitrary displayables. The size of the AlphaMask is the size of child.

Note that this takes different arguments from im.AlphaMask(), which uses the mask's red channel.

classBorders(left, top, right, bottom, pad_left=0, pad_top=0, pad_right=0, pad_bottom=0)link
This object provides border size and tiling information to a Frame(). It can also provide padding information that can be supplied to the padding style property of a window or frame.

left, top, right, bottom
These provide the size of the insets used by a frame, and are added to the padding on each side. They should be zero or a positive integer.

pad_left, pad_top, pad_right, pad_bottom
These are added to the padding on each side, and may be positive or negative. (For example, if left is 5 and pad_left is -3, the final padding is 2.)

The padding information is supplied via a field:

paddinglink
This is a four-element tuple containing the padding on each of the four sides.

Composite(size, *args, **properties)link
This creates a new displayable of size, by compositing other displayables. size is a (width, height) tuple.

The remaining positional arguments are used to place images inside the Composite. The remaining positional arguments should come in groups of two, with the first member of each group an (x, y) tuple, and the second member of a group is a displayable that is composited at that position.

Displayables are composited from back to front.

image eileen composite = Composite(
    (300, 600),
    (0, 0), "body.png",
    (0, 0), "clothes.png",
    (50, 50), "expression.png")
Crop(rect, child, **properties)link
This creates a displayable by cropping child to rect, where rect is an (x, y, width, height) tuple.

image eileen cropped = Crop((0, 0, 300, 300), "eileen happy")
classDynamicImage(name)link
A DynamicImage is a displayable that has text interpolation performed on it to yield a string giving a new displayable. Such interpolation is performed at the start of each interaction.

classFlatten(child, drawable_resolution=True, **properties)link
This flattens child, which may be made up of multiple textures, into a single texture.

Certain operations, like the alpha transform property, apply to every texture making up a displayable, which can yield incorrect results when the textures overlap on screen. Flatten creates a single texture from multiple textures, which can prevent this problem.

Flatten is a relatively expensive operation, and so should only be used when absolutely required.

drawable_resolution
Defaults to true, which is usually the right choice, but may cause the resulting texture, when scaled, to have different artifacts than the textures that make it up. Setting this to False will change the artifacts, which may be more pleasing in some cases.

classFrame(image, left=0, top=0, right=None, bottom=None, *, tile=False, **properties)link
A displayable that resizes an image to fill the available area, while preserving the width and height of its borders. It is often used as the background of a window or button.

_images/frame_example.png
Using a frame to resize an image to double its size.link

image
An image manipulator that will be resized by this frame.

left
The size of the border on the left side. This can also be a Borders() object, in which case that object is used in place of the other parameters.

top
The size of the border on the top.

right
The size of the border on the right side. If None, defaults to left.

bottom
The side of the border on the bottom. If None, defaults to top.

tile
If set to True, tiling is used to resize sections of the image, rather than scaling. If set to the string "integer", the nearest integer number of tiles will be used in each direction. That set of full tiles will then be scaled up or down to fit the required area.

# Resize the background of the text window if it's too small.
init python:
    style.window.background = Frame("frame.png", 10, 10)
classNull(width=0, height=0, **properties)link
A displayable that creates an empty box on the screen. The size of the box is controlled by width and height. This can be used when a displayable requires a child, but no child is suitable, or as a spacer inside a box.

image logo spaced = HBox("logo.png", Null(width=100), "logo.png")
classSolid(color, **properties)link
A displayable that fills the area its assigned with color.

image white = Solid("#fff")
classTile(child, style='tile', **properties)link
Tiles child until it fills the area allocated to this displayable.

image bg tile = Tile("bg.png")
Text Displayableslink
See Text Displayables.

Dynamic Displayableslink
Dynamic displayables display a child displayable based on the state of the game.

Note that these dynamic displayables always display their current state. Because of this, a dynamic displayable will not participate in a transition. (Or more precisely, it will display the same thing in both the old and new states of the transition.)

By design, dynamic displayables are intended to be used for things that change rarely and when an image defined this way is off screen (Such as a character customization system). It is not designed for things that change frequently, such as character emotions.

ConditionSwitch(*args, predict_all=None, **properties)link
This is a displayable that changes what it is showing based on Python conditions. The positional arguments should be given in groups of two, where each group consists of:

A string containing a Python condition.

A displayable to use if the condition is true.

The first true condition has its displayable shown, at least one condition should always be true.

The conditions uses here should not have externally-visible side-effects.

predict_all
If True, all of the possible displayables will be predicted when the displayable is shown. If False, only the current condition is predicted. If None, config.conditionswitch_predict_all is used.

image jill = ConditionSwitch(
    "jill_beers > 4", "jill_drunk.png",
    "True", "jill_sober.png")
classDynamicDisplayable(function, *args, **kwargs)link
A displayable that can change its child based on a Python function, over the course of an interaction. It does not take any properties, as its layout is controlled by the properties of the child displayable it returns.

function
A function that is called with the arguments:

The amount of time the displayable has been shown for.

The amount of time any displayable with the same tag has been shown for.

Any positional or keyword arguments supplied to DynamicDisplayable.

and should return a (d, redraw) tuple, where:

d is a displayable to show.

redraw is the maximum amount of time to wait before calling the function again, or None to not require the function be called again before the start of the next interaction.

function is called at the start of every interaction.

As a special case, function may also be a python string that evaluates to a displayable. In that case, function is run once per interaction.

# Shows a countdown from 5 to 0, updating it every tenth of
# a second until the time expires.
init python:

    def show_countdown(st, at):
        if st > 5.0:
            return Text("0.0"), None
        else:
            d = Text("{:.1f}".format(5.0 - st))
            return d, 0.1

image countdown = DynamicDisplayable(show_countdown)
ShowingSwitch(*args, predict_all=None, **properties)link
This is a displayable that changes what it is showing based on the images are showing on the screen. The positional argument should be given in groups of two, where each group consists of:

A string giving an image name, or None to indicate the default.

A displayable to use if the condition is true.

A default image should be specified.

predict_all
If True, all of the possible displayables will be predicted when the displayable is shown. If False, only the current condition is predicted. If None, config.conditionswitch_predict_all is used.

One use of ShowingSwitch is to have images change depending on the current emotion of a character. For example:

image emotion_indicator = ShowingSwitch(
   "eileen concerned", "emotion_indicator concerned",
   "eileen vhappy", "emotion_indicator vhappy",
   None, "emotion_indicator happy")
Layer Displayableslink
Layer displayables display the contents of a layer based on the state of the game. They are intended for use with config.detached_layers.

Note that similar to dynamic displayables, the layers shown within always display their current state. Because of this, the contents of a layer displayable will not participate in a transition, unless that transition is targeted at the layer being displayed.

classLayer(layer, **properties)link
This allows a layer to be shown as a displayable on another layer. Intended for use with detached layers.

Trying to display a layer on itself is not supported.

layer
The layer to display.

clipping
If False, the layer's contents may exceed its bounds, otherwise anything exceeding the bounds will be trimmed.

# A new detached layer to hold the contents of a broadcast.
define config.detached_layers += [ "broadcast" ]

# A layer displayable to represent a TV and watch the broadcast layer.
image tv = Window(Layer("broadcast"), background='#000', padding=(10, 10))

image living_room = Placeholder('bg', text='living_room')
image studio = Solid('7c7')
image eileen = Placeholder('girl')

label example:
    pause

    # Set up the broadcast scene.
    scene studio onlayer broadcast
    with None

    # Begin a new scene in the living room.
    scene living_room

    # Show the TV in the lower right corner of ths screen.
    show tv:
      align (.75, .75) zoom .3

    # Show Eileen in the broadcast.
    show eileen onlayer broadcast

    # Dissolve into the living room, as Eileen enters the TV from the right.
    with {'master': dissolve, 'broadcast': moveinright}
    pause
Applying Transforms to Displayableslink
The At function produces a displayable from a displayable and one or more transforms.

At(d, *args)link
Given a displayable d, applies each of the transforms in args to it. The transforms are applied in left-to-right order, so that the outermost transform is the rightmost argument.

transform birds_transform:
    xpos -200
    linear 10 xpos 800
    pause 20
    repeat

image birds = At("birds.png", birds_transform)
Layout Boxes and Gridslink
Layout boxes are displayables that lay out their children on the screen. They can lay out the children in a horizontal or vertical manner, or lay them out using the standard positioning algorithm.

The box displayables take any number of positional and keyword arguments. Positional arguments should be displayables that are added to the box as children. Keyword arguments are style properties that are applied to the box.

Boxes take Position Style Properties and Box Style Properties.

Fixed(*args, **properties)link
A box that fills the screen. Its members are laid out from back to front, with their position properties controlling their position.

HBox(*args, **properties)link
A box that lays out its members from left to right.

VBox(*args, **properties)link
A layout that lays out its members from top to bottom.

# Display two logos, to the left and right of each other.
image logo hbox = HBox("logo.png", "logo.png")

# Display two logos, one on top of the other.
image logo vbox = VBox("logo.png", "logo.png")

# Display two logos. Since both default to the upper-left
# corner of the screen, we need to use Image to place
# those logos on the screen.
image logo fixed = Fixed(
    Image("logo.png", xalign=0.0, yalign=0.0),
    Image("logo.png", xalign=1.0, yalign=1.0))
The Grid layout displays its children in a grid on the screen. It takes Position Style Properties and the spacing style property.

Grid(cols, rows, *args, **properties)link
Lays out displayables in a grid. The first two positional arguments are the number of columns and rows in the grid. This must be followed by columns * rows positional arguments giving the displayables that fill the grid.

Effectslink
These displayables are used to create certain visual effects.

AlphaBlend(control, old, new, alpha=False)link
This transition uses a control displayable (almost always some sort of animated transform) to transition from one displayable to another. The transform is evaluated. The new displayable is used where the transform is opaque, and the old displayable is used when it is transparent.

alpha
If true, the image is composited with what's behind it. If false, the default, the image is opaque and overwrites what's behind it.

Image Manipulatorslink
An image manipulator is a displayable that takes an image or image manipulator, and either loads it or performs an operation on it. Image manipulators can only take images or other image manipulators as input.

An image manipulator can be used any place a displayable can, but not vice-versa. An Image() is a kind of image manipulator, so an Image can be used whenever an image manipulator is required.

The use of image manipulators is historic. A number of image manipulators that had been documented in the past should no longer be used, as they suffer from inherent problems. In any case except for im.Data(), the Transform() displayable provides similar functionality in a more general manner, while fixing the problems.

For the list of image manipulators, see the image manipulator documentation.

Placeholderslink
The Placeholder displayable is used to display background or character images as appropriate. Placeholders are used automatically when an undefined image is used in developer mode. Placeholder displayables can also be used manually when the defaults are inappropriate.

# By default, the girl placeholder will be used.
image sue = Placeholder("boy")

label start:
     show sue angry
     "Sue" "How do you do? Now you gonna die!"
classPlaceholder(base=None, full=False, flip=None, text=None, **properties)link
This displayable can be used to display a placeholder character or background.

base
The type of image to display. This should be one of:

'bg'
To display a background placeholder. This currently fills the screen with a light-gray, and displays the image name at the top of the screen.

'boy'
Displays a male-identified placeholder with the image name on his chest.

'girl'
Displays a female-identified placeholder with the image name on her chest.

None
Attempts to automatically determine the type of image to use. If the image name begins with "bg", "cg", or "event", uses 'bg'.

Otherwise, the 'girl' placeholder is used.

full
If true, a full-body sprite is used. Otherwise, a 3/4 sprite is used.

flip
If true, the sprite is flipped horizontally.

text
If provided, no other text than this will be displayed on the placeholder. If not, the text will reflect the show instruction that was used to display it.

Displayable Prefixeslink
Displayable prefixes make it possible for a creator to define their own displayables, and refer to them anywhere a displayable can be used in Ren'Py. A prefixed displayable is a string with a colon in it. The prefix is to the left of the colon, and the argument is anything to the right of it. The config.displayable_prefix variable maps a prefix to a function. The function takes the argument, and either returns a displayable or None.

For example, this makes the big prefix return an image that is twice as big as the original.

init -10 python:
    def embiggen(s):
        return Transform(s, zoom=2)

    config.displayable_prefix["big"] = embiggen
The init -10 makes sure the prefix is defined before any images that use it. The prefix can then be used to define images:

image eileen big = "big:eileen happy"
or in any other place where a displayable is required.

Transformslink
A transform can be applied to a displayable to yield another displayable. The built-in transforms are used to control where an object is placed on the screen, while user-defined transforms can cause more complex effects, like motion, zoom, and rotation.

Transforms can be applied by giving the at clause to the scene and show statements. The following applies the "right" transform to the eileen happy displayable.:

show eileen happy at right
Multiple transforms can be applied by separating them with commas. These transforms are applied from left-to-right, with the rightmost transform taking precedence in the case of conflicts.

show eileen happy at halfsize, right
A displayable always has a transform associated with it. If no transform is given, the prior transform is used. When the transform is changed, undefined values are taken from the prior transform, or from default if there is no prior transform.

Default Transformslink
Ren'Py ships with a number of transforms defined by default. These transforms position things on the screen. Here's a depiction of where each default transform will position an image.

             +-----------------------------------------------------------+
             |topleft, reset               top                   topright|
             |                                                           |
             |                                                           |
             |                                                           |
             |                                                           |
             |                          truecenter                       |
             |                                                           |
             |                                                           |
             |                                                           |
             |                                                           |
offscreenleft|left                   center, default                right|offscreenright
             +-----------------------------------------------------------+
The offscreenleft and offscreenright transforms position images off the screen. These transforms can be used to move things off the screen (remember to hide them afterwards, to ensure that they do not consume resources).

The transforms are:

centerlink
Centers horizontally, and aligns to the bottom of the screen.

defaultlink
Centers horizontally, and aligns to the bottom of the screen. This can be redefined via config.default_transform to change the default placement of images shown with the show or scene statements.

leftlink
Aligns to the bottom-left corner of the screen.

offscreenleftlink
Places the displayable off the left side of the screen, aligned to the bottom of the screen.

offscreenrightlink
Places the displayable off the left side of the screen, aligned to the bottom of the screen.

resetlink
Resets the transform. Places the displayable in the top-left corner of the screen, and also eliminates any zoom, rotation, or other effects.

rightlink
Aligns to the bottom-right corner of the screen.

toplink
Centers horizontally, and aligns to the top of the screen.

topleftlink
Aligns to the top-left corner of the screen.

toprightlink
Aligns to the top-right corner of the screen.

truecenterlink
Centers both horizontally and vertically.

Creator-Defined Transformslink
A creator can define a transform using the animation and transformation language, or the Transform function.

Transitionslink
Transitions can be used as part of the with statement, as well as in other parts of Ren'Py, to apply effects to changes in the scene. Ren'Py comes with a small number of pre-defined transitions, which can be given directly to the with statement. It also includes transition classes, which can be used to create new transitions.

Pre-Defined Transitionslink
Pre-defined transitions can be given directly to the with statement. For example:

show bg washington
with dissolve
fadelink
Takes 0.5 seconds to fade to black, and then 0.5 seconds to fade to the new screen. An instance of the Fade() transition class.

dissolvelink
Takes 0.5 seconds to dissolve from the old to the new screen. An instance of the Dissolve() transition class.

pixellatelink
Pixellates the old scene for .5 seconds, and the new scene for another .5 seconds. An instance of the Pixellate() transition class.

movelink
Takes 0.5 seconds to the move images that have changed location to their new locations. An instance of the MoveTransition() transition class.

moveinrightlink
Also: moveinleft, moveintop, moveinbottom

These move entering images onto the screen from the appropriate side, taking 0.5 seconds to do so.

moveoutrightlink
Also: moveoutleft, moveouttop, moveoutbottom

These move leaving images off the screen via the appropriate side, taking 0.5 seconds to do so.

easelink
Also: easeinright, easeinleft, easeintop, easeinbottom, easeoutright, easeoutleft, easeouttop, easeoutbottom

These are similar to the move- family of transitions, except that they use a cosine-based curve to slow down the start and end of the transition.

zoominlink
This zooms in entering images, taking 0.5 seconds to do so.

zoomoutlink
This zooms out leaving images, taking 0.5 seconds to do so.

zoominoutlink
This zooms in entering images and zooms out leaving images, taking 0.5 seconds to do so.

vpunchlink
When invoked, this transition shakes the screen vertically for a quarter second.

hpunchlink
When invoked, this transition shakes the screen horizontally for a quarter second.

blindslink
Transitions the screen in a vertical blinds effect lasting 1 second. An instance of the ImageDissolve() transition class.

squareslink
Transitions the screen in a squares effect lasting 1 second.

wipeleftlink
Also: wiperight, wipeup, wipedown

Wipes the scene in the given direction. Instances of the CropMove() transition class.

slideleftlink
Also: slideright, slideup, slidedown

Slides the new scene in the given direction. Instances of the CropMove() transition class.

slideawayleftlink
Also: slideawayright, slideawayup, slideawaydown

Slides the old scene in the given direction. Instances of the CropMove() transition class.

pushrightlink
Also: pushleft, pushup, pushdown

These use the new scene to slide the old scene out the named side. Instances of the PushMove() transition class.

irisinlink
Also: irisout

Use a rectangular iris to display the new screen, or hide the old screen. Instances of the CropMove() transition class.

Transition Classeslink
Transition classes are functions that can be called to create new transitions. These functions are parameterized, allowing entire families of transitions to be created.

Calling transition classes can be done as part of the with statement. For example:

# A very long dissolve.
with Dissolve(10.0)
If we find ourselves calling the same transition class repeatedly, we can use the define statement to assign the transition to a variable:

define annoytheuser = Dissolve(1.0)

label start:
     show bg washington
     with annoytheuser
The time_warp argument taken by many transition classes can be given builtin warpers found in the _warper module, see warpers.

AlphaDissolve(control, delay=0.0, *, reverse=False, mipmap=None)link
Returns a transition that uses a control displayable (almost always some sort of animated transform) to transition from one screen to another. The transform is evaluated. The new screen is used where the transform is opaque, and the old image is used when it is transparent.

control
The control transform.

delay
The time the transition takes, before ending.

reverse
If true, the alpha channel is reversed. Opaque areas are taken from the old image, while transparent areas are taken from the new image.

mipmap
When the dissolve will be scaled to less than half its natural size, this can be set to True. This will cause mipmaps to be generated, which will make the dissolve consume more GPU resources, but will reduce artifacts. See mipmap for more information.

ComposeTransition(trans, before, after)link
Returns a transition that composes up to three transitions. If not None, the before and after transitions are applied to the old and new scenes, respectively. These updated old and new scenes are then supplied to the trans transition.

# Move the images in and out while dissolving. (This is a fairly expensive transition.)
define moveinoutdissolve = ComposeTransition(dissolve, before=moveoutleft, after=moveinright)
CropMove(time, mode='slideright', startcrop=(0.0, 0.0, 0.0, 1.0), startpos=(0.0, 0.0), endcrop=(0.0, 0.0, 1.0, 1.0), endpos=(0.0, 0.0), topnew=True)link
Returns a transition that works by cropping a scene and positioning it on the screen. This can be used to implement a variety of effects, all of which involve changing rectangular slices of scenes.

time
The time the transition takes.

mode
The name of the mode of the transition. There are three groups of modes: wipes, slides, and other. This can also be "custom", to allow a custom mode to be defined.

In a wipe, the image stays fixed, and more of it is revealed as the transition progresses. For example, in "wiperight", a wipe from left to right, first the left edge of the image is revealed at the left edge of the screen, then the center of the image, and finally the right side of the image at the right of the screen. Other supported wipes are "wipeleft", "wipedown", and "wipeup".

In a slide, the image moves. So in a "slideright", the right edge of the image starts at the left edge of the screen, and moves to the right as the transition progresses. Other slides are "slideleft", "slidedown", and "slideup".

There are also slideaways, in which the old image moves on top of the new image. Slideaways include "slideawayright", "slideawayleft", "slideawayup", and "slideawaydown".

We also support a rectangular iris in with "irisin" and a rectangular iris out with "irisout".

The following parameters are only respected if the mode is "custom". Positions are relative to the size of the screen, while the crops are relative to the size of the image. So a crop of (0.25, 0.0, 0.5, 1.0) takes the middle half of an image.

startcrop
The starting rectangle that is cropped out of the top image. A 4-element tuple containing x, y, width, and height.

startpos
The starting place that the top image is drawn to the screen at, a 2-element tuple containing x and y.

endcrop
The ending rectangle that is cropped out of the top image. A 4-element tuple containing x, y, width, and height.

endpos
The ending place that the top image is drawn to the screen at, a 2-element tuple containing x and y.

topnew
If true, the scene that is cropped and moved (and is on top of the other scene) is the new scene. If false, it is the old scene.

define wiperight = CropMove(1.0, "wiperight")
define wipeleft = CropMove(1.0, "wipeleft")
define wipeup = CropMove(1.0, "wipeup")
define wipedown = CropMove(1.0, "wipedown")

define slideright = CropMove(1.0, "slideright")
define slideleft = CropMove(1.0, "slideleft")
define slideup = CropMove(1.0, "slideup")
define slidedown = CropMove(1.0, "slidedown")

define slideawayright = CropMove(1.0, "slideawayright")
define slideawayleft = CropMove(1.0, "slideawayleft")
define slideawayup = CropMove(1.0, "slideawayup")
define slideawaydown = CropMove(1.0, "slideawaydown")

define irisout = CropMove(1.0, "irisout")
define irisin = CropMove(1.0, "irisin")
Dissolve(time, *, alpha=False, time_warp=None, mipmap=None)link
Returns a transition that dissolves from the old scene to the new scene.

time
The time the dissolve will take.

alpha
Ignored.

time_warp
A function that adjusts the timeline. If not None, this should be a function that takes a fractional time between 0.0 and 1.0, and returns a number in the same range.

mipmap
When the dissolve will be scaled to less than half its natural size, this can be set to True. This will cause mipmaps to be generated, which will make the dissolve consume more GPU resources, but will reduce artifacts. See mipmap for more information.

Fade(out_time, hold_time, in_time, *, color='#000')link
Returns a transition that takes out_time seconds to fade to a screen filled with color, holds at that screen for hold_time seconds, and then takes in_time to fade to then new screen.

# Fade to black and back.
define fade = Fade(0.5, 0.0, 0.5)

# Hold at black for a bit.
define fadehold = Fade(0.5, 1.0, 0.5)

# Camera flash - quickly fades to white, then back to the scene.
define flash = Fade(0.1, 0.0, 0.5, color="#fff")
ImageDissolve(image, time, ramplen=8, *, reverse=False, time_warp=None, mipmap=None)link
Returns a transition that dissolves the old scene into the new scene, using an image to control the dissolve process. This means that white pixels will dissolve in first, and black pixels will dissolve in last.

image
The control image. This can be any displayable. It should be the size of the scenes being dissolved, and if reverse=True, it should be fully opaque.

time
The time the dissolve will take.

ramplen
The length of the ramp to use. This must be an integer power of 2. When this is the default value of 8, when a white pixel is fully dissolved, a pixel 8 shades of gray darker will have completed one step of dissolving in.

reverse
If True, black pixels will dissolve in before white pixels.

time_warp
A function that adjusts the timeline. If not None, this should be a function that takes a fractional time between 0.0 and 1.0, and returns a number in the same range.

mipmap
When the dissolve will be scaled to less than half its natural size, this can be set to True. This will cause mipmaps to be generated, which will make the dissolve consume more GPU resources, but will reduce artifacts. See mipmap for more information.

define circirisout = ImageDissolve("circiris.png", 1.0, time_warp=_warper.easeout)
define circirisin = ImageDissolve("circiris.png", 1.0, reverse=True, time_warp=_warper.easein)
define circiristbigramp = ImageDissolve("circiris.png", 1.0, ramplen=256)
MoveTransition(delay, *, enter=None, leave=None, old=False, layers=['master'], time_warp=None, enter_time_warp=None, leave_time_warp=None)link
Returns a transition that interpolates the position of images (with the same tag) in the old and new scenes.

delay
The time it takes for the interpolation to finish.

enter
If not None, images entering the scene will also be moved. The value of enter should be a transform that is applied to the image to get its starting position.

leave
If not None, images leaving the scene will also be move. The value of leave should be a transform that is applied to the image to get its ending position.

old
If true, the old image will be used in preference to the new one.

layers
A list of layers that moves are applied to.

time_warp
A time warp function that's applied to the interpolation. This takes a number between 0.0 and 1.0, and should return a number in the same range.

enter_time_warp
A time warp function that's applied to images entering the scene.

leave_time_warp
A time warp function that's applied to images leaving the scene.

MultipleTransition(args)link
Returns a transition that allows multiple transitions to be displayed, one after the other.

args
A list containing an odd number of items. The first, third, and other odd-numbered items must be scenes, and the even items must be transitions. A scene can be one of:

A displayable.

False, to use the old scene.

True, to use the new scene.

Almost always, the first argument will be False and the last True.

The transitions in args are applied in order. For each transition, the old scene is the screen preceding it, and the new scene is the scene following it. For example:

define logodissolve = MultipleTransition([
    False, Dissolve(0.5),
    "logo.jpg", Pause(1.0),
    "logo.jpg", dissolve,
    True])
This example will dissolve to logo.jpg, wait 1 second, and then dissolve to the new scene.

Pause(delay)link
Returns a transition that only displays the new screen for delay seconds. It can be useful as part of a MultipleTransition.

Pixellate(time, steps)link
Returns a transition that pixellates out the old screen, and then pixellates in the new screen.

time
The total time the transition will take, in seconds.

steps
The number of steps that will occur, in each direction. Each step creates pixels about twice the size of those in the previous step, so a 5-step pixellation will create 32x32 pixels.

PushMove(time, mode='pushright')link
Returns a transition that works by taking the new scene and using it to "push" the old scene off the screen.

time
The time the transition takes.

mode
There are four possible modes: "pushright", "pushleft", "pushup", and "pushdown", which push the old scene off the screen in the direction indicated.

define pushright = PushMove(1.0, "pushright")
define pushleft = PushMove(1.0, "pushleft")
define pushup = PushMove(1.0, "pushup")
define pushdown = PushMove(1.0, "pushdown")
Swing(delay=1.0, vertical=False, reverse=False, background='#000', flatten=True)link
A transitions that rotates the old scene 90 degrees around an axis, so that it is edge on with the viewer, switches to the new scene, and then rotates that scene another 90 degrees to show the new scene to the viewer.

delay
How long the transition should take.

vertical
If true, the scene is rotate around the x-axis (pixels move vertically). If false, the scene is roated around the y axis, pixels moving horizontally.

reverse
When true, the rotation occurs in the reverse direction.

background
A displayable that is placed behind the scene as it rotates.

flatten
If true, the scenes are flattened into images the size of the screen before being rotated. Use this if images being not entirely on the screen causes undesired effects.

Transition Familieslink
Transition families are functions that define a large family of related transitions.

define.move_transitions(prefix, delay, time_warp=None, in_time_warp=None, out_time_warp=None, old=False, layers=['master'], **kwargs)link
This defines a family of move transitions, similar to the move and ease transitions. For a given prefix, this defines the transitions:

prefix- A transition that takes delay seconds to move images that changed positions to their new locations.

prefixinleft, prefixinright, prefixintop, prefixinbottom - Transitions that take delay seconds to move images that changed positions to their new locations, with newly shown images coming in from the appropriate side.

prefixoutleft, prefixoutright, prefixouttop, prefixoutbottom - Transitions that take delay seconds to move images that changed positions to their new locations, with newly hidden images leaving via the appropriate side.

time_warp, in_time_warp, out_time_warp
Time warp functions that are given a time from 0.0 to 1.0 representing the fraction of the move that is complete, and return a value in the same range giving the fraction of a linear move that is complete.

This can be used to define functions that ease the images around, rather than moving them at a constant speed.

The three arguments are used for images remaining on the screen, newly shown images, and newly hidden images, respectively.

old
If true, the transitions to move the old displayables, rather than the new ones.

layers
The layers the transition will apply to.

# This defines all of the pre-defined transitions beginning
# with "move".
init python:
    define.move_transitions("move", 0.5)
Dict Transitionslink
In many places where Ren'Py takes a transition, it's possible to instead specify a dictionary that maps layer names to this transition. When this is the case, Ren'Py applies each transition to the appropriate layer.

When a dict is used, the pause that usually occurs when a transition takes place does not occur. Instead, the statement taking the dictionary returns immediately, and the transitions are scheduled to occur at the start of the next interaction.

This can be used with the master layer to cause transitions to occur while dialogue is being shown on the screen. For example, if we wrote:

define dis = { "master" : Dissolve(1.0) }
and:

show eileen happy
with dis

e "Hello, world."
The dissolve will take place while the text is displayed on the screen.

Dict layer transitions can't be used every place a transition can be used, only places where applying transitions to a layer is possible. It can be used with the with statement and with cause of the scene, show, and hide statements. It can also be used with renpy.with_statement() and renpy.transition(), the Show() and Hide() actions, and various config variables that take transitions. Dict layer transitions will not work inside things that don't work with layers, such as ATL, ComposeTransition() and MultipleTransition().

This can interact poorly with statements that cause a transition to occur themselves, like the transitions caused by window auto. That can often be solved with a second dict transition that applies to a different layer. For example, if you are seeing weird blinking when the dialogue window shows and hides, consider changing options.rpy to have:

define config.window_show_transition = { "screens" : Dissolve(.25) }
define config.window_hide_transition = { "screens" : Dissolve(.25) }
This works because the dialogue window exists entirely on the screens layer.

See Alsolink
ATL Transitions, Transitions using Python : how to create transitions using the ATL system and Python, respectively

Animation and Transformation Languagelink
The Animation and Transformation Language (ATL) provides a high-level way of choosing a displayable to show, positioning it on the screen, and applying transformations such as rotation, zoom, and alpha-modification. These can be changed over time, and in response to events.

The Python equivalent of an ATL transform is the Transform() displayable. There is no way to create an ATL transform programmatically.

Ren'Py Script Statementslink
ATL can be included as part of three Ren'Py script statements.

Transform Statementlink
The transform statement creates a transform that can be supplied as part of an at clause. The syntax of the transform statement is:

atl_transform ::=  "transform" qualname ( "(" parameters ")" )? ":"
                      atl_block
The transform statement must be run at init time. If it is found outside an init block, then it is automatically placed inside an init block with a priority of 0. The transform may have a list of parameters, which must be supplied when it is called. Default values for the right-most parameters can be given by adding "=" and the value (e.g. "transform a (b, c=0):").

qualname must be a set of dot-separated Python identifiers. The transform created by the ATL block is bound to this name, within the given store if one was provided.:

transform left_to_right:
    xalign 0.0
    linear 2.0 xalign 1.0
    repeat

transform ariana.left:
    xcenter .3
Image Statement With ATL Blocklink
The second way to use ATL is as part of an image statement with ATL block. This binds an image name to the given transform. As there's no way to supply parameters to this transform, it's only useful if the transform defines an animation. The syntax for an image statement with ATL block is:

atl_image ::=  "image" image_name ":"
                  atl_block
image eileen animated:
    "eileen_happy.png"
    pause 1.0
    "eileen_vhappy.png"
    pause 1.0
    repeat
Scene and Show Statements with ATL Blocklink
The final way to use ATL is as part of a scene or show statement. This wraps the image being shown inside an ATL transformation.

atl_scene ::=  stmt_scene ":"
                   atl_block
atl_show  ::=  stmt_show ":"
                   atl_block
scene bg washington:
    zoom 2.0

show eileen happy:
    xalign 1.0
ATL Syntax and Semanticslink
An ATL block consists of one or more logical lines, all at the same indentation, and indented relative to the statement containing the block. Each logical line in an ATL block must contain one or more ATL statements.

There are two kinds of ATL statements: simple and complex. Simple statements do not take an ATL block. A single logical line may contain one or more ATL statements, separated by commas. A complex statement contains a block, must be on its own line. The first line of a complex statement always ends with a colon :.

By default, statements in a block are executed in the order in which they appear, starting with the first statement in the block. Execution terminates when the end of the block is reached. Time statements change this, as described in the appropriate section below.

Execution of a block terminates when all statements in the block have terminated.

If an ATL statement requires evaluation of an expression, such evaluation occurs when the transform is first added to the scene list. (Such as when using a show statement or ui function.)

ATL Statementslink
The following are the ATL statements.

Interpolation Statementlink
The interpolation statement is the main way that ATL controls transformations.

atl_properties ::=  ( property simple_expression ( "knot" simple_expression )*
                    | "clockwise"
                    | "counterclockwise"
                    | "circles" simple_expression
                    | simple_expression )*
atl_interp ::=  ( warper simple_expression | "warp" simple_expression simple_expression )? atl_properties
                | ( warper simple_expression | "warp" simple_expression simple_expression )? ":"
                   atl_properties
The first part of the interpolation statement is used to select a function that time-warps the interpolation. (That is, a function from linear time to non-linear time.) This can either be done by giving the name of a warper registered with ATL, or by giving the keyword "warp" followed by an expression giving a function. Either case is followed by a number, giving the number of seconds the interpolation should take.

transform builtin_warper:
    xpos 0
    ease 5 xpos 520

init python:
    def my_warper(t):
        return t**4.4

define my_warpers = [my_warper]

transform accessed_as_function:
    xpos 0
    warp my_warpers[0] 5 xpos 520
    warp my_warper 3 xpos 100
See Warpers for more information about warpers.

If no warp function is given, the interpolation is instantaneous. Otherwise, it persists for the amount of time given, and at least one frame.

The warper and duration are used to compute a completion fraction. This is done by dividing the time taken by the interpolation by the duration of the interpolation. This is clamped to the duration, and then passed to the warper. The result returned by the warper is the completion fraction.

The interpolation statement can then contain a number of other clauses. When a property and value are present, then the value is the value the property will obtain at the end of the statement. The value can be obtained in several ways:

If the value is followed by one or more knots, then spline motion is used. The starting point is the value of the property at the start of the interpolation, the end point is the property value, and the knots are used to control the spline. A quadratic curve is used for a single knot, Bezier is used when there are two and Catmull-Rom is used for three or more knots. In the former two cases, the knot or knots are simply control nodes. For Catmull-Rom, the first and last knot are control nodes (often outside the displayed path) and the other knots are points the path passes through.

If the interpolation statement contains a "clockwise" or "counterclockwise" clause, circular motion is used, as described below.

Otherwise, the value is linearly interpolated between the start and end locations, using the completion fraction.

If a simple expression is present, it should evaluate to a transform with only a single interpolation statement, without a warper, splines, or circular motion. The properties from the transform are processed as if they were included in this statement.

A warper may be followed by a colon (:). In this case, it may be followed by one or more lines containing the clauses available above. This lets an ATL interpolation apply to multiple lines of properties.

Some sample interpolations are:

show logo base:
    # Show the logo at the upper right side of the screen.
    xalign 1.0 yalign 0.0

    # Take 1.0 seconds to move things back to the left.
    linear 1.0 xalign 0.0

    # Take 1.0 seconds to move things to the location specified in the
    # truecenter transform. Use the ease warper to do this.
    ease 1.0 truecenter

    # Just pause for a second.
    pause 1.0

    # Set the location to circle around.
    alignaround (.5, .5)

    # Use circular motion to bring us to spiral out to the top of
    # the screen. Take 2 seconds to do so.
    linear 2.0 yalign 0.0 clockwise circles 3

    # Use a spline motion to move us around the screen.
    linear 2.0 align (0.5, 1.0) knot (0.0, .33) knot (1.0, .66)

     # Changes xalign and yalign at thje same time.
     linear 2.0 xalign 1.0 yalign 1.0

     # The same thing, using a block.
     linear 2.0:
        xalign 1.0
        yalign 1.0
An important special case is that the pause warper, followed by a time and nothing else, causes ATL execution to pause for that amount of time.

Some properties can have values of multiple types. For example, the xpos property can be an int, float, or absolute. The behavior is undefined when an interpolation has old and new property values of different types.

Time Statementlink
The time statement is a simple control statement. It contains a single simple_expression, which is evaluated to give a time, expressed as seconds from the start of execution of the containing block.

atl_time ::=  "time" simple_expression
When the time given in the statement is reached, the following statement begins to execute. This transfer of control occurs even if a previous statement is still executing, and causes any prior statement to immediately terminate.

Time statements are implicitly preceded by a pause statement with an infinite time. This means that if control would otherwise reach the time statement, it waits until the time statement would take control.

When there are multiple time statements in a block, they must strictly increase in order.

image backgrounds:
    "bg band"
    time 2.0
    "bg whitehouse"
    time 4.0
    "bg washington"
Expression Statementlink
An expression statement is a simple statement that starts with a simple expression. It then contains an optional with clause, with a second simple expression.

atl_expression ::=   simple_expression ("with" simple_expression)?
There are three things the first simple expression may evaluate to:

If it's an ATL transform, and that ATL transform has not been supplied a child (through being called as a transform or transition, or with a child or old_widget argument), the ATL transform is included at the location of the expression. The with clause is ignored.

If it's an integer or floating point number, it's taken as a number of seconds to pause execution for. The with clause is ignored.

Otherwise, the expression is interpreted to be a displayable. This displayable replaces the child of the transform when this clause executes, making it useful for animation. If a with clause is present, the second expression is evaluated as a transition, and the transition is applied to the old and new displayables.

transform move_right:
    linear 1.0 xalign 1.0

image atl example:
     # Display logo_base.png
     "logo_base.png"

     # Pause for 1.0 seconds.
     1.0

     # Show logo_bw.png, with a dissolve.
     "logo_bw.png" with Dissolve(0.5, alpha=True)

     # Run the move_right transform.
     move_right
Pass Statementlink
atl_pass ::=  "pass"
The pass statement is a simple statement that causes nothing to happen. This can be used when there's a desire to separate statements, like when there are two sets of choice statements that would otherwise be back-to-back.

Repeat Statementlink
The repeat statement is a simple statement that causes the block containing it to resume execution from the beginning. If the expression is present, then it is evaluated to give an integer number of times the block will execute. (So a block ending with repeat 2 will execute at most twice.)

atl_repeat ::=  "repeat" (simple_expression)?
The repeat statement must be the last statement in a block.:

show logo base:
    xalign 0.0
    linear 1.0 xalign 1.0
    linear 1.0 xalign 0.0
    repeat
Block Statementlink
The block statement is a complex statement that contains a block of ATL statements. This can be used to group statements that will repeat.

atl_block_stmt ::=  "block" ":"
                         atl_block
show logo base:
    alpha 0.0 xalign 0.0 yalign 0.0
    linear 1.0 alpha 1.0

    block:
        linear 1.0 xalign 1.0
        linear 1.0 xalign 0.0
        repeat
Choice Statementlink
The choice statement is a complex statement that defines one of a set of potential choices. Ren'Py will pick one of the choices in the set, and execute the ATL block associated with it, and then continue execution after the last choice in the choice set.

atl_choice ::=  "choice" (simple_expression)? ":"
                    atl_block
Choice statements are greedily grouped into a choice set when more than one choice statement appears consecutively in a block. If the simple_expression is supplied, it is a floating-point weight given to that block, otherwise 1.0 is assumed.

image eileen random:
    choice:
        "eileen happy"
    choice:
        "eileen vhappy"
    choice:
        "eileen concerned"

    pause 1.0
    repeat
Parallel Statementlink
The parallel statement is used to define a set of ATL blocks to execute in parallel.

atl_parallel ::=  "parallel" ":"
                     atl_block
Parallel statements are greedily grouped into a parallel set when more than one parallel statement appears consecutively in a block. The blocks of all parallel statements are then executed simultaneously. The parallel statement terminates when the last block terminates.

The blocks within a set should be independent of each other, and manipulate different properties. When two blocks change the same property, the result is undefined.

show logo base:
    parallel:
        xalign 0.0
        linear 1.3 xalign 1.0
        linear 1.3 xalign 0.0
        repeat
    parallel:
        yalign 0.0
        linear 1.6 yalign 1.0
        linear 1.6 yalign 0.0
        repeat
Event Statementlink
The event statement is a simple statement that causes an event with the given name to be produced.

atl_event ::=  "event" name
When an event is produced inside a block, the block is checked to see if an event handler for the given name exists. If it does, control is transferred to the event handler. Otherwise, the event propagates to any containing event handler.

On Statementlink
The on statement is a complex statement that defines an event handler. On statements are greedily grouped into a single statement. On statement can handle a single event name, or a comma-separated list of event names.

atl_on ::=  "on" name [ "," name ] * ":"
                 atl_block
The on statement is used to handle events. When an event is handled, handling of any other event ends and handing of the new event immediately starts. When an event handler ends without another event occurring, the default event is produced (unless were already handing the default event).

Execution of the on statement will never naturally end. (But it can be ended by the time statement, or an enclosing event handler.)

show logo base:
    on show:
        alpha 0.0
        linear .5 alpha 1.0
    on hide:
        linear .5 alpha 0.0

transform pulse_button:
    on hover, idle:
        linear .25 zoom 1.25
        linear .25 zoom 1.0
Contains Statementlink
The contains statement sets the displayable contained by this ATL transform (the child of the transform). There are two variants of the contains statement.

The contains expression variant takes an expression, and sets that expression as the child of the transform. This is useful when an ATL transform wishes to contain, rather than include, a second ATL transform.

atl_contains ::=  "contains" expression
transform an_animation:
    "1.png"
    pause 2
    "2.png"
    pause 2
    repeat

image move_an_animation:
    contains an_animation

    # If we didn't use contains, we'd still be looping and
    # would never reach here.
    xalign 0.0
    linear 1.0 yalign 1.0
The contains block allows one to define an ATL block that is used for the child of this ATL transform. One or more contains block statements will be greedily grouped together, wrapped inside a Fixed(), and set as the child of this transform.

atl_counts ::=  "contains" ":"
Each block should define a displayable to use, or else an error will occur. The contains statement executes instantaneously, without waiting for the children to complete. This statement is mostly syntactic sugar, as it allows arguments to be easily passed to the children.

image test double:
    contains:
        "logo.png"
        xalign 0.0
        linear 1.0 xalign 1.0
        repeat

    contains:
        "logo.png"
        xalign 1.0
        linear 1.0 xalign 0.0
        repeat
Function Statementlink
The function statement allows ATL to use Python functions to control the ATL properties.

atl_function ::=  "function" expression
The functions have the same signature as those used with Transform():

The first argument is a transform object. Transform properties can be set on this object.

The second argument is the shown timebase, the number of seconds since the function began executing.

The third argument is the the animation timebase, which is the number of seconds something with the same tag has been on the screen.

If the function returns a number, it will be called again after that number of seconds has elapsed. (0 seconds means to call the function as soon as possible.) If the function returns None, control will pass to the next ATL statement.

This function should not have side effects other than changing the Transform object in the first argument, and may be called at any time with any value to enable prediction.

init python:
    def slide_function(trans, st, at):
        if st > 1.0:
            trans.xalign = 1.0
            return None
        else:
            trans.xalign = st
            return 0

label start:
    show logo base:
        function slide_function
        pause 1.0
        repeat
Animation Statementlink
The animation statement must be the first statement in an ATL block, and tells Ren'Py this statement uses the animation timebase.

atl_animation ::=  "animation"
As compared to the normal showing timebase, the animation timebase starts when an image or screen with the same tag is shown. This is generally used to have one image replaced by a second one at the same apparent time. For example:

image eileen happy moving:
    animation
    "eileen happy"
    xalign 0.0
    linear 5.0 xalign 1.0
    repeat

image eileen vhappy moving:
    animation
    "eileen vhappy"
    xalign 0.0
    linear 5.0 xalign 1.0
    repeat

label start:

    show eileen happy moving
    pause
    show eileen vhappy moving
    pause
This example will cause Eileen to change expression when the first pause finishes, but will not cause her postion to change, as both animations share the same animation time, and hence will place her sprite in the same place. Without the animation statement, the position would reset when the player clicks.

Warperslink
A warper is a function that can change the amount of time an interpolation statement considers to have elapsed. The following warpers are defined by default. They are defined as functions from t to t', where t and t' are floating point numbers, with t ranging from 0.0 to 1.0 over the given amount of time. (If the statement has 0 duration, then t is 1.0 when it runs.) t' should start at 0.0 and end at 1.0, but can be greater or less.

pause
Pause, then jump to the new value. If t == 1.0, t = 1.0. Otherwise, t' = 0.0.

linear
Linear interpolation. t' = t

ease
Start slow, speed up, then slow down. t' = .5 - math.cos(math.pi * t) / 2.0

easein
Start fast, then slow down. t' = math.cos((1.0 - t) * math.pi / 2.0

easeout
Start slow, then speed up. t' = 1.0 - math.cos(t * math.pi / 2.0)

In addition, most of Robert Penner's easing functions are supported. To make the names match those above, the functions have been renamed somewhat. Graphs of these standard functions can be found at http://www.easings.net/.

Ren'Py Name

easings.net Name

ease_back

easeInOut_back

ease_bounce

easeInOut_bounce

ease_circ

easeInOut_circ

ease_cubic

easeInOut_cubic

ease_elastic

easeInOut_elastic

ease_expo

easeInOut_expo

ease_quad

easeInOut_quad

ease_quart

easeInOut_quart

ease_quint

easeInOut_quint

easein_back

easeOut_back

easein_bounce

easeOut_bounce

easein_circ

easeOut_circ

easein_cubic

easeOut_cubic

easein_elastic

easeOut_elastic

easein_expo

easeOut_expo

easein_quad

easeOut_quad

easein_quart

easeOut_quart

easein_quint

easeOut_quint

easeout_back

easeIn_back

easeout_bounce

easeIn_bounce

easeout_circ

easeIn_circ

easeout_cubic

easeIn_cubic

easeout_elastic

easeIn_elastic

easeout_expo

easeIn_expo

easeout_quad

easeIn_quad

easeout_quart

easeIn_quart

easeout_quint

easeIn_quint

These warpers can be accessed in the _warper read-only module, which contains the functions listed above.

New warpers can be defined using the renpy.atl_warper decorator, in a python early block. It should be placed in a file that is parsed before any file that uses the warper. This looks like:

python early hide:

    @renpy.atl_warper
    def linear(t):
        return t
List of Transform Propertieslink
The following transform properties exist.

When the type is given as position, it may be an int, an absolute, or a float. If it's a float, it's interpreted as a fraction of the size of the containing area (for pos) or displayable (for anchor).

Note that not all properties are independent. For example, xalign and xpos both update some of the same underlying data. In a parallel statement, only one block should adjust horizontal position, and one should adjust vertical positions. (These may be the same block.) The angle and radius properties set both horizontal and vertical positions.

poslink
Type
(position, position)

Default
(0, 0)

The position, relative to the top-left corner of the containing area.

xposlink
Type
position

Default
0

The horizontal position, relative to the left side of the containing area.

yposlink
Type
position

Default
0

The vertical position, relative to the top of the containing area.

anchorlink
Type
(position, position)

Default
(0, 0)

The anchor position, relative to the top-left corner of the displayable.

xanchorlink
Type
position

Default
0

The horizontal anchor position, relative to the left side of the displayable.

yanchorlink
Type
position

Default
0

The vertical anchor position, relative to the top of the displayable.

alignlink
Type
(float, float)

Default
(0.0, 0.0)

Equivalent to setting pos and anchor to the same value.

xalignlink
Type
float

Default
0.0

Equivalent to setting xpos and xanchor to this value.

yalignlink
Type
float

Default
0.0

Equivalent to setting ypos and yanchor to this value.

offsetlink
Type
(int, int)

Default
(0, 0)

The number of pixels the displayable is offset by in each direction. Positive values offset towards the bottom-right.

xoffsetlink
Type
int

Default
0

The number of pixels the displayable is offset by in the horizontal direction. Positive values offset toward the right.

yoffsetlink
Type
int

Default
0

The number of pixels the displayable is offset by in the vertical direction. Positive values offset toward the bottom.

xycenterlink
Type
(position, position)

Default
(0.0, 0.0)

Equivalent to setting pos to the value of this property, and anchor to (0.5, 0.5).

xcenterlink
Type
position

Default
0.0

Equivalent to setting xpos to the value of this property, and xanchor to 0.5.

ycenterlink
Type
position

Default
0.0

Equivalent to setting ypos to the value of this property, and yanchor to 0.5.

rotatelink
Type
float or None

Default
None

If None, no rotation occurs. Otherwise, the image will be rotated by this many degrees clockwise. Rotating the displayable causes it to be resized, according to the setting of rotate_pad, below. This can cause positioning to change if xanchor and yanchor are not 0.5.

rotate_padlink
Type
boolean

Default
True

If True, then a rotated displayable is padded such that the width and height are equal to the hypotenuse of the original width and height. This ensures that the transform will not change size as its contents rotate. If False, the transform will be given the minimal size that contains the transformed displayable. This is more suited to fixed rotations.

transform_anchorlink
Type
boolean

Default
False

If true, the anchor point is located on the cropped child, and is scaled and rotated as the child is transformed. Effectively, this makes the anchor the point that the child is rotated and scaled around.

zoomlink
Type
float

Default
1.0

This causes the displayable to be zoomed by the supplied factor.

xzoomlink
Type
float

Default
1.0

This causes the displayable to be horizontally zoomed by the supplied factor. A negative value causes the image to be flipped horizontally.

yzoomlink
Type
float

Default
1.0

This causes the displayable to be vertically zoomed by the supplied factor. A negative value causes the image to be flipped vertically.

nearestlink
Type
boolean

Default
None

If True, the displayable and its children are drawn using nearest-neighbor filtering. If False, the displayable and its children are drawn using bilinear filtering. If None, this is inherited from the parent, or config.nearest_neighbor, which defaults to False.

alphalink
Type
float

Default
1.0

This controls the opacity of the displayable.

The alpha transform is applied to each image comprising the child of the transform independently. This can lead to unexpected results when the children overlap, such as as seeing a character through clothing. The Flatten() displayable can help with these problems.

additivelink
Type
float

Default
0.0

This controls how much additive blending Ren'Py performs. When 1.0, Ren'Py draws using the ADD operator. When 0.0, Ren'Py draws using the OVER operator.

Additive blending is performed on each child of the transform independently.

Fully additive blending doesn't alter the alpha channel of the destination, and additive images may not be visible if they're not drawn directly onto an opaque surface. (Complex operations, like viewport, Flatten(), Frame(), and certain transitions may cause problems with additive blending.)

aroundlink
Type
(position, position)

Default
(0.0, 0.0)

If not None, specifies the center of the polar coordinate position relative to the upper-left of the containing area. The angle and radius properties can then be used to specify a position using polar coordinates.

anglelink
Type
float

This gives the angle portion of a position specified in polar coordinates. This is measured in degrees, with 0 being to the top of the screen, and 90 being to the right.

radiuslink
Type
position

The radius component of the position given in polar coordiates. The type of this is the type the radius was last set to, defaulting to absolute pixels.

If a float, this will be scaled to the smaller of the width and height available to the transform.

anchoraroundlink
Type
(position, position)

This, in conjunction with anchorangle, and anchorradius, can be used to specify the anchor point of the transform in polar coordinates.

This should be in the same units as anchor, do not mix relative and absolute coordinates.

anchoranglelink
Type
(float)

The angle component of the ploar coordinates of the anchor. This is specified in degrees, with 0 being to the top and 90 being to the right.

anchorradiuslink
Type
(position)

The radius component of the polar coordinates of the anchor. This will have the same type as anchoraround and anchor.

alignaroundlink
Type
(float, float)

This sets around and anchoraround to the same value.

croplink
Type
None or (position, position, position, position)

Default
None

If not None, causes the displayable to be cropped to the given box. The box is specified as a tuple of (x, y, width, height).

If corners and crop are given, crop takes priority over corners.

corner1link
Type
None or (position, position)

Default
None

If not None, gives the upper-left corner of the crop box. Crop takes priority over corners. When a float, and crop_relative is enabled, this is relative to the size of the child.

corner2link
Type
None or (position, position)

Default
None

If not None, gives the lower right corner of the crop box. Cropt takes priority over corners. When a float, and crop_relativer is enabled, this is relative to the size of the child.

xysizelink
Type
None or (position, position)

Default
None

If not None, causes the displayable to be scaled to the given size. This is equivalent to setting the xsize and ysize properties to the first and second components.

This is affected by the fit property.

xsizelink
Type
None or position

Default
None

If not None, causes the displayable to be scaled to the given width.

This is affected by the fit property.

ysizelink
Type
None or position

Default
None

If not None, causes the displayable to be scaled to the given height.

This is affected by the fit property.

fitlink
Type
None or string

Default
None

Causes the displayable to be sized according to the table below. In the context of the the table below, the "dimensions" are:

If both xsize and ysize are not None, both sizes are used as the dimensions.

If only one of those properties is not None, it is used as the sole dimension.

Otherwise, if fit is not None the area that the Transform is contained in is used as the dimensions.

If fit, xsize, and ysize are all None, this property does not apply.

Value

Description

contain

As large as possible, without exceeding any dimensions. Maintains aspect ratio.

cover

As small as possible, while matching or exceeding all dimensions. Maintains aspect ratio.

None or fill

Stretches/squashes displayable to exactly match dimensions.

scale-down

As for contain, but will never increase the size of the displayable.

scale-up

As for cover, but will never decrease the size of the displayable.

subpixellink
Type
boolean

Default
False

If True, causes the child to be placed using subpixel positioning.

Subpixel positioning effects the colors (including transparency) that are drawn into pixels, but not which pixels are drawn. When subpixel positoning is used in combination with movement (the usual case), the image should have transparent borders in the directions it might be moved in, if those edges are visible on the screen.

For example, if a character sprite is being moved horizontally, it makes sense to have transparent borders on the left and right. These might not be necessary when panning over a background that extends outside the visible area, as the edges will not be seen.

delaylink
Type
float

Default
0.0

If this transform is being used as a transition, then this is the duration of the transition.

eventslink
Type
boolean

Default
True

If true, events are passed to the child of this transform. If false, events are blocked. (This can be used in ATL transforms to prevent events from reaching the old_widget.)

xpanlink
Type
None or float

Default
None

If not None, this interpreted as an angle that is used to pan horizontally across a 360 degree panoramic image. The center of the image is used as the zero angle, while the left and right edges are -180 and 180 degrees, respectively.

ypanlink
Type
None or float

Default
None

If not None, this interpreted as an angle that is used to pan vertically across a 360 degree panoramic image. The center of the image is used as the zero angle, while the top and bottom edges are -180 and 180 degrees, respectively.

xtilelink
Type
int

Default
1

The number of times to tile the image horizontally.

ytilelink
Type
int

Default
1

The number of times to tile the image vertically.

matrixcolorlink
Type
None or Matrix or MatrixColor

Default
None

If not None, the value of this property is used to recolor everything that children of this transform draw. Interpolation is only supported when MatrixColors are used, and the MatrixColors are structurally similar. See Matrixcolor for more information.

blurlink
Type
None or float

Default
None

This blurs the child of this transform by blur pixels, up to the border of the displayable. The precise details of the blurring may change between Ren'Py versions, and the blurring may exhibit artifacts, especially when the image being blurred is changing.

show_cancels_hidelink
Type
boolean

Default
True

Normally, when a displayable or screen with the same tag or name as one that is hiding is shown, the hiding displayable or screen is removed, cancelling the hide transform. If this property is False in the hide transform, this cancellation will not occur, and the hide transform will proceed to completion.

There are also several sets of transform properties that are documented elsewhere:

3D Stage properties:
perspective, point_to, orientation, xrotate, yrotate, zrotate, matrixanchor, matrixtransform, zpos, zzoom

Model-based rendering properties:
blend, mesh, mesh_pad, shader

GL Properties:
The GL properties.

Uniforms:
Properties beginning with u_ are uniforms that can be used by custom shaders.

These properties are applied in the following order:

mesh, blur

tile

pan

crop, corner1, corner2

xysize, size, maxsize

zoom, xzoom, yzoom

point_to

orientation

xrotate, yrotate, zrotate

rotate

zpos

matrixtransform, matrixanchor

zzoom

perspective

nearest, blend, alpha, additive, shader.

matrixcolor

GL Properties, Uniforms

position properties

show_cancels_hide

Deprecated Transform Propertieslink
Warning

The following properties should not be used in modern games, as they may conflict with more recent features. They are only kept here for compatibility, along with the new way of achieving the same behavior.

crop_relativelink
Type
boolean

Default
True

If False, float components of crop are interpreted as an absolute number of pixels, instead of a fraction of the width and height of the source image.

If an absolute number of pixel is to be expressed, absolute instances should be provided to the crop property instead of using the crop_relative property. If necessary, values of dubious type can be wrapped in the absolute callable.

sizelink
Type
None or (int, int)

Default
None

This is an older version of xysize interpreting floating-point values as an absolute number of pixels.

maxsizelink
Type
None or (int, int)

Default
None

If not None, causes the displayable to be scaled so that it fits within a box of this size, while preserving aspect ratio. (Note that this means that one of the dimensions may be smaller than the size of this box.)

To achieve the same result, give the values to the xysize property, and set the fit property to the value "contain".

Circular Motionlink
When an interpolation statement contains the clockwise or counterclockwise keywords, the interpolation will cause circular motion. Ren'Py will compare the start and end locations and figure out the polar coordinate center. Ren'Py will then compute the number of degrees it will take to go from the start angle to the end angle, in the specified direction of rotation. If the circles clause is given, Ren'Py will ensure that the appropriate number of circles will be made.

Ren'Py will then interpolate the angle and radius properties, as appropriate, to cause the circular motion to happen. If the transform is in align mode, setting the angle and radius will set the align property. Otherwise, the pos property will be set.

External Eventslink
The following events can be triggered automatically:

start
A pseudo-event, triggered on entering an on statement, if no event of higher priority has happened.

show
Triggered when the transform is shown using the show or scene statement, and no image with the given tag exists.

replace
Triggered when transform is shown using the show statement, replacing an image with the given tag.

hide
Triggered when the transform is hidden using the hide statement or its Python equivalent.

Note that this isn't triggered when the transform is eliminated via the scene statement or exiting the context it exists in, such as when exiting the game menu.

replaced
Triggered when the transform is replaced by another. The image will not actually hide until the ATL block finishes.

update
Triggered when a screen is updated without being shown or replacing another screen. This happens in rare but possible cases, such as when the game is loaded and when styles or translations change.

hover, idle, selected_hover, selected_idle, insensitive, selected_insensitive
Triggered when button containing this transform, or a button contained by this transform, enters the named state.

Replacing Transformslink
When an an ATL transform or transform defined using the Transform() class is replaced by another class, the properties of the transform that's being replaced are inherited by the transform that's replacing it.

When the show statement has multiple transforms in the at list, the transforms are matched from last to first, until one list runs out. For example, in:

show eileen happy at a, b, c
"Let's wait a bit."
show eileen happy at d, e
the c transform is replaced by e, the b transform is replaced by d, and nothing replaces the a transform.

At the moment of replacement, the values of the properties of the old transform get inherited by the new transform. If the old transform was being animated, this might mean an intermediate value is inherited. For example:

transform bounce:
    linear 3.0 xalign 1.0
    linear 3.0 xalign 0.0
    repeat

transform headright:
    linear 15 xalign 1.0

label example:
    show eileen happy at bounce
    pause
    show eileen happy at headright
    pause
In this example, the sprite will bounce from left to right and back until the player clicks. When that happens, the xalign from bounce will be used to initialize the xalign of headright, and so the sprite will move from where it was when the player first clicked.

The position properties (xpos, ypos, xanchor, and yanchor), have a special rule for inheritance - a value set in the child will override a value set in the parent. This is because a displayable may have only one position, and a position that is actively set takes precedence. These properties may be set in multiple ways - for example, xalign sets xpos and xanchor.

Finally, when a show statement does not include an at clause, the same displayables are used, so no inheritence is necessary. To prevent inheritance, show and then hide the displayable.

ATL Transitionslink
It's possible to use an ATL transform to define a transition. These transitions accept the old_widget and new_widget arguments, which are given displayables that are transitioned from and to, respectively.

An ATL transition must set the delay property to the number of seconds the transition lasts for. It may user the events property to prevent the old displayable from receiving events.

transform spin(duration=1.0, new_widget=None, old_widget=None):

    # Set how long this transform will take to complete.
    delay duration

    # Center it.
    xcenter 0.5
    ycenter 0.5

    # Spin the old displayable.
    old_widget
    events False
    rotate 0.0
    easeout (duration / 2) rotate 360.0

    # Spin the new displayable.
    new_widget
    events True
    easein (duration / 2) rotate 720.0
Special ATL Keyword Parameterslink
There are several parameters that Ren'Py will supply to ATL, in certain contexts, if the parameter is in the parameter list.

child
When ATL is used as a transform, the child parameter is given the original child that the transform is applied to. This allows the child to be referred to explicitly. For example, it becomes possible to swap between the supplied child and another displayable:

transform lucy_jump_scare(child):
    child      # Show the original child.
    pause 5
    "lucy mad" # Jump scare.
    pause .2
    child      # Go back to the original child.
If can also be used to place the original child inside a contains block:

transform marquee(width, height=1.0, duration=2.0, child=None):
    xcenter 0.5
    ycenter 0.5

    crop_relative True
    crop (0, 0, 0.5, 500)

    contains:
        child
        xanchor 0.0 xpos 1.0
        linear duration xanchor 1.0 xpos 0.0
old_widget, new_widget
When an ATL block is used as a transition, these are given displayables that are transitioned from and to, respectively.

Matrixcolorlink
Ren'Py supports recoloring images using the matrixcolor transform property. This property can take either a Matrix or a ColorMatrix object.

Premultiplied Alpha Colorlink
When an image is loaded, Ren'Py decompresses the image, and then copies it to the GPU of your computer or mobile device. As part of the copying, each of the four color channels (red, green, blue, and alpha - with alpha representing opacity) is scaled to a number between 0.0 and 1.0. In this system, 1.0 represents the full level of a color or fully opaque, while 0.0 represents the absence of the color or the pixel being fully transparent.

Ren'Py doesn't stop there, though. Once the values have been scaled, the red, green, and blue channels are multiplied by the alpha channel. This means that an opaque white pixel will have the value (1.0, 1.0, 1.0, 1.0), a 50% transparent red pixel will have the value (0.5, 0.0, 0.0, 0.5), and a transparent pixel will have the value (0.0, 0.0, 0.0, 0.0).

Premultiplied alph allows Ren'Py to scale images up and down without causing dark artifacts that come from representing colors more directly. Scaling images is similar to averaging two pixels together. Without premultiplied alpha, we might have a solid white pixel and a transparent pixel - (1.0, 1.0, 1.0, 1.0) and (0.0, 0.0, 0.0, 0.0), respectively. Average those together gets (0.5, 0.5, 0.5, 0.5). But that's not right - averaging solid white and transparent black should get 50% opaque white, not 50% opaque gray.

In the premultiplied alpha system, the starting value is the same, and so is the result - except now, (0.5, 0.5, 0.5, 0.5) has been pre-defined to be 50% opaque white. By storing colors in this way, Ren'Py can draw them to the screen correctly, and not get weird artifacts when scaling.

Using a Matrix to Change Colorslink
The Matrix objects used to change colors can consist of 16 numbers, which can in turn be arranged into a 4x4 grid. Here's a way of doing this that assigns a letter to each number:

define mymatrix = Matrix([ a, b, c, d,
                           e, f, g, h,
                           i, j, k, l,
                           m, n, o, p, ])
While they're represented as letters here, realize these are really numbers, either given directly or computed.

These values are applied to the red (R), green (G), blue (B), and alpha (A) channels of the original color to make a new color, (R', G', B', A'). The formulas to do this are:

R' = R * a + G * b + B * c + A * d
G' = R * e + G * f + B * g + A * h
B' = R * i + G * j + B * k + A * l
A' = R * m + G * n + B * o + A * p
While this might seem complex, there's a pretty simple structure to it - the first row creates the new red channel, the second the new green channel and so on. So if we wanted to make a matrix that swapped red and green for some reason, we'd write:

transform swap_red_and green:
    matrixcolor Matrix([ 0.0, 1.0, 0.0, 0.0,
                         1.0, 0.0, 0.0, 0.0,
                         0.0, 0.0, 1.0, 0.0,
                         0.0, 0.0, 0.0, 1.0, ])
While this is a simple example, there is a lot of color theory that can be expressed in this way. Matrices can be combined by multiplying them together, and when that happens the matrices are combined right to left.

ColorMatrixlink
While Matrix objects are suitable for static color changes, they're not useful for animating color changes. It's also useful to have a way of taking common matrices and encapsulating them in a way that allows the matrix to be parameterized.

The ColorMatrix is a base class that is is extended by a number of Matrix-creating classes. Instances of ColorMatrix are called by Ren'Py, and return Matrixes. ColorMatrix is well integrated with ATL, allowing for matrixcolor animations.

transform red_blue_tint:
    matrixcolor TintMatrix("#f00")
    linear 3.0 matrixcolor TintMatrix("#00f")
    linear 3.0 matrixcolor TintMatrix("#f00")
    repeat
The ColorMatrix class can be subclassed, with the subclasses replacing its __call__ method. This method takes:

An old object to interpolate off of. This object may be of any class, and may be None if no old object exists.

A value between 0.0 and 1.0, representing the point to interpolate. 0.0 is entirely the old object, and 1.0 is entirely the new object.

And should return a Matrix.

As an example of a ColorMatrix, here is the implementation of Ren'Py's TintMatrix class.

class TintMatrix(ColorMatrix):
    def __init__(self, color):

        # Store the color given as a parameter.
        self.color = Color(color)

    def __call__(self, other, done):

        if type(other) is not type(self):

            # When not using an old color, we can take
            # r, g, b, and a from self.color.
            r, g, b = self.color.rgb
            a = self.color.alpha

        else:

            # Otherwise, we have to extract from self.color
            # and other.color, and interpolate the results.
            oldr, oldg, oldb = other.color.rgb
            olda = other.color.alpha
            r, g, b = self.color.rgb
            a = self.color.alpha

            r = oldr + (r - oldr) * done
            g = oldg + (g - oldg) * done
            b = oldb + (b - oldb) * done
            a = olda + (a - olda) * done

        # To properly handle premultiplied alpha, the color channels
        # have to be multiplied by the alpha channel.
        r *= a
        g *= a
        b *= a

        # Return a Matrix.
        return Matrix([ r, 0, 0, 0,
                        0, g, 0, 0,
                        0, 0, b, 0,
                        0, 0, 0, a ])
Structural Similaritylink
In ATL, interpolating a the matrixcolor property requires the use of ColorMatrixes that have structural similarity. That means the same types of ColorMatrix, multiplied together in the same order.

As an example, the following will interpolate from normal to a desaturated blue tint, and then return to normal.

show eileen happy at center:
    matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
    linear 2.0 matrixcolor TintMatrix("#ccccff") * SaturationMatrix(0.0)
    linear 2.0 matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
While the first setting of matrixcolor may seem unnecessary, it is required to provide a base for the first linear interpolation. If it wasn't present, that interpolation would be skipped.

Built-In ColorMatrix Subclasseslink
The following is the list of ColorMatrix subclasses that are built into Ren'Py.

classBrightnessMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The amount of change in image brightness. This should be a number between -1 and 1, with -1 the darkest possible image and 1 the brightest.

classColorizeMatrix(black_color, white_color)link
A ColorMatrix that can be used with matrixcolor to colorize black and white displayables. It uses the color of each pixel in the black and white to interpolate between the black color and the white color.

The alpha channel is not touched.

This is inteded for use with a black and white image (or one that has been desaturated with SaturationMatrix()), and will yield strange results when used with images that are not black and white.

black_color, white_color
The colors used in the interpolation.

classContrastMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The contrast value. Values between 0.0 and 1.0 decrease the contrast, while values above 1.0 increase the contrast.

classHueMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to rotate the hue by value degrees. While value can be any number, positive or negative, 360 degrees makes a complete rotation. The alpha channel is left alone.

classIdentityMatrixlink
A ColorMatrix that can be used with matrixcolor that does not change the color or alpha of what is supplied to it.

classInvertMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to invert each of the color channels. The alpha channel is left alone.

value
The amount to inverty by. 0.0 is not inverted, 1.0 is fully inverted. Used to animate inversion.

classOpacityMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the opacity of an image, while leaving color channels alone.

value
The amount the alpha channel should be multiplied by, a number between 0.0 and 1.0.

classSaturationMatrix(value, desat=(0.2126, 0.7152, 0.0722))link
A ColorMatrix that can be used with matrixcolor that alters the saturation of an image, while leaving the alpha channel alone.

value
The amount of saturation in the resulting image. 1.0 is the unaltered image, while 0.0 is grayscale.

desat
This is a 3-element tuple that controls how much of the red, green, and blue channels will be placed into all three channels of a fully desaturated image. The default is based on the constants used for the luminance channel of an NTSC television signal. Since the human eye is mostly sensitive to green, more of the green channel is kept then the other two channels.

SepiaMatrix(tint='#ffeec2', desat=(0.2126, 0.7152, 0.0722))link
A function that returns a ColorMatrix that can be used with matrixcolor to sepia-tone a displayable. This is the equivalent of:

TintMatrix(tint) * SaturationMatrix(0.0, desat)
classTintMatrix(color)link
A ColorMatrix can be used with matrixcolor to tint an image, while leaving the alpha channel alone.

color
The color that the matrix will tint things to. This is passed to Color(), and so may be anything that Color supports as its first argument.


Matrixcolorlink
Ren'Py supports recoloring images using the matrixcolor transform property. This property can take either a Matrix or a ColorMatrix object.

Premultiplied Alpha Colorlink
When an image is loaded, Ren'Py decompresses the image, and then copies it to the GPU of your computer or mobile device. As part of the copying, each of the four color channels (red, green, blue, and alpha - with alpha representing opacity) is scaled to a number between 0.0 and 1.0. In this system, 1.0 represents the full level of a color or fully opaque, while 0.0 represents the absence of the color or the pixel being fully transparent.

Ren'Py doesn't stop there, though. Once the values have been scaled, the red, green, and blue channels are multiplied by the alpha channel. This means that an opaque white pixel will have the value (1.0, 1.0, 1.0, 1.0), a 50% transparent red pixel will have the value (0.5, 0.0, 0.0, 0.5), and a transparent pixel will have the value (0.0, 0.0, 0.0, 0.0).

Premultiplied alph allows Ren'Py to scale images up and down without causing dark artifacts that come from representing colors more directly. Scaling images is similar to averaging two pixels together. Without premultiplied alpha, we might have a solid white pixel and a transparent pixel - (1.0, 1.0, 1.0, 1.0) and (0.0, 0.0, 0.0, 0.0), respectively. Average those together gets (0.5, 0.5, 0.5, 0.5). But that's not right - averaging solid white and transparent black should get 50% opaque white, not 50% opaque gray.

In the premultiplied alpha system, the starting value is the same, and so is the result - except now, (0.5, 0.5, 0.5, 0.5) has been pre-defined to be 50% opaque white. By storing colors in this way, Ren'Py can draw them to the screen correctly, and not get weird artifacts when scaling.

Using a Matrix to Change Colorslink
The Matrix objects used to change colors can consist of 16 numbers, which can in turn be arranged into a 4x4 grid. Here's a way of doing this that assigns a letter to each number:

define mymatrix = Matrix([ a, b, c, d,
                           e, f, g, h,
                           i, j, k, l,
                           m, n, o, p, ])
While they're represented as letters here, realize these are really numbers, either given directly or computed.

These values are applied to the red (R), green (G), blue (B), and alpha (A) channels of the original color to make a new color, (R', G', B', A'). The formulas to do this are:

R' = R * a + G * b + B * c + A * d
G' = R * e + G * f + B * g + A * h
B' = R * i + G * j + B * k + A * l
A' = R * m + G * n + B * o + A * p
While this might seem complex, there's a pretty simple structure to it - the first row creates the new red channel, the second the new green channel and so on. So if we wanted to make a matrix that swapped red and green for some reason, we'd write:

transform swap_red_and green:
    matrixcolor Matrix([ 0.0, 1.0, 0.0, 0.0,
                         1.0, 0.0, 0.0, 0.0,
                         0.0, 0.0, 1.0, 0.0,
                         0.0, 0.0, 0.0, 1.0, ])
While this is a simple example, there is a lot of color theory that can be expressed in this way. Matrices can be combined by multiplying them together, and when that happens the matrices are combined right to left.

ColorMatrixlink
While Matrix objects are suitable for static color changes, they're not useful for animating color changes. It's also useful to have a way of taking common matrices and encapsulating them in a way that allows the matrix to be parameterized.

The ColorMatrix is a base class that is is extended by a number of Matrix-creating classes. Instances of ColorMatrix are called by Ren'Py, and return Matrixes. ColorMatrix is well integrated with ATL, allowing for matrixcolor animations.

transform red_blue_tint:
    matrixcolor TintMatrix("#f00")
    linear 3.0 matrixcolor TintMatrix("#00f")
    linear 3.0 matrixcolor TintMatrix("#f00")
    repeat
The ColorMatrix class can be subclassed, with the subclasses replacing its __call__ method. This method takes:

An old object to interpolate off of. This object may be of any class, and may be None if no old object exists.

A value between 0.0 and 1.0, representing the point to interpolate. 0.0 is entirely the old object, and 1.0 is entirely the new object.

And should return a Matrix.

As an example of a ColorMatrix, here is the implementation of Ren'Py's TintMatrix class.

class TintMatrix(ColorMatrix):
    def __init__(self, color):

        # Store the color given as a parameter.
        self.color = Color(color)

    def __call__(self, other, done):

        if type(other) is not type(self):

            # When not using an old color, we can take
            # r, g, b, and a from self.color.
            r, g, b = self.color.rgb
            a = self.color.alpha

        else:

            # Otherwise, we have to extract from self.color
            # and other.color, and interpolate the results.
            oldr, oldg, oldb = other.color.rgb
            olda = other.color.alpha
            r, g, b = self.color.rgb
            a = self.color.alpha

            r = oldr + (r - oldr) * done
            g = oldg + (g - oldg) * done
            b = oldb + (b - oldb) * done
            a = olda + (a - olda) * done

        # To properly handle premultiplied alpha, the color channels
        # have to be multiplied by the alpha channel.
        r *= a
        g *= a
        b *= a

        # Return a Matrix.
        return Matrix([ r, 0, 0, 0,
                        0, g, 0, 0,
                        0, 0, b, 0,
                        0, 0, 0, a ])
Structural Similaritylink
In ATL, interpolating a the matrixcolor property requires the use of ColorMatrixes that have structural similarity. That means the same types of ColorMatrix, multiplied together in the same order.

As an example, the following will interpolate from normal to a desaturated blue tint, and then return to normal.

show eileen happy at center:
    matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
    linear 2.0 matrixcolor TintMatrix("#ccccff") * SaturationMatrix(0.0)
    linear 2.0 matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
While the first setting of matrixcolor may seem unnecessary, it is required to provide a base for the first linear interpolation. If it wasn't present, that interpolation would be skipped.

Built-In ColorMatrix Subclasseslink
The following is the list of ColorMatrix subclasses that are built into Ren'Py.

classBrightnessMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The amount of change in image brightness. This should be a number between -1 and 1, with -1 the darkest possible image and 1 the brightest.

classColorizeMatrix(black_color, white_color)link
A ColorMatrix that can be used with matrixcolor to colorize black and white displayables. It uses the color of each pixel in the black and white to interpolate between the black color and the white color.

The alpha channel is not touched.

This is inteded for use with a black and white image (or one that has been desaturated with SaturationMatrix()), and will yield strange results when used with images that are not black and white.

black_color, white_color
The colors used in the interpolation.

classContrastMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The contrast value. Values between 0.0 and 1.0 decrease the contrast, while values above 1.0 increase the contrast.

classHueMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to rotate the hue by value degrees. While value can be any number, positive or negative, 360 degrees makes a complete rotation. The alpha channel is left alone.

classIdentityMatrixlink
A ColorMatrix that can be used with matrixcolor that does not change the color or alpha of what is supplied to it.

classInvertMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to invert each of the color channels. The alpha channel is left alone.

value
The amount to inverty by. 0.0 is not inverted, 1.0 is fully inverted. Used to animate inversion.

classOpacityMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the opacity of an image, while leaving color channels alone.

value
The amount the alpha channel should be multiplied by, a number between 0.0 and 1.0.

classSaturationMatrix(value, desat=(0.2126, 0.7152, 0.0722))link
A ColorMatrix that can be used with matrixcolor that alters the saturation of an image, while leaving the alpha channel alone.

value
The amount of saturation in the resulting image. 1.0 is the unaltered image, while 0.0 is grayscale.

desat
This is a 3-element tuple that controls how much of the red, green, and blue channels will be placed into all three channels of a fully desaturated image. The default is based on the constants used for the luminance channel of an NTSC television signal. Since the human eye is mostly sensitive to green, more of the green channel is kept then the other two channels.

SepiaMatrix(tint='#ffeec2', desat=(0.2126, 0.7152, 0.0722))link
A function that returns a ColorMatrix that can be used with matrixcolor to sepia-tone a displayable. This is the equivalent of:

TintMatrix(tint) * SaturationMatrix(0.0, desat)
classTintMatrix(color)link
A ColorMatrix can be used with matrixcolor to tint an image, while leaving the alpha channel alone.

color
The color that the matrix will tint things to. This is passed to Color(), and so may be anything that Color supports as its first argument.

Matrixcolorlink
Ren'Py supports recoloring images using the matrixcolor transform property. This property can take either a Matrix or a ColorMatrix object.

Premultiplied Alpha Colorlink
When an image is loaded, Ren'Py decompresses the image, and then copies it to the GPU of your computer or mobile device. As part of the copying, each of the four color channels (red, green, blue, and alpha - with alpha representing opacity) is scaled to a number between 0.0 and 1.0. In this system, 1.0 represents the full level of a color or fully opaque, while 0.0 represents the absence of the color or the pixel being fully transparent.

Ren'Py doesn't stop there, though. Once the values have been scaled, the red, green, and blue channels are multiplied by the alpha channel. This means that an opaque white pixel will have the value (1.0, 1.0, 1.0, 1.0), a 50% transparent red pixel will have the value (0.5, 0.0, 0.0, 0.5), and a transparent pixel will have the value (0.0, 0.0, 0.0, 0.0).

Premultiplied alph allows Ren'Py to scale images up and down without causing dark artifacts that come from representing colors more directly. Scaling images is similar to averaging two pixels together. Without premultiplied alpha, we might have a solid white pixel and a transparent pixel - (1.0, 1.0, 1.0, 1.0) and (0.0, 0.0, 0.0, 0.0), respectively. Average those together gets (0.5, 0.5, 0.5, 0.5). But that's not right - averaging solid white and transparent black should get 50% opaque white, not 50% opaque gray.

In the premultiplied alpha system, the starting value is the same, and so is the result - except now, (0.5, 0.5, 0.5, 0.5) has been pre-defined to be 50% opaque white. By storing colors in this way, Ren'Py can draw them to the screen correctly, and not get weird artifacts when scaling.

Using a Matrix to Change Colorslink
The Matrix objects used to change colors can consist of 16 numbers, which can in turn be arranged into a 4x4 grid. Here's a way of doing this that assigns a letter to each number:

define mymatrix = Matrix([ a, b, c, d,
                           e, f, g, h,
                           i, j, k, l,
                           m, n, o, p, ])
While they're represented as letters here, realize these are really numbers, either given directly or computed.

These values are applied to the red (R), green (G), blue (B), and alpha (A) channels of the original color to make a new color, (R', G', B', A'). The formulas to do this are:

R' = R * a + G * b + B * c + A * d
G' = R * e + G * f + B * g + A * h
B' = R * i + G * j + B * k + A * l
A' = R * m + G * n + B * o + A * p
While this might seem complex, there's a pretty simple structure to it - the first row creates the new red channel, the second the new green channel and so on. So if we wanted to make a matrix that swapped red and green for some reason, we'd write:

transform swap_red_and green:
    matrixcolor Matrix([ 0.0, 1.0, 0.0, 0.0,
                         1.0, 0.0, 0.0, 0.0,
                         0.0, 0.0, 1.0, 0.0,
                         0.0, 0.0, 0.0, 1.0, ])
While this is a simple example, there is a lot of color theory that can be expressed in this way. Matrices can be combined by multiplying them together, and when that happens the matrices are combined right to left.

ColorMatrixlink
While Matrix objects are suitable for static color changes, they're not useful for animating color changes. It's also useful to have a way of taking common matrices and encapsulating them in a way that allows the matrix to be parameterized.

The ColorMatrix is a base class that is is extended by a number of Matrix-creating classes. Instances of ColorMatrix are called by Ren'Py, and return Matrixes. ColorMatrix is well integrated with ATL, allowing for matrixcolor animations.

transform red_blue_tint:
    matrixcolor TintMatrix("#f00")
    linear 3.0 matrixcolor TintMatrix("#00f")
    linear 3.0 matrixcolor TintMatrix("#f00")
    repeat
The ColorMatrix class can be subclassed, with the subclasses replacing its __call__ method. This method takes:

An old object to interpolate off of. This object may be of any class, and may be None if no old object exists.

A value between 0.0 and 1.0, representing the point to interpolate. 0.0 is entirely the old object, and 1.0 is entirely the new object.

And should return a Matrix.

As an example of a ColorMatrix, here is the implementation of Ren'Py's TintMatrix class.

class TintMatrix(ColorMatrix):
    def __init__(self, color):

        # Store the color given as a parameter.
        self.color = Color(color)

    def __call__(self, other, done):

        if type(other) is not type(self):

            # When not using an old color, we can take
            # r, g, b, and a from self.color.
            r, g, b = self.color.rgb
            a = self.color.alpha

        else:

            # Otherwise, we have to extract from self.color
            # and other.color, and interpolate the results.
            oldr, oldg, oldb = other.color.rgb
            olda = other.color.alpha
            r, g, b = self.color.rgb
            a = self.color.alpha

            r = oldr + (r - oldr) * done
            g = oldg + (g - oldg) * done
            b = oldb + (b - oldb) * done
            a = olda + (a - olda) * done

        # To properly handle premultiplied alpha, the color channels
        # have to be multiplied by the alpha channel.
        r *= a
        g *= a
        b *= a

        # Return a Matrix.
        return Matrix([ r, 0, 0, 0,
                        0, g, 0, 0,
                        0, 0, b, 0,
                        0, 0, 0, a ])
Structural Similaritylink
In ATL, interpolating a the matrixcolor property requires the use of ColorMatrixes that have structural similarity. That means the same types of ColorMatrix, multiplied together in the same order.

As an example, the following will interpolate from normal to a desaturated blue tint, and then return to normal.

show eileen happy at center:
    matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
    linear 2.0 matrixcolor TintMatrix("#ccccff") * SaturationMatrix(0.0)
    linear 2.0 matrixcolor TintMatrix("#ffffff") * SaturationMatrix(1.0)
While the first setting of matrixcolor may seem unnecessary, it is required to provide a base for the first linear interpolation. If it wasn't present, that interpolation would be skipped.

Built-In ColorMatrix Subclasseslink
The following is the list of ColorMatrix subclasses that are built into Ren'Py.

classBrightnessMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The amount of change in image brightness. This should be a number between -1 and 1, with -1 the darkest possible image and 1 the brightest.

classColorizeMatrix(black_color, white_color)link
A ColorMatrix that can be used with matrixcolor to colorize black and white displayables. It uses the color of each pixel in the black and white to interpolate between the black color and the white color.

The alpha channel is not touched.

This is inteded for use with a black and white image (or one that has been desaturated with SaturationMatrix()), and will yield strange results when used with images that are not black and white.

black_color, white_color
The colors used in the interpolation.

classContrastMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the brightness of an image, while leaving the Alpha channel alone.

value
The contrast value. Values between 0.0 and 1.0 decrease the contrast, while values above 1.0 increase the contrast.

classHueMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to rotate the hue by value degrees. While value can be any number, positive or negative, 360 degrees makes a complete rotation. The alpha channel is left alone.

classIdentityMatrixlink
A ColorMatrix that can be used with matrixcolor that does not change the color or alpha of what is supplied to it.

classInvertMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to invert each of the color channels. The alpha channel is left alone.

value
The amount to inverty by. 0.0 is not inverted, 1.0 is fully inverted. Used to animate inversion.

classOpacityMatrix(value=1.0)link
A ColorMatrix that can be used with matrixcolor to change the opacity of an image, while leaving color channels alone.

value
The amount the alpha channel should be multiplied by, a number between 0.0 and 1.0.

classSaturationMatrix(value, desat=(0.2126, 0.7152, 0.0722))link
A ColorMatrix that can be used with matrixcolor that alters the saturation of an image, while leaving the alpha channel alone.

value
The amount of saturation in the resulting image. 1.0 is the unaltered image, while 0.0 is grayscale.

desat
This is a 3-element tuple that controls how much of the red, green, and blue channels will be placed into all three channels of a fully desaturated image. The default is based on the constants used for the luminance channel of an NTSC television signal. Since the human eye is mostly sensitive to green, more of the green channel is kept then the other two channels.

SepiaMatrix(tint='#ffeec2', desat=(0.2126, 0.7152, 0.0722))link
A function that returns a ColorMatrix that can be used with matrixcolor to sepia-tone a displayable. This is the equivalent of:

TintMatrix(tint) * SaturationMatrix(0.0, desat)
classTintMatrix(color)link
A ColorMatrix can be used with matrixcolor to tint an image, while leaving the alpha channel alone.

color
The color that the matrix will tint things to. This is passed to Color(), and so may be anything that Color supports as its first argument.


Live2D Cubismlink
Live2D Cubism is a system that allows you to animate 2D images, such as the character sprites in a visual novel. These images are drawn in a series of layers - for example, a layer for pupils and irises, a layer for the whites of the eyes, a layer for the eyebrows, and so on.

The Live2D software lets you associate meshes with each of these layers, and then specify how the meshes are deformed (the shape of each mesh is changed) as the parameters are adjusted. The Live2D software lets you create motion files that determine how these parameters are adjusted over time, and expression files that determine expressions.

Ren'Py's Live2D integration involves taking the files that Live2D produces, and using them to define animations that can be displayed in Ren'Py. Ren'Py processes the motions and expressions to determine the values of the parameters. This is passed to the Cubism SDK for Native, which gives Ren'Py back a list of meshes to show. Ren'Py then renders these meshes, and the result is a Live2D character on the screen.

Ren'Py supports Live2D animations in the Cubism 3 and Cubism 4 formats. It supports the playback of expressions and motions.

Warning

Live2D is not supported on the x86_64 Android platform, as a DLL is not provided for this platform. This means that it may have problems running on the Android emulator or ChromeOS.

Live2D is not supported on the web platform.

Installing Live2D on iOS requires copying the static libraries into your iOS project by hand.

Installing Live2Dlink
Before you can use Live2D, you'll need to download and install the Cubism SDK for Native, found on the Live2D website. Please note that you may need to purchase a license to use Live2D if your business makes more than a certain amount of money a year.

Once you've downloaded Live2D, you can install it from the Ren'Py launcher. To install, go to "preferences", then click "Install libraries". Place the CubismSdkForNative-4-r.1.zip file in the Ren'Py SDK directory, which can be accessed using the button in the bottom right of the install libraries screen. Then click "Install Live2D Cubism SDK for Native". After a short amount of time, Live2D will be installed.

Defining Animationslink
Live2D animations are defined using the Live2D displayable and the image statement:

Live2D(filename, zoom=None, top=0.0, base=1.0, height=1.0, alias={}, loop=False, fade=None, seamless=None, attribute_function=None, attribute_filter=None, update_function=None, **properties)link
This displayable displays a Live2D animation.

filename
This may either be a model3.json file defining a Live2D animation, or a directory containing that animation. In the latter case, the last component of the directory is taken, and has .model3.json appended to find the file.

For example, "Resources/Hiyori" and "Resources/Hiyori/Hiyori.model3.json" are equivalent.

zoom
If not None, a zoom factor that is applied. This takes precedence over top and base.

top
The top of the image, for sizing purposes. This is a fraction of the image, with 0.0 being the top and 1.0 the bottom.

base
The bottom of the image, for sizing purposes. This is a fraction of the image, with 0.0 being the top and 1.0 being the bottom. This also becomes the default value of yanchor.

height
The height that the image is scaled to. This is a fraction of the virtual height of the screen.

loop
True if the final motion should be looped, False otherwise.

alias
A dictionary mapping aliases to the motions or expressions they alias.

fade
True if motion fading should be enabled, False if motion fading should not be enabled, and None to use the value of _live2d_fade.

nonexclusive
If not None, this should be a list of names of nonexclusive expressions. Expressions default to being exlcusive, with only one beign shown at a time. If listed here, any number of nonexclusive expressions can be shown, in addition to one exclusive expression.

seamless
This determines if seamless looping should be used. Seamless looping avoids fading between loops of a single motion. This may be True to enable seamless looping all the time, False to dispable it all the time, or a set of motions to be looped.

default_fade
The default amount of time that is spending fading into our out of a motion or expression. This defaults to 1.0, per Live2D, which might mean that fades happen unexpectedly. Set this to 0.0 to ensure that fading is only done when it is explicitly requested.

attribute_function
If not None, this is a function that takes a tuple of attributes, and returns a second tuple of attributes. This can be used to replace attributes for the purpose of display only - the attributes it returns are not used when showing an image. It should ensure that at most one attribute corresponding to an expression is given.

attribute_filter
If not None, this is a function that takes a tuple of attributes, and returns a second tuple of attributes. This is usually used to filter out nonexclusice attributes that conflict with each other. The attributes are ordered such that more recently requested attributes come first, meaning that in the case of a conflict, the first attribute should win.

update_function
If not None, this is a function that is called when the animation is rendered after updating parameters by the current motion and expressions. The function is called with two arguments:

The Live2D object.

The shown timebase, in seconds.

This function is used to dynamically change parameters using the blend_parameter method of the passed Live2D object. The function should return a delay, in seconds, after which it will be called again, or None to be called again at the start of the next interaction. The function is also called whenever the displayable is re-rendered.

The difference between attribute_function and attribute_filter is that the former is generally used to compute replacement - the presence of two attributes means one should be replaced by a third. The latter is used to resolve conflicts between attributes, like having a group of attributes where only one is valid.

Only filename should be given positionally, and all other arguments should be given as keyword arguments.

The values of alias, fade, nonexclusive, seamless, default_fade, attribute_function, attribute_filter and update_function are shared between all Live2D objects that share filename, such that these only need to be supplied once as part of the first Live2D object to use filename.

blend_parameter(name, blend, value, weight=1.0)link
This method blends the current value of the parameter with value This has no effect outside of update_function.

name
A string giving the name of the parameter to change.

blend
One of "Add", "Multiply" or "Overwrite". The blend kind that will be used.

value
A float giving the value that will be blended in.

weight
A float between 0.0 and 1.0, the weight by which the new value will change the current value.

blend_opacity(name, blend, value, weight=1.0)link
This method blends the current value of the part opacity with value This has no effect outside of update_function.

name
Name of parameter to change defined for this model.

blend
One of "Add", "Multiply" or "Overwrite". The blend kind that will be used.

value
A float giving the opacity value that will be blended in.

weight
A float between 0.0 and 1.0, the weight by which the new value will change the current value.

There is a config variable that can help in debugging what motions and expressions were loaded from .model3.json files:

define config.log_live2d_loading = Falselink
If True, loaded path and used motions and expressions will be written to log.txt on start.

Live2D displayables should be assigned to an image statement:

image hiyori = Live2D("Resources/Hiyori", base=.6)
It's also possible to define attributes, and this is very useful when defining different zooms and scaling factors.

image hiyori close = Live2D("Resources/Hiyori", base=.6)
image hiyori far = Live2D("Resources/Hiyori", base=.9)
Keep in mind that the user's hardware may be unable to init Live2D, and in that case a single call to Live2D() will keep the entire project from loading. The same happens in the case of a game distributed in a web version. If your game should be able to work even without Live2D, you could use a wrapper or workaround, for example:

init python:
    def MyLive2D(*args, fallback=Placeholder(text="no live2d"), **kwargs):
        if renpy.has_live2d():
             return Live2D(*args, **kwargs)
        else:
             return fallback

image kobayashi = MyLive2D(...)
image eileen moving = MyLive2D(..., fallback="eileen happy")
Using Animationslink
The usual way to display a Live2D image is to display it using the show statement. In addition to any attributes added as part of the image statement, the names of expressions and motions can be used.

Some examples are:

show natori exp_00 mtn_01
show hiyori m10
show hiyori m10 m01
These use the default names found in the Cubism SDK sample names. The names of the motions and expressions are taken from the Live2D files, then forced to lower case, and if they begin with the name of the model3.json file (without directories or extensions), followed by an underscore, then that prefix is removed. (For example, "Hiyori_Motion01" becomes just motion01.)

At most one exclusive expression can be used, and any number of nonexclusive expressions and motions can be given. When more than one motion is given, the motions are played in order, and the final motion is looped if loop is True. This makes it possible for a motion to be played, followed by an idle animation. Each motion can only appear once, unless multiple aliases for that motion are created.

There are two special attributes null and still. The null attribute means that no exclusive expression file should be applied, giving the character's default expression. The still motion stops all motion.

Nonexclusive expressions persist until removed with attribute negation:

show hiyori -wave
Scalinglink
Many Live2D models are defined at high resolutions, at least in the internal coordinate system that the models use. To compensate for this, Ren'Py includes two ways to scale down the Live2D model.

The first is the zoom argument. This can directly set the zoom factor of the model. If zoom is used, then the other scaling parameters are ignored.

Otherwise, the top, base, and height arguments are used. The first two specify two lines, relative to the top and bottom of the image. (As elsewhere in Ren'Py, 0.0 is the top and 1.0 is the bottom.) When these arguments are used, two things happen:

The image is scaled so that the area between top and base takes up height, where height is a fraction of the screen.

The anchor is adjusted so that base will be placed at the bottom of the screen.

When figuring out how to scale a Live2D animation, what I do first is adjust the base parameter until the right part of the animation is lined up with the bottom of the screen. Then:

If the image is too big, reduce height until it's the right size.

If the image is too small, increase top to reduce the amount of blank space above the animation.

Motion Fadinglink
Ren'Py's support for Live2D includes motion fading. Normally, when Ren'Py changes from one animation to another, the transition is abrupt - one animation is stopped, and the other starts. If a transition occurs, both animations are played at the same time.

Live2D supports a different model, in which the old animation can be smoothly faded into the new one, but interpolating the parameters. Think of this like a character moving their arms into position, rather than dissolving from one position to another.

Motion fading is controlled with the fade argument. If it's true, motion fading is used, and if it's false, then abrupt changes occur. If None, motion fading is controlled by the _live2d_fade variable:

_live2d_fade = Truelink
If true, Live2D animations use motion fading. If False, animations are transitioned abruptly.

Aliasinglink
The alias parameter lets you specify your own names for the motions that would otherwise be automatically defined. For example, one could do:

image hiyori = Live2D("Resources/Hiyori", base=.6, aliases={"idle" : "m01"})
To be able to use:

show hiyori idle
Instead of:

show hiyori m01
Loop and Image Predictionlink
Ren'Py's Live2D support can loop the final animation if the loop parameter is set to True. If the animation is being looped, it is important to add greater than .2 second pauses that Ren'Py can exploit to perform expensive image prediction. (This may not be necessary if image prediction and loading can happen at other times.)

Functionslink
renpy.has_live2d()link
Returns True if Live2d is supported on the current platform, and False otherwise.

