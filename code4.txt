abels & Control Flowlink
Label Statementlink
Label statements allow the given name to be assigned to a program point. They exist solely to be called or jumped to, either from Ren'Py script, Python functions, or from screens.

label sample1:
    "Here is 'sample1' label."

label sample2(a="default"):
    "Here is 'sample2' label."
    "a = [a]"
A label statement may have a block associated with it. In that case, control enters the block whenever the label statement is reached, and proceeds with the statement after the label statement whenever the end of the block is reached.

There are two kinds of labels: global and local labels. Global labels live in one global scope shared across all project files and thus should have unique names per game. A local label on the other hand refer to a global label, so several local labels in the game can have the same name, provided they are related to different global labels. To declare a local label, prefix its name with a period ., and put it under a global label which it will belong to. For example:

label global_label:
    "Inside a global label.."
label .local_label:
    "..resides a local one."
    jump .another_local
label .another_local:
    "And another !"
    jump .local_label
Local labels can be referenced directly inside the same global label they are declared in, or by their full name, consisting of global and local name parts:

label another_global:
    "Now lets jump inside a local label located somewhere else."
    jump global_label.local_name
The label statement may take an optional list of parameters. These parameters are processed as described in PEP 570, with two exceptions:

The values of default parameters are evaluated at call time.

The variables are dynamically, rather than lexically, scoped.

When a variable is dynamically scoped, its value lasts until a return statement following the label. It doesn't generally make sense to have a label with parameters that is reached by a jump or a previous statement. For an example of labels with parameters, see the call statement.

Jump Statementlink
The jump statement is used to transfer control to the given label.

If the expression keyword is present, the expression following it is evaluated, and the string so computed is used as the label name of the statement to jump to. If the expression keyword is not present, the label name of the statement to jump to must be explicitly given.

Unlike call, jump does not push the next statement onto a stack. As a result, there's no way to return to where you've jumped from.

label loop_start:

    e "Oh no! It looks like we're trapped in an infinite loop."

    jump loop_start
Call Statementlink
The call statement is used to transfer control to the given label. It also pushes the next statement onto the call stack, allowing the return statement to return control to the statement following the call.

If the expression keyword is present, the expression following it is evaluated, and the string so computed is used as the name of the label to call. If the expression keyword is not present, the name of the statement to call must be explicitly given.

If the optional from clause is present, it has the effect of including a label statement with the given name as the statement immediately following the call statement. An explicit label helps to ensure that saved games with return stacks can return to the proper place when loaded on a changed script.

The call statement may take arguments, which are processed as described in PEP 448.

When using a call expression with an arguments list, the pass keyword must be inserted between the expression and the arguments list. Otherwise, the arguments list will be parsed as part of the expression, not as part of the call.

label start:

    e "First, we will call a subroutine."

    call subroutine

    call subroutine(2)

    call expression "sub" + "routine" pass (count=3)

    return

# ...

label subroutine(count=1):

    e "I came here [count] time(s)."
    e "Next, we will return from the subroutine."

    return
Warning

Publishing a game without from clauses for each call statement is dangerous, if you intend to publish updates of the game later on. If no such clauses are added, and if you edit the file containing the call instruction, there is a potential risk for saves made inside the called label to become broken.

Using the "Add from clauses to calls" option when building a game's distribution can solve that issue.

Return Statementlink
The return statement pops the top statement off of the call stack, and transfers control to it. If the call stack is empty, the return statement restarts Ren'Py, returning control to the main menu.

If the optional expression is given to return, it is evaluated, and it's result is stored in the _return variable. This variable is dynamically scoped to each context.

Special Labelslink
The following labels are used by Ren'Py:

start
By default, Ren'Py jumps to this label when the game starts.

quit
If it exists, this label is called in a new context when the user quits the game.

after_load
If it exists, this label is called when a game is loaded. It can be use to fix data when the game is updated. If data is changed by this label, renpy.block_rollback() should be called to prevent those changes from being reverted inf the player rolls back past the load point.

splashscreen
If it exists, this label is called when the game is first run, before showing the main menu. Please see Adding a Splashscreen.

before_main_menu
If it exists, this label is called before the main menu. It is used in rare cases to set up the main menu, for example by starting a movie playing in the background.

main_menu
If it exists, this label is called instead of the main menu. If it returns, Ren'Py will start the game at the start label. For example, the following will immediately start the game without displaying the main menu.

label main_menu:
    return
after_warp
If it is existed, this label is called after a warp but before the warped-to statement executes. Please see Warping to a line.

hide_windows
If it exists, this label is called when the player hides the windows with the right mouse button or the H key. If this returns true, the hide is cancelled (it's assumed the hide has occurred). Otherwise, the hide continues.

Labels & Control Flow Functionslink
renpy.call_stack_depth()link
Returns the depth of the call stack of the current context - the number of calls that have run without being returned from or popped from the call stack.

renpy.dynamic(*variables, **kwargs)link
This can be given one or more variable names as arguments. This makes the variables dynamically scoped to the current call. When the call returns, the variables will be reset to the value they had when this function was called.

If the variables are given as keyword arguments, the value of the argument is assigned to the variable name.

Example calls are:

$ renpy.dynamic("x", "y", "z")
$ renpy.dynamic(players=2, score=0)
renpy.get_all_labels()link
Returns the set of all labels defined in the program, including labels defined for internal use in the libraries.

renpy.get_return_stack()link
Returns a list giving the current return stack. The return stack is a list of statement names.

The statement names will be strings (for labels), or opaque tuples (for non-label statements).

renpy.has_label(name)link
Returns true if name is a valid label in the program, or false otherwise.

name
Should be a string to check for the existence of a label. It can also be an opaque tuple giving the name of a non-label statement.

renpy.mark_label_seen(label)link
Marks the named label as if it has been already executed on the current user's system.

renpy.mark_label_unseen(label)link
Marks the named label as if it has not been executed on the current user's system yet.

renpy.pop_call()link
Pops the current call from the call stack, without returning to the location.

This can be used if a label that is called decides not to return to its caller.

renpy.seen_label(label)link
Returns true if the named label has executed at least once on the current user's system, and false otherwise. This can be used to unlock scene galleries, for example.

renpy.set_return_stack(stack)link
Sets the current return stack. The return stack is a list of statement names.

Statement names may be strings (for labels) or opaque tuples (for non-label statements).

Contextslink
renpy.call_in_new_context(label, *args, **kwargs)link
This creates a new context, and then starts executing Ren'Py script from the given label in that context. Rollback is disabled in the new context, and saving/loading will occur in the top level context.

Use this to begin a second interaction with the user while inside an interaction.

renpy.context()link
Returns an object that is unique to the current context. The object is copied when entering a new context, but changes to the copy do not change the original.

The object is saved and participates in rollback.

renpy.context_dynamic(*variables)link
This can be given one or more variable names as arguments. This makes the variables dynamically scoped to the current context. The variables will be reset to their original value when the call returns.

An example call is:

$ renpy.context_dynamic("x", "y", "z")
renpy.context_nesting_level()link
Returns the nesting level of the current context. This is 0 for the outermost context (the context that is saved, loaded, and rolled-back), and is non-zero in other contexts, such as menu and replay contexts.

renpy.invoke_in_new_context(callable, *args, **kwargs)link
This function creates a new context, and invokes the given Python callable (function) in that context. When the function returns or raises an exception, control returns to the the original context. It's generally used to call a Python function that needs to display information to the player (like a confirmation prompt) from inside an event handler.

A context maintains the state of the display (including what screens and images are being shown) and the audio system. Both are restored when the context returns.

Additional arguments and keyword arguments are passed to the callable.

A context created with this function cannot execute Ren'Py script. Functions that would change the flow of Ren'Py script, like renpy.jump(), are handled by the outer context. If you want to call Ren'Py script rather than a Python function, use renpy.call_in_new_context() instead.

renpy.jump_out_of_context(label)link
Causes control to leave the current context, and then to be transferred in the parent context to the given label.

Styleslink
Styles allow the look of Displayables to be customized, by changing the value of style properties. For example, changing the background property to change the background of a window or button.

Style properties can be prefixed by identifiers specifying when the property is used. For example, a button's hover_background property is used when it is focused, while its idle_background property is used when it is not. (Setting the background property sets both the idle_background and hover_background, among others.)

While Ren'Py has over 100 style properties, only a few of them are used in this section.

Using Styles and Style Inheritancelink
Each displayable has a style built into it. When the displayable is created, either directly or using the screen system, style properties can be supplied, which are used to update the look of the displayable. In the following example:

image big hello world = Text("Hello, World", size=40)
the size property is supplied to a Text displayable, allowing us to change its text size. This will customize the look of the text displayable by displaying the text 40 pixels high (though this also depends on the font).

Similarly, when using Screen Language, each user interface statement takes relevant style properties:

screen big_hello_world:
    text "Hello, World" size 40
Individual styles exist to gather properties so they can be applied to displayables together. For example, these two texts will appear the same:

image big one = Text("Hello, World", size=40, color="#f00")
image big two = Text("Hello, World", style="big_red")

style big_red:
    size 40
    color "#f00"
Each style has a set of properties, and one parent. When a given style is applied to a given displayable, each style property (among those taken by the displayable) will be looked for among the style's properties. If it's not found, it is searched in the parent style, and then in the parent's parent, and so on.

Each displayable takes a property named style, which applies the said style to the displayable:

image big hello world = Text("Hello World", style="big")

screen hello_world:
    text "Hello, World" style "big"
When no style property is given, a parent is chosen based on the kind of displayable that has been supplied. For example, buttons (including imagebuttons and textbuttons) default to the "button" style, grids to the "grid" style, and so on. The parent choice can be influenced by the style_prefix property of user interface statements in the screen language.

When a style is defined without a parent being specified, a default parent is chosen for the style. If the style contains an underscore (_) in its name, the parent is named by removing everything up to and including the first underscore. When a style that does not exist is used, and the style has an underscore in its name, Ren'Py will create it using the default parent. For example, a style named my_button will inherit from button. This inheritance can be changed using the style statement or using methods of the Style class. Otherwise, the style named "default" is used.

Style names beginning with an underscore are reserved for Ren'Py use.

As Ren'Py builds styles on startup, named styles should not be changed after the Init Phase.

During development, the Shift+I Style Inspecting can be very useful to check what styles and style properties are being used by a displayable.

Defining Styles: Style Statementlink
The preferred way to define styles is through the style statement:

style my_text is text:
    size 40
    font "gentium.ttf"
If a style does not exist, the style statement creates it. Otherwise, the existing style is modified by the style statement.

Note

Unlike other statements such as screen, transform or image, the style statement is not unique for a given name: several statements can refer to the same style and alter it successively, sometimes in a concurrent or contradictory way. In such cases, the init times at which the different style statements occur greatly matter over the final result.

A style statement begins with the keyword style and the name of the style to define. This is followed on the first line by zero or more clauses, and an optional colon.

If the colon is present, a block must follow. Each line of the block should contain one ore more clauses. Otherwise, the statement is complete.

The style statement accepts the following clauses:

style-property simple-expression
Assigns the value of the simple expression to the given style property.

is parent
Sets or replaces the parent of this style. The parent must be a word giving the name of a style.

clear
Removes all properties of this style that were assigned before this style statement was run. This does not prevent the style from inheriting property values from its parents, and does not change its parent. To clear the parent of a style, use is default instead.

take style-name
Clears all properties of this style that were assigned before this style statement was run, and replaces them with the properties of the named style. This does not change the parent of this style.

variant simple-expression
Evaluates the simple expression, to yield a string or list of strings, which are interpreted as screen variants. If at least one of the variants given is active, the style statement is run, otherwise the rest of the block is ignored.

properties simple-expression
Evaluates the simple expression to get a dictionary. The dictionary is expected to map style properties to values, and the values are assigned as if they were provided to the style statement.

Examples of style statements are:

# Creates a new style, inheriting from default.
style big_red:
    size 40

# Updates the style.
style big_red color "#f00"

# Takes the properties of label_text from big_red, but only if we're
# on a touch system.

style label_text:
    variant "touch"
    take big_red

# Style a has all the properties of style c, except that when not present
# in c, the properties are taken from b or b's parents.
style a is b:
    take c
Style statements are always run at init time.

Defining Styles: Pythonlink
Named styles exists as fields on the global style object. To create a new style, create an instance of the Style class, and assign it to a field on the style object:

init python:
    style.big_red = Style(style.default)
Style properties can be set by assigning to properties-like fields of the Style objects.

init python:
    style.big_red.color = "#f00"
    style.big_red.size = 42
However, the value of a style property cannot be accessed this way, it can only be written.

classStyle(parent)link
parent
The styles parent. This can be another Style object, or a string.

clear()link
This removes all style properties from this object. Values will be inherited from this object's parent.

The equivalent of the clear clause in a style statement.

set_parent(parent)link
Sets the parent of this style object to parent, which can be another Style object or a string.

The equivalent of the is clause in a style statement.

take(other)link
This takes all style properties from other, which can be another Style object or a string.

The equivalent of the take clause in a style statement.

Indexed Styleslink
Indexed styles are lightweight styles that can be used to customize the look of a displayable based on the data supplied to that displayable. An index style is created by indexing an existing Style object with a string or integer. If the indexed style does not exist, indexing creates it as a child of the original Style object.

init python:
    style.button["Foo"].background = "#f00"
    style.button["Bar"].background = "#00f"
screen indexed_style_test:
    vbox:
        textbutton "Foo" style style.button["Foo"]
        textbutton "Bar" style style.button["Bar"]
Style Preferenceslink
Note

GUI Preferences may often provide a better way of accomplishing the same thing, as a gui preference can change a variable used in multiple styles.

It's often desirable to allow the user to customize aspects of the user interface that are best expressed as styles. For example, a creator may want to give players the ability to adjust the look, color and size of the text. Style preferences allow for this customization.

A style preference is a preference controlling one or more style properties. A style preference has a name and one or more alternatives. At any given time, one of the available alternatives is selected, and saved in the persistent data. It defaults to the first registered alternative.

An alternative contains one or more associations of style, property, and value for that property. It represents a promise that when the alternative gets selected, that property on that style will be assigned that value. This occurs when Ren'Py first initializes, and then whenever a new alternative is selected.

One should ensure that every alternative for a given style preference updates the same set of styles and properties. Otherwise, the result will not be deterministic as going from one alternative to another and going back to the first one will leave some properties set as they are in the second alternative.

Here's an example of registering a style property that allows the user to choose between large, simple text, and smaller outlined text.

init python:
    # The "decorated" alternative of the "text" preference will set the size to 22 on the "say_dialogue" style.
    renpy.register_style_preference("text", "decorated", style.say_dialogue, "size", 22)
    renpy.register_style_preference("text", "decorated", style.say_dialogue, "outlines", [ (1, "#000", 0, 0) ])

    renpy.register_style_preference("text", "large", style.say_dialogue, "size", 24)
    renpy.register_style_preference("text", "large", style.say_dialogue, "outlines", [ ])

    # The "decorated" alternative will be the default one for the "text" preference since it was registered first.
The following allows the user to select these alternatives using buttons:

textbutton "Decorated" action StylePreference("text", "decorated")
textbutton "Large" action StylePreference("text", "large")
StylePreference(preference, alternative)link
An action that causes alternative to become the selected alternative for the given style preference.

preference
A string giving the name of the style preference.

alternative
A string giving the name of the alternative.

renpy.get_style_preference(preference)link
Returns a string giving the name of the selected alternative for the named style preference.

preference
A string giving the name of the style preference.

renpy.register_style_preference(preference, alternative, style, property, value)link
Registers information about an alternative for a style preference.

preference
A string, the name of the style preference.

alternative
A string, the name of the alternative.

style
The style that will be updated. This may be a style object or a string giving the style name.

property
A string giving the name of the style property that will be update.

value
The value that will be assigned to the style property.

renpy.set_style_preference(preference, alternative)link
Sets the selected alternative for the style preference.

preference
A string giving the name of the style preference.

alternative
A string giving the name of the alternative.

Other Style Functionslink
style.rebuild()link
This causes named styles to be rebuilt, allowing styles to be changed after the init phase has finished.

Warning

Named styles are not saved as part of the per-game data. This means that changes to them will not be persisted through a save and load cycle.

Style Propertieslink
The style properties associated with styles control how Displayables are shown. Style properties can be either given without a prefix, in which case they apply to all states of the displayable, or with a prefix that limits the property to a limited number of states.

Style Property Prefixeslink
Applying a prefix to a style property indicates allows a displayable to change it's look in response to its focus or selection status. For example, a button can change its color when the mouse hovers above it, or to indicate when the choice represented by the button is the currently selected one.

There are five states a displayable can be it.

insensitive
Used when the user cannot interact with the displayable.

idle
Used when the displayable is neither focused nor selected.

hover
Used when the displayable is focused, but not selected.

selected_idle
Used when the displayable is not focused, and is selected.

selected_hover
Used when the displayable is focused and selected.

Button and Bar displayables (and their variants) update their state, and the state of their children, in response to events. For example, when the user puts his mouse over an unselected button, it and all its children will be put into the hover state.

Style property prefixes allow one to set style properties for the different states. There is a system of implications set up, so that a prefix can imply setting the property for more than one state.

The implications are:

prefix

states implied by prefix

(no prefix)

insensitive, idle, hover, selected_idle, selected_hover

idle_

idle, selected_idle

hover_

hover, selected_hover

selected_

selected_idle, selected_hover

insensitive_

insensitive

selected_idle_

selected_idle

selected_hover_

selected_hover

selected_insensitive_

selected_insensitive

Using a text button, we can show this in action. Text buttons use two styles by default: button for the button itself, and button_text for the text inside the button. The background style property sets the background of a button, while the color property sets the color of text.:

# The button background is gray when insensitive, light
# blue when hovered, and dark blue otherwise.
style button:
    background "#006"
    insensitive_background "#444"
    hover_background "#00a"

# The button text is yellow when selected, and white
# otherwise.
style button_text:
    color "#fff"
    selected_color "#ff0"
Style Property Valueslink
Each style property expects a specific kind of data. Many of these are standard Python types, but a few are novel. Here are descriptions of the novel kinds of value a style property can expect.

position
Positions are used to specify locations relative to the upper-left corner of the containing area. (For positions, the containing area is given by the layout the displayable is in, if one is given, or the screen otherwise. For anchors, the containing area is the size of the displayable itself.)

The way a position value is interpreted depends on the type of the value:

int (like 0, 1, 37, or 42)
An integer is interpreted as the number of pixels from the left or top side of the containing area.

float (like 0.0, 0.5, or 1.0)
A floating-point number is interpreted as a fraction of the containing area. For example, 0.5 is a point halfway between the sides of the containing area, while 1.0 is on the right or bottom side.

absolute (like absolute(100.25))
An absolute number is interpreted as the number of pixels from the left or top side of the screen, when using subpixel-precise rendering.

displayable
Any displayable. If a displayable contains a "[prefix_]" substitution, a prefix search is performed as described below.

color
Colors in Ren'Py can be expressed as strings beginning with the hash mark (#), followed by a hex triple or hex quadruple, with each of the three or four elements consisting of a one or two hexadecimal character color code.

In a triple, the components represent red, green, and blue. In a quadruple, the components represent red, green, blue, and alpha. For example:

"#f00" and "#ff0000" represent an opaque red color.

"#0f08" and #00ff0080" represent a semi-transparent green color.

The color triples are the same as used in HTML.

Colors can also be represented as a 4-component tuple, with the 4 components being integers between 0 and 255. The components correspond to red, green, blue, and alpha, in that order.

(0, 0, 255, 255) represents an opaque blue color.

Finally, colors can be an instance of Color.

Style Prefix Searchlink
When a style property contains the "[prefix_]" substitution, a prefix search is performed. The prefix search is performed separately for each state, including states that are implied by the original property assigned.

For example, if we have:

style button:
    hover_background "[prefix_]background.png"
separate searches are performed for the hover and selected_hover states. The prefixes searched vary based on the state.

state

search order

idle

"idle_", ""

hover

"hover_", "",

insensitive

"insensitive_", "", "idle_"

selected_idle

"selected_idle_", "idle_", "selected_", ""

selected_hover

"selected_hover_", "hover_", "selected_", ""

selected_insensitive

"selected_insensitive_", "hover_", "selected_", "", "selected_idle_", "idle_"

When a search is performed, each prefix is tried in the order given. The string has "[prefix_]" replaced with the prefix, and then Ren'Py checks to see if a loadable file or image with that name exists. If the file or image exists, the search stops and the displayable found is used. Otherwise, it proceeds to the next prefix.

The style prefix is passed through displayables that do not take user input, including containers, transforms, and frames.

As an example of how this can be used, if the files "idle_button.png" and "hover_button.png" exist (and no other files ending in "button.png" do):

style button:
    background "[prefix_]button.png"
is equivalent to:

style button:
    idle_background "idle_button.png"
    hover_background "hover_button.png"
    insensitive_background "idle_button.png"

    selected_idle_background "idle_button.png"
    selected_hover_background "hover_button.png"
    selected_insensitive_background "idle_button.png"
List of All Style Propertieslink
The style properties control the look of the various displayables. Not all style properties apply to all displayables, so we've divided them up into groups.

Position Style Propertieslink
These properties apply to all displayables, and mostly control the position of a displayable inside the area allocated to it by a layout, or on the screen when not inside a layout.

alt -  string or Nonelink
Alternative text used for the displayable when self-voicing is enabled. See the self voicing section for more information.

xpos -  positionlink
The position of the displayable relative to the left side of the containing area.

ypos -  positionlink
The position of the displayable relative to the top side of the containing area.

pos -  tuple of (position, position)link
Equivalent to setting xpos to the first component of the tuple, and ypos to the second component of the tuple.

xanchor -  positionlink
The position of the anchor relative to the left side of the displayable.

yanchor -  positionlink
The position of the anchor relative to the top side of the displayable.

If the displayable is a Text(), then there is one special value of this property. If the property is set to renpy.BASELINE, the anchor is set to the baseline of the first line of text.

anchor -  tuple of (position, position)link
Equivalent to setting xanchor to the first component of the tuple, and yanchor to the second component of the tuple.

xalign -  floatlink
Equivalent to setting xpos and xanchor to the same value. This has the effect of placing the displayable at a relative location on the screen, with 0.0 being the left side, 0.5 the center, and 1.0 being the right side.

yalign -  floatlink
Equivalent to setting ypos and yanchor to the same value. This has the effect of placing the displayable at a relative location on the screen, with 0.0 being the top, 0.5 the center, and 1.0 the bottom.

align -  tuple of (float, float)link
Equivalent to setting xalign to the first component of the tuple, and yalign to the second.

xcenter -  positionlink
Equivalent to setting xpos to the value of this property, and xanchor to 0.5.

ycenter -  positionlink
Equivalent to setting ypos to the value of this property, and yanchor to 0.5.

xycenter -  tuple of (position, position)link
Equivalent to setting xcenter to the first component of the tuple, and ycenter to the second.

xoffset -  intlink
Gives a number of pixels that are added to the horizontal position computed using xpos and xalign.

yoffset -  intlink
Gives a number of pixels that are added to the vertical position computed using ypos and yalign.

offset -  tuple of (int, int)link
Equivalent to setting xoffset to the first component of the tuple, and yoffset to the second component of the tuple.

xmaximum -  intlink
Specifies the maximum horizontal size of the displayable, in pixels.

ymaximum -  intlink
Specifies the maximum vertical size of the displayable in pixels.

maximum -  tuple of (int, int)link
Equivalent to setting xmaximum to the first component of the tuple, and ymaximum to the second.

xminimum -  intlink
Sets the minimum width of the displayable, in pixels. Only works with displayables that can vary their size.

yminimum -  intlink
Sets the minimum height of the displayables, in pixels. Only works with displayables that can vary their size.

minimum -  tuple of (int, int)link
Equivalent to setting xminimum to the first component of the tuple, and yminimum to the second.

xsize -  int or floatlink
Equivalent to setting xminimum and xmaximum to the same value. This has the effect of setting the width of the displayable. f the size is a float, it's relative to the width of the containing area.

ysize -  int or floatlink
Equivalent to setting yminimum and ymaximum to the same value. This has the effect of setting the height of the displayable. If the size is a float, it's relative to the height of the containing area.

xysize -  tuple of (int or float, int or float)link
Equivalent to setting xsize to the first component of the tuple, and ysize to the second component.

xfill -  booleanlink
If true, the displayable will expand to fill all available horizontal space. If not true, it will only be large enough to contain its children.

This only works for displayables that can change size.

yfill -  booleanlink
If true, the displayable will expand to fill all available vertical space. If not true, it will only be large enough to contain its children.

This only works for displayables that can change size.

area -  tuple of (int, int, int, int)link
The tuple is interpreted as (xpos, ypos, width, height). Attempts to position the displayable such that it's upper-left corner is at xpos and ypos, and its size is width and height.

It does this by setting the xpos, ypos, xanchor, yanchor, xmaximum, ymaximum, xminimum, yminimum, xfill, and yfill properties to appropriate values.

This will not work with all displayables and all layouts.

mipmap -  boolean or Nonelink
This controls if textures created by this displayable are mipmapped. This applies only to certain displayables, including Text(), Movie(), and dissolves.

If None, the default for this is taken from config variables such as config.mipmap_text, config.mipmap_movies, and config.mipmap_dissolves.

Text Style Propertieslink
antialias -  booleanlink
If True, the default, TrueType font text will be rendered anti-aliased.

adjust_spacing -  boolean or strlink
If True, Ren'Py will adjust the spacing of drawable-resolution text to match the spacing of the text rendered at virtual resolution, to ensure the size of frames and other containers holding text does not change.

When set to False, text will not change in size, but it is the creator's responsibility to ensure there is enough space to layout text at any window size.

When set to the string "horizontal", text will adjust in the horizontal direction only. When set to the string "vertical", text will adjust in the vertical direction only.

Defaults to True for most text, but False for text in an input.

altruby_style -  style or Nonelink
If not None, this should be a style object. The style that's used for alternate ruby text.

black_color -  colorlink
When rendering an image-based font, black will be mapped to this color. This has no effect for TrueType fonts.

bold -  booleanlink
If True, render the font in a bold style. For a TrueType font, this usually involves synthetically increasing the font weight. It can also cause the font to be remapped, using config.font_replacement_map.

caret -  displayable or Nonelink
If not None, this should be a displayable. The input widget will use this as the caret at the end of the text. If None, a 1 pixel wide blinking line is used as the caret.

color -  colorlink
The color the text is rendered in. When using a TrueType font, the font is rendered in this color. When using an image-based font, white is mapped to this color.

first_indent -  intlink
The amount that the first line of text in a paragraph is indented by, in pixels.

font -  stringlink
A string giving the name of the font used to render text.

For a TrueType font file, this is usually the name of the file containing the font (like "DejaVuSans.ttf"). To select a second font in a collection, this can be prefixed with a number and at sign (like "0@font.ttc" or "1@font.ttc"). For an image-based font, this should be the name used to register the font.

size -  intlink
The size of the font on the screen. While this is nominally in pixels, font files may have creative interpretations of this value.

italic -  booleanlink
If true, the text will be rendered in italics. For a TrueType font, this usually involves synthetically increasing the font slant. It can also cause the font to be remapped, using config.font_replacement_map.

justify -  booleanlink
If True, additional whitespace is inserted between words so that the left and right margins of each line are even. This is not performed on the last line of a paragraph.

kerning -  floatlink
A kerning adjustment, the number of pixels of space that's added between each pair of characters. (This can be negative to remove space between characters.)

language -  stringlink
Controls the language family used to break text into lines, and for certain other text transformations. Legal values are:

"unicode" (default)
Uses the Unicode linebreaking algorithm, which is suitable for most languages.

"japanese-strict"
Formats Japanese text in a "strict" manner. It forbids breaks before small kana and prolonged sound marks.

"japanese-normal"
Formats Japanese text in a "normal" manner. It allows breaks before small kana, prolonged sound marks, and certain hyphens.

"japanese-loose"
Formats Japanese text in a "loose" manner. It allows breaks before small kana , prolonged sound marks, iteration marks, inseparable characters, centered punctuation marks, and postfixes; and allows breaks before prefixes.

"korean-with-spaces"
Used for Korean text delimited by whitespace. This prevents linebreaking between adjacent Korean characters.

"thaic90"
Used for Thai text displayed in fonts that support the C90 encoding for Thai. This combines groups of characters into single glyphs, allowing for better display of vowel and tone marks. Line breaking uses the unicode algorithm.

"western"
Allows breaking only at whitespace. Suitable for most languages.

"anywhere"
Allows breaking at anywhere without ruby.

The three Japanese breaking modes are taken from the CSS3 text module.

layout -  stringlink
Controls how words are allocated to lines. Legal values are:

"tex" (default)
Uses the Knuth-Plass linebreaking algorithm, which attempts to minimize the difference in line lengths of all but the last line.

"subtitle"
Uses the Knuth-Plass linebreaking algorithm, but attempts to even out the lengths of all lines.

"greedy"
A word is placed on the first line that has room for it.

"nobreak"
Do not line-break.

line_leading -  intlink
The number of pixels of spacing to include above each line.

line_overlap_split -  intlink
When in slow text mode, and two lines overlap, this many pixels of the overlap are allocated to the top line. Increase this if the bottoms of characters on the top line are clipped.

line_spacing -  intlink
The number of pixels of spacing to include below each line.

min_width -  intlink
Sets the minimum width of each line of that. If a line is shorter than this, it is padded to this length, with textalign used to specify where such padding is placed.

newline_indent -  booleanlink
If true, the first_indent indentation is used after each newline in a string. Otherwise, the rest_indent indentation is used.

outlines -  list of tuple of (int, color, int, int)link
This is a list of outlines that are drawn behind the text. Each tuple specifies an outline, and outlines are drawn from back to front.

The list contains (size, color, xoffset, yoffset) tuples. size is the amount the font is expanded by, in pixels. color is the color of the outline. xoffset and yoffset are the amount the outline is shifted by, in pixels.

The outline functionality can also be used to give drop-shadows to fonts, by specifying a size of 0 and non-zero offsets.

By default, size, xoffset and yoffset are scaled with the text. When given as the absolute type, they are not scaled. For example:

style default:
    outlines [ (absolute(1), "#000", absolute(0), absolute(0)) ]
will always produce a 1 pixel-wide border.

Outlines only work with TrueType fonts. Outlines only work when applied to an entire Text displayable. They do not work when applied to a hyperlink, text tag, or other method that applies to only a portion of the text.

outline_scaling -  stringlink
This determines how outline sizes and offsets are scaled when the window is scaled.

"linear"
The default, best for text with thick outlines. The window scaling factor is applied to the outline size, and then rounded to an integer. This looks better for thick outlines, but concentric outlines of similar thickness may become indistinguishable.

The resulting width is always at least 1 pixel.

"step"
Best for text that uses thin outlines and text that uses multiple outlines. The window scaling factor is rounded down to an integer and applied to the outline size and offsets. This ensures that multiple outlines all scale together, without risk of eclipsing one another, but this yields different visual results depending on the size of the game window.

The window scaling factor is always above 1.

rest_indent -  intlink
Specifies the number of pixels the second and later lines in a paragraph are indented by.

ruby_style -  style or Nonelink
If not None, this should be a style object. The style that's used for ruby text.

slow_abortable -  booleanlink
If True, a click that reaches the Text object will cause the slow text to abort, which means that the rest of the slow text will be displayed instantly.

slow_cps -  int or Truelink
If a number, shows text at the rate of that many characters per second. If True, shows text at the speed taken from the "Text Speed" preference.

slow_cps_multiplier -  floatlink
The speed of the text is multiplied by this number. This can be used to have a character that speaks at a faster-than-normal rate of speed.

strikethrough -  booleanlink
If True, a line is drawn through the text.

textalign -  floatlink
This is used when a line is shorter than the width of the text displayable. It determines how much of the extra space is placed on the left side of the text. (And hence, the text alignment.)

0.0 will yield left-aligned text, 0.5 centered text, and 1.0 right-aligned text.

underline -  booleanlink
If True, an underline will be added to the text.

hyperlink_functions -  tuple of (function, function, function)link
This is a tuple of three functions relating to hyperlinks in text.

The first item is the hyperlink style function. When called with a single argument, the argument of the hyperlink, it must return a style object to use for the hyperlink, such as style.hyperlink_text. Note that a style object is not a string.

The second item is the hyperlink clicked function. This function is called when a hyperlink is chosen by the user. If it returns a value other than None, the interaction returns that value.

The third item is the hyperlink focus function. This function is called with the argument of the hyperlink when the hyperlink gains focus, and with None when it loses focus. If it returns a value other than None, the interaction returns that value.

vertical -  booleanlink
If True, the text will be rendered vertically.

hinting -  strlink
Controls how the font will be hinted. This should be one of the following strings:

"auto"
The default, forces use of the Freetype auto hinter.

"bytecode"
Uses bytecode hinting information found in the font.

"none"
Does not hint the font.

Window Style Propertieslink
Window properties are used to specify the look of windows, frames, and buttons. Margin Style Properties also form part of this group.

background -  displayable or Nonelink
A displayable that is used as the background of the window. This is often a Frame(), allowing the size of the background to scale with the size of the window.

If None, no background is drawn, but other properties function as if the background was present.

foreground -  displayable or Nonelink
If not None, this displayable is drawn above the contents of the window.

left_padding -  intlink
The amount of space between the background and the left side of the window content, in pixels.

right_padding -  intlink
The amount of space between the background and the right side of the window content, in pixels.

xpadding -  intlink
Equivalent to setting left_padding and right_padding to the same value.

top_padding -  intlink
The amount of space between the background and the top side of the window content, in pixels.

bottom_padding -  intlink
The amount of space between the background and the bottom side of the window content, in pixels.

ypadding -  intlink
Equivalent to setting top_padding and bottom_padding to the same value.

padding -  tuplelink
When given a two-item tuple, equivalent to setting xpadding and ypadding to the two items. When given a four-item tuple, equivalent to setting left_padding, top_padding, right_padding, and bottom_padding to the four items.

size_group -  string or Nonelink
If not None, this should be a string. Ren'Py will render all windows with the same size_group value at the same size.

modal -  boolean or callablelink
If True, the window is treated as modal. Events will stop propagating through layers while the mouse is within the window or button. If False, the window is not modal.

This may also be a callable function. If it is, the function is called with (ev, x, y, w, h), where ev is either a pygame event, or None to represent a generic mouse event; x and y are coordinates relative to the window, and w and h are the height and width of the window. If the callable returns true, the windows is treated as modal. If it returns false, it is not.

Button Style Propertieslink
child -  displayable or Nonelink
If not None, this gives a displayable that replaces the child of the button. For example, this (as insensitive_child) can be used to replace the contents of an insensitive button with an image that indicates the button is locked.

hover_sound -  stringlink
A sound that is played when the button gains focus.

activate_sound -  stringlink
A sound that is played when the button is activated (clicked). This is also played when a bar or drag is activated.

mouse -  stringlink
The mouse style that is used when the button is focused. This should be one of the styles in config.mouse.

focus_mask -  multiplelink
A mask that's used to control what portions of the button can be focused, and hence clicked on. The type of this property determines how it is interpreted.

Displayable
The areas of the displayable that are not transparent cause the button to be focused.

True
The button itself is used as the displayable (so non-transparent areas of the button cause the button to be focused).

callable
If a non-displayable callable (like a function, method, or object with a __call__ method) is given, the function is called with two arguments, the x and y offset from the top-left corner of the displayable.

If the function returns a callable when called with two arguments, that callable is called with four arguments - the x and y offsets, and the width and height of the displayable.

If the function returns true, the displayable is focused.

None
If none is given, the entire button can be focused.

keyboard_focus -  booleanlink
If True, the default, this button can be focused using the keyboard focus mechanism, if it can be focused at all. If False, the keyboard focus mechanism will skip this button. (The keyboard focus mechanism is used by keyboards and keyboard-like devices, such as joypads.)

key_events -  booleanlink
If True, keyboard-generated events are passed to the children of this button. If False, those events are not propagated. In this default style, this is set to True while the button is hovered, and False otherwise.

Setting this to True can be used to propagate keyboard events to an input inside a button, even when the button isn't focused.

Bar Style Propertieslink
Bars are drawn with gutters on the left and right, that when clicked can cause the bar to move by a small amount. The remaining space is the portion of the bar that can change, with the amount on each side proportional to the bar's value as a fraction of the range.

The thumb is an area in the center of the bar that can be dragged by the user.

When a bar is drawn, the thumb's shadow is drawn first. Then the left/bottom and right/top sides of the bar, followed by the thumb itself.

Note that the valid sides of a bar depend on the value of the bar_vertical property. If it's True, the top and bottom sides are relevant. Otherwise, the left and right sides are used.

bar_vertical -  booleanlink
If True, the bar has a vertical orientation. If False, it has a horizontal orientation.

bar_invert -  booleanlink
If True, the value of the bar is represented on the right/top side of the bar, rather than the left/bottom side.

bar_resizing -  booleanlink
If True, we resize the sides of the bar. If False, we render the sides of the bar at full size, and then crop them.

left_gutter -  intlink
The size of the gutter on the left side of the bar, in pixels.

right_gutter -  intlink
The size of the gutter on the right side of the bar, in pixels.

top_gutter -  intlink
The size of the gutter on the top side of the bar, in pixels.

bottom_gutter -  intlink
The size of the gutter on the bottom side of the bar, in pixels.

left_bar -  displayablelink
The displayable used for the left side of the bar.

right_bar -  displayablelink
The displayable used for the right side of the bar.

top_bar -  displayablelink
The displayable used for the top side of the bar.

bottom_bar -  displayablelink
The displayable uses for the bottom side of the bar.

base_bar -  displayablelink
A single displayable that is used for left_bar/right_bar or top_bar/bottom_bar, as appropriate. (This can be used with thumb to make a slider or scrollbar.)

thumb -  displayable or Nonelink
If not None, this is a displayable that is drawn over the break between the sides of the bar.

thumb_shadow -  displayable or Nonelink
If not None, this is a displayable that is drawn over the break between the sides of the bar.

thumb_offset -  intlink
The amount that by which the thumb overlaps the bars, in pixels. To have the left and right bars continue unbroken, set this to half the width of the thumb in pixels.

mouse -  stringlink
The mouse style that is used when the button is focused. This should be one of the styles in config.mouse.

unscrollable -  string or Nonelink
Controls what happens if the bar is unscrollable (if the range is set to 0, as is the case with a viewport containing a displayable smaller than itself). There are three possible values:

None
Renders the bar normally.

"insensitive"
Renders the bar in the insensitive state. This allows the bar to change its style to reflect its lack of usefulness.

"hide"
Prevents the bar from rendering at all. Space will be allocated for the bar, but nothing will be drawn in that space.

keyboard_focus -  booleanlink
If True, the default, this button can be focused using the keyboard focus mechanism, if it can be focused at all. If False, the keyboard focus mechanism will skip this button. (The keyboard focus mechanism is used by keyboards and keyboard-like devices, such as joypads.)

Box Style Propertieslink
These are used for the horizontal and vertical box layouts.

spacing -  intlink
The spacing between members of this box, in pixels.

first_spacing -  intlink
If not None, the spacing between the first and second members of this box, in pixels. This overrides the spacing property.

box_reverse -  booleanlink
If True, the placement of the items in the box will be reversed. When this is True, a hbox will be filled right-to-left, and a vbox will be filled bottom-to-top. This defaults to False.

box_wrap -  booleanlink
If True, then boxes will wrap when they reach the end of a line or column. If False (the default), they will extend past the end of the line.

box_wrap_spacing -  intlink
When box_wrap is True, this is the spacing between wrapped lines or columns. (So it is the vertical spacing between lines in a wrapped hbox, and the horizontal spacing between columns in a wrapped vbox.)

order_reverse -  booleanlink
If False, the default, the items in the box will be drawn first-to-last, with the first item in the box being below the second, and so on. If True, this order will be reversed, and the first item in the box will be above all other items in the box.

Grid Style Propertieslink
These are the properties used by the grid and vpgrid displayables. Margin Style Properties also form part of this group.

spacing -  intlink
The spacing between cells of the grid, in pixels.

xspacing -  int or Nonelink
The spacing between cells of the grid in the horizontal direction, in pixels. This takes precedence over the spacing property when it is not None.

yspacing -  int or Nonelink
The spacing between cells of the grid in the vertical direction, in pixels. This takes precedence over the spacing property when it is not None.

Fixed Style Propertieslink
These are used with the fixed layout.

fit_first -  boolean or "width" or "height"link
If True, then the size of the fixed layout is shrunk to be equal with the size of the first item in the layout. If "width", only the width is changed (the fixed will fill the screen vertically). Similarly, "height" only changes the height.

The position of the child is ignored for the purpose of fit_first.

xfit -  booleanlink
If True, the size of the fixed layout is shrunk horizontally to match the right side of the rightmost child of the fixed.

yfit -  booleanlink
If True, the size of the fixed layout is shrunk vertically to match the bottom side of the bottommost child of the fixed.

When these properties are supplied, the children of the fixed are first offered the full area given to the fixed by its parent. Once the size and placement of the children are known, these properties are then used to select the size of the fixed.

Margin Style Propertieslink
Margin properties are used to add transparent space around some displayables. Most notably: windows, frames, buttons and outside a grid or vpgrid.

left_margin -  intlink
The amount of transparent space to the left of the displayable, in pixels.

right_margin -  intlink
The amount of transparent space to the right of the displayable, in pixels.

xmargin -  intlink
Equivalent to setting left_margin and right_margin to the same value.

top_margin -  intlink
The amount of transparent space above the displayable, in pixels.

bottom_margin -  intlink
The amount of transparent space below the displayable, in pixels.

ymargin -  intlink
Equivalent to setting top_margin and bottom_margin to the same value.

margin -  tuplelink
When given a two-item tuple, equivalent to setting xmargin and ymargin to the two items. When given a four-item tuple, equivalent to setting left_margin, top_margin, right_margin, and bottom_margin to the four items.

Screens and Screen Languagelink
The things that a user sees when looking at a Ren'Py game can be divided into images and user interface. Images are displayed to the user using the scene, show, and hide statements, and are generally part of the story being told. Everything else the user sees is part of the user interface, which is customized using screens.

Screens can be displayed in four ways:

Implicitly, when script statements execute. For example, the say statement will cause the say screen to be displayed.

Automatically. For example, Ren'Py will display the main_menu screen when it starts running, or when the user returns to the main menu.

As an action, associated with a button, mouse button, or keyboard key. By default, the save screen is shown when the user right-clicks or presses escape. It's also possible to define an on-screen button that shows the save screen.

Explicitly, using statements that cause screens to be shown.

More than one screen can be shown at a time.

Screens have two main functions. The first is to display information to the user. Information can be displayed using text, bars, and images. Some of the information displayed in this manner is vital to gameplay. The say screen, for example, is used to display dialogue to the user, including the character's name and what she is saying.

The other thing a screen can do is to allow the user to interact with the game. Buttons and bars allow the user to invoke actions and adjust values. Ren'Py includes a pool of pre-defined actions, allowing the user to advance the game, control preferences, load and save games, and invoke many other actions. A game-maker can also write new actions in Python.

Screens are updated at the start of each interaction, and each time an interaction is restarted. Note that a with None statement does not cause an interaction to happen, and hence won't update a screen. A with Pause(0) will be enough to trigger one, if necessary.

A screen has a scope associated with it, giving values to some variables. There are different kinds of variables, in screens, which are resolved as shown in the following list:

First are local variables. These only exist in a screen that is being included in another with the use statement instead of being shown (or called) on its own. They are very similar with screen variables (see below), and created the same way, except that local variables can only be accessed by the used screen. Those are set using SetLocalVariable, among other actions, or by a python block or line in the used screen. Actions such as SetScreenVariable will not work on local variables.

Local parameters are the parameters taken by the used screen. They live in the same scope as local variables, and follow the same behavior and constraints as screen parameters - see below.

If a name cannot be resolved among local variables - or if we are not in a screen being used by another - the name is searched for in screen variables. These are variables created with the in-screen Default or Python statements, in the top-level screen. Screen variables can be set through the SetScreenVariable action, among others, or by a python block or line in the top-level screen, or any used screen if no local variable has the same name.

Screen parameters (that is, values defined and passed through the parentheses of the screen statement) live in the same scope as screen variables (that is, they can't have the same name), but they can't be set or edited through actions, since they will be reset to their original value at arbitrary times, including every time an action is executed. So, if their value were edited through the SetScreenVariable action (or any other action really), it would be reset immediately afterwards. This is also the case for variables defined in in-screen python blocks, since these blocks are executed at arbitrary times, as opposed to the in-screen default statement which executes only at the time the screen gets shown.

In last resort, a variable name is looked for in the general store, where all of Ren'Py's global variables are. Such variables can be set through the SetVariable action, among others.

Note

If you want an action to set a variable inside a screen, and you want that screen to be sometimes shown directly and sometimes used inside another, use SetLocalVariable. It will be far less efficient, but it will work in both cases.

Screens must not cause side effects that are visible from outside the screen. Ren'Py will run a screen multiple times, as it deems necessary. It runs a screen as part of the image prediction process, before the screen is first shown. As a result, if running a screen has side effects, those side effects may occur at unpredictable times.

Using Python generators in screens may cause unpredictable results. This traces back to an issue with the way the Python interpreter compiles Python source code that will be used in a screen context. Generators can be used in Python functions called from a screen, but not in the screen itself.

Screen Languagelink
The screen language is a mostly-declarative way of displaying screens. It consists of a statement that declares a new screen, statements that add displayables to that screen, and control statements.

Here's an example of a screen:

screen say(who, what):
    window id "window":
        vbox:
            spacing 10

            text who id "who"
            text what id "what"
The first line of this is a screen statement, a Ren'Py language statement that's used to declare a screen. The name of the screen is say, so this is the screen that's used to display dialogue. It takes two parameters, who and what.

The screen contains a window, which has been given the id of "window". This window contains a vertical box, and the spacing inside that box is 10 pixels. It contains two text fields, one displaying the name of the speaker, and the displaying what is being spoken.

Screen Language Syntaxlink
Most screen language statements share a common syntax. (Some of the control statements have other syntaxes.) A statement starts at the beginning of a line, with a keyword that introduces the statement.

If a statement takes parameters, they immediately follow the keyword. The parameters are space-separated simple expressions, unless otherwise noted.

The positional parameters are followed by a property list. A property consists of the property name, followed by the value of that property. Property values are simple expressions, unless otherwise noted. A property list is a space-separated list of these properties.

If a statement ends with a colon :, then it takes a block. Each line in a block may be one of two things:

A property list.

A screen language statement.

Screen Statementlink
The screen statement is a Ren'Py script language statement that is used to declare a new screen. It is parsed using the screen language common syntax.

It takes one parameter, the name of the screen. This is a name, not an expression. It takes the following properties:

modal
If True, the screen is modal. A modal screen prevents the user from interacting with displayables below it, except for the default keymap. This is evaluated once, when the game starts.

sensitive
An expression that determines whether the screen is sensitive or not. This expression is evaluated at least once per interaction.

tag
Parsed as a name, not an expression. This specifies a tag associated with this screen. Showing a screen replaces other screens with the same tag. This can be used to ensure that only one screen of a menu is shown at a time, in the same context.

zorder
This controls how close to the user a screen is displayed. The larger the number, the closer the screen is displayed to the user. It defaults to 0.

variant
If present, this should be a string or list of strings giving the variant of screen to be defined. See Screen Variants.

style_prefix
A string that's used to provide a prefix for the style for the children of this screen, as described below.

layer
A string giving the name of the layer the screen is shown on by default.

roll_forward
If true, roll forward will be enabled when the screen is used in a call screen statement. If false, roll forward is disabled, and if None or not given, the value of config.call_screen_roll_forward is used.

When roll forwarding from a call screen statement, return values and terminal jumps are preserved, but other side effects will not occur. This means that if the screen only contains Jump() and Return() actions, it's safe to enable roll_forward. Other actions may have side-effects that will not occur during the roll_forward.

screen hello_world():
     tag example
     zorder 1
     modal False

     text "Hello, World."
A screen can take a parameter list:

screen center_text(s, size=42):
     text s size size
If a screen has no parameters, it still should be given empty parentheses. If any other screen uses a screen with no parentheses, the difference in behavior are described in the section concerning the use statement. If no other screen use a given screen, not giving parentheses to that screen leads to pure inefficiency in the way Ren'py works internally, see the screen optimization section concerning parameters.

User Interface Statementslink
The user interface statements create displayables and add them either to the screen, or to an enclosing displayable. They allow the user to display information, allow the user to interact with the game, or allow the game to react to various events.

All user interface statements take the following common properties:

at
This can be a transform, or a list of transforms, or an anonymous transform (a transform that is defined directly in at)

transform hello_t:
    align (0.7, 0.5) alpha 0.0
    linear 0.5 alpha 1.0

screen hello_title():
    text "Hello." at hello_t
    text "Hello." at transform:
        align (0.2, 0.5) alpha 0.0
        linear 0.5 alpha 1.0
This transforms are used to wrap this displayable. The show, hide, replace, and replaced external events are delivered to a transform if and only if it is added directly to the screen.

For example, if a vbox is wrapped in a transform, and added directly to the screen, then events are delivered to that transform. But if a transform wraps a textbutton that is added to the vbox, this second transform is not given events.

It's possible for a single statement to have both an at property and an at transform. The property must come first, and is applied first.

screen title():
    add "title background":
        at sepia

    text "The Title of the Game":
        at sepia, truecenter
        at transform:
            alpha 0.0
            linear 0.5 alpha 1.0
default_focus
If given and true, the displayable is focused by default. When multiple displayables have this, the values are compared and the displayable with the greatest default focus becomes the default.

The default focus is only used when the last interaction was not a mouse click, mouse movement, or touch.

id
An identifier for the user-interface statement. When a screen is shown, property values can be supplied for the displayables with a given identifier. Some screens will require that a displayable with a given identifier is created.

By default, the id is automatically-generated.

prefer_screen_to_id
If true, when a property is provided by both the the screen and a displayble identifier, the screen property is used. If false, the default, the displayable property is used. (This can be used to decide if the screen overrides properties set by a Character.)

style
A string giving the name of the style applied to this displayable. The style gives default values for style properties.

style_prefix
Provides a prefix to the style of this displayable and all of its children, unless those children have a more specific style or style prefix set.

The style name is created by concatenating a style prefix, underscore, and a style suffix. The style suffix is either specified using style_suffix, or determined by the displayable.

For example, if a vbox has a style prefix of "pref", the vbox will be given the style "pref_vbox". Unless a more specific style or style prefix is set, a button inside the vbox will have the style "pref_button".

Styles accessed in this way are automatically created, if the style does not exist. Setting a prefix of None removes the prefix from this displayable and its children.

style_group
An alias for style_prefix, used in older versions of Ren'Py.

style_suffix
Specifies the suffix that is combined with the style_prefix to generate a style name. If this is "small_button" and the style prefix is "pref", the style "pref_small_button" is used.

If no style prefix is in use, this is used directly as the name of the style. A style suffix applies to a single displayable only, not a displayable and all children.

focus
Takes a string or integer, and gives a name to the displayable for focus purposes. Ren'Py looks for structural similarity between focus names when deciding with displayable to give focus to at the start of an interaction. If a box is given a focus name, and the third button in that box is focused at the end of an interaction, the third button of a box with the same will be highlighted at the start of the next interaction.

tooltip
Assigns a tooltip to this displayable. When the displayable gains focus, the value of this property will be made available from the GetTooltip() function. See the Tooltips section for more details.

Objects passed to tooltip must support equality. If equality is not supported, an infinite loop may occur.

arguments
A tuple or list containing additional positional arguments that are given to the displayable.

properties
A dictionary containing additional properties given to the displayable.

Many user interface statements take classes of style properties, or transform properties. These properties can have a style prefix associated with them, that determines when they apply. For example, if text is given the hover_size property, it sets the text size when the text is hovered.

User interface statements take an as clause, which takes a variable name, without any quotes. The displayable that the statement creates is assigned to the variable. (An example can be found in the drag and drop documentation.)

Barlink
Creates a horizontally-oriented bar that can be used to view or adjust data. It takes the following properties:

value
The current value of the bar. This can be either a bar value object, or a number.

range
The maximum value of the bar. This is required if value is a number.

adjustment
A ui.adjustment() object that this bar adjusts.

changed
If given, this should be a Python function. The function is called with the value of the adjustment when the adjustment is changed.

hovered
An action to run when the bar gains focus.

unhovered
An action to run when the bar loses focus.

released
An action to run when the bar button is released. This will be invoked even if the bar has not changed its value.

One of value or adjustment must be given. In addition, this function takes:

Common Properties

Position Style Properties

Bar Style Properties

This does not take children.

screen volume_controls():
    frame:
        has vbox

        bar value Preference("sound volume") released Play("sound", "audio/sample_sound.ogg")
        bar value Preference("music volume")
        bar value Preference("voice volume")
Buttonlink
Creates an area of the screen that can be activated to run an action. A button takes no parameters, and the following properties.

action
The action to run when the button is activated. A button is activated when it is clicked, or when the player selects it and hits enter on the keyboard. This also controls if the button is sensitive if sensitive is not provided or None, and if the button is selected if selected is not provided or None.

alternate
An action that is run if the button is activated in an alternate manner. Alternate activation occurs when the player right-clicks on the button on a mouse-based platform, or when the player long presses the button on a touch-based platform.

hovered
An action to run when the button gains focus.

unhovered
An action to run when the button loses focus.

selected
An expression that determines whether the button is selected or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine selectedness.

sensitive
An expression that determines whether the button is sensitive or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine sensitivity.

keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the action of this button.

alternate_keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the alternate action of this button.

It also takes:

Common Properties

Position Style Properties

Window Style Properties

Button Style Properties

It takes one children. If zero, two, or more children are supplied, they are implicitly added to a fixed, which is added to the button.

Dismisslink
The dismiss statement creates the highly specialized dismiss displayable, which gains focus when no other displayable has focus, and runs an action when it's activated. In this regard, it works very similarly to the behavior of the say statement.

This is rarely used, and mostly to allow a modal frame to be dismissed when the player clicks outside it, as might be the case with a popup window.

This takes the following properties:

action
The action performed when the dismiss is activated. This property is required.

keysym
A string giving a keysym describing a key that, when pressed, invokes the action of this dismiss. This replaces the default "dismiss" keysym.

modal
By default, the dimiss is modal, preventing events from being processed by displayables "behind" it.

It also takes:

Common Properties

The hover_sound and activate_sound style properties.

Here's an example of dismiss being used:

screen dismiss_test():

    dismiss action Return()

    frame:
        modal True

        align (.5, .3)
        padding (20, 20)

        has vbox

        text "This is a very important message.":
            xalign 0.5
            textalign 0.5

        # Dismiss can be confusing on its own, so we'll add a button as well.
        textbutton "Dismiss":
            xalign 0.5
            action Return()
See also how dismiss is used in conjuction with nearrect.

Fixedlink
This creates an area to which children can be added. By default, the fixed expands to fill the available area, but the xmaximum and ymaximum properties can change this.

The children are laid out according to their position style properties. They can overlap if not positioned properly.

The fixed statement takes no parameters, and the following groups of properties:

Common Properties

Position Style Properties

Fixed Style Properties

This takes any number of children, which are added to the fixed.

It's often unnecessary to explicitly create a fixed displayable. Each screen is contained within a fixed displayable, and many screen language statements automatically create a fixed displayable if they have two or more children.

screen ask_are_you_sure:
    fixed:
         text "Are you sure?" xalign 0.5 yalign 0.3
         textbutton "Yes" xalign 0.33 yalign 0.5 action Return(True)
         textbutton "No" xalign 0.66 yalign 0.5 action Return(False)
Framelink
A frame is a window that contains a background that is intended for displaying user-interface elements like buttons, bars, and text. It takes the following groups of properties:

Common Properties

Position Style Properties

Window Style Properties

It takes one child. If zero, two, or more children are supplied, then a fixed is created to contain them.

screen test_frame():
    frame:
        xpadding 10
        ypadding 10
        xalign 0.5
        yalign 0.5

        vbox:
            text "Display"
            null height 10
            textbutton "Fullscreen" action Preference("display", "fullscreen")
            textbutton "Window" action Preference("display", "window")
Gridlink
This displays its children in a grid. Each child is given an area of the same size, the size of the largest child.

It takes two parameters. The first is the number of columns in the grid, and the second is the number of rows in the grid. If the grid is not full, the remaining cells are filled with the null displayable.

Grid takes one property:

transpose
If False (the default), rows are filled before columns. If True, then columns are filled before rows.

It also takes:

Common Properties

Position Style Properties

Grid Style Properties

This must be given (columns * rows) children. Giving it a different number of children is an error.

screen grid_test:
     grid 2 3:
         text "Top-Left"
         text "Top-Right"

         text "Center-Left"
         text "Center-Right"

         text "Bottom-Left"
         text "Bottom-Right"
Hboxlink
This displays its children side by side, in an invisible horizontal box. It takes no parameters, and the following groups of properties:

Common Properties

Position Style Properties

Box Style Properties

UI displayable children are added to the box.

screen hbox_text():
    hbox:
         text "Left"
         text "Right"
Imagebuttonlink
Creates a button consisting of images, that change state when the user hovers over them. This takes no parameters, and the following properties:

auto
Used to automatically define the images used by this button. This should be a string that contains %s in it. If it is, and one of the image properties is omitted, %s is replaced with the name of that property, and the value is used as the default for that property.

For example, if auto is "button_%s.png", and idle is omitted, then idle defaults to "button_idle.png". Similarly, if auto is "button %s", the button idle image is used.

The behavior of auto can be customized by changing config.imagemap_auto_function.

insensitive
The image used when the button is insensitive.

idle
The image used when the button is not focused.

hover
The image used when the button is focused.

selected_idle
The image used when the button is selected and idle.

selected_hover
The image used when the button is selected and hovered.

action
The action to run when the button is activated. This also controls if the button is sensitive if sensitive is not provided or None, and if the button is selected if selected is not provided or None.

alternate
An action that is run if the button is activated in an alternate manner. Alternate activation occurs when the player right-clicks on the button on a mouse-based platform, or when the player long presses the button on a touch-based platform.

hovered
An action to run when the button gains focus.

unhovered
An action to run when the button loses focus.

selected
An expression that determines whether the button is selected or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine selectedness.

sensitive
An expression that determines whether the button is sensitive or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine sensitivity.

keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the action of this button.

alternate_keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the alternate action of this button.

It also takes:

Common Properties

Position Style Properties

Window Style Properties

Button Style Properties

This takes no children.

screen gui_game_menu():
     vbox xalign 1.0 yalign 1.0:
          imagebutton auto "save_%s.png" action ShowMenu('save')
          imagebutton auto "prefs_%s.png" action ShowMenu('preferences')
          imagebutton auto "skip_%s.png" action Skip()
          imagebutton auto "afm_%s.png" action Preference("auto-forward mode", "toggle")
Inputlink
Creates a text input area, which allows the user to enter text. When the user presses return, the text will be returned by the interaction. (When the screen is invoked through call screen, the result will be placed in the _return variable.)

Due to limitations in supporting libraries, on Android and the web platform the input displayable is limited to alphabetic characters.

The input statement takes no parameters, and the following properties:

value
An input value object that this input uses. InputValue objects determine where the default value is taken from, what happens when the text is changed, what happens when enter is pressed, and if the text is editable by default.

This should not be given at the same time as default and changed.

default
The default text in this input.

length
The maximum length of the text in this input.

pixel_width
The maximum pixel width of the input. If typing a character would cause the input to exceed this width, the keypress is ignored.

allow
A string containing characters that are allowed to be typed into this input. (By default, allow all characters.)

exclude
A string containing characters that are disallowed from being typed into this input. (By default, "{}".)

copypaste
If True, it becomes possible to copy and paste into this input. (By default, disabled.)

prefix
An immutable string to prepend to what the user has typed.

suffix
An immutable string to append to what the user has typed.

changed
A Python function that is called with what the user has typed, when the string changes.

mask
If given, a string that replaces each displayable character in the text. This can be used to mask out a password.

caret_blink
If not False, the blinking period of the default caret. Overrides config.input_caret_blink.

multiline
If true, it becomes possible to move caret on the next line using keyboard (Shift+Enter by default, can be changed by modifying config.keymap['input_next_line']).

It also takes:

Common Properties

Position Style Properties

Text Style Properties

This does not take any children.

screen input_screen():
    window:
        has vbox

        text "Enter your name."
        input default "Joseph P. Blow, ESQ."
Keylink
This creates a keybinding that runs an action when a key is pressed, or one of the keys in a given list. Key is used in a loose sense here, as it also allows joystick and mouse events.

Key takes one positional parameter, a string giving the key to bind. See the Customizing the Keymap section for a description of available keysyms. It takes two properties:

action
This gives an action that is run when the key is pressed. This property is mandatory.

capture
If true, the default, the event will capture, and will not be processed by other displayables. If false and the action does not end the interaction, the event will be procssed by other displayables.

It takes no children.

screen keymap_screen():
    key "game_menu" action ShowMenu('save')
    key "p" action ShowMenu('preferences')
    key ["s", "w"] action Screenshot()
Labellink
Creates a window in the label style, and then places text inside that window. Together, this combination is used to label things inside a frame.

It takes one positional argument, the text of the label. It takes the property:

text_style
The name of the style to use for the button text. If not supplied, and the style property is a string, then "_text" is appended to that string to give the default text style.

text_-
Other properties prefixed with text have this prefix stripped, and are then passed to the text displayable.

It also takes:

Common Properties

Position Style Properties

Window Style Properties

It does not take children.

screen display_preference():
    frame:
        has vbox

        label "Display"
        textbutton "Fullscreen" action Preference("display", "fullscreen")
        textbutton "Window" action Preference("display", "window")
Mousearealink
A mouse area is an area of the screen that can react to the mouse entering or leaving it. Unlike a button, a mouse area does not take focus, so it's possible to have a mouse area with buttons inside it. The mousearea statement takes no parameters, and the following properties:

hovered
An action to run when the mouse enters the mouse area.

unhovered
An action to run when the mouse leaves the mouse area.

focus_mask
The focus_mask style property, which may be a Displayable or None. If a displayable, the mousearea will only be hovered if the mouse is over an opaque portion of the displayable. (The displayable is not shown to the user.)

It also takes:

Common Properties

Position Style Properties

It does not take children.

Usually, a mousearea statement is given the area style property, which controls the size and position of the mouse area. Without some way of controlling its size, the mouse area would take up the entire screen, a less useful behavior.

Note

Since Ren'Py games can be played using the keyboard and joystick, it often makes sense to duplicate mousearea functionality by some other means.

screen button_overlay():
    mousearea:
        area (0, 0, 1.0, 100)
        hovered Show("buttons", transition=dissolve)
        unhovered Hide("buttons", transition=dissolve)

screen buttons():
    hbox:
        textbutton "Save" action ShowMenu("save")
        textbutton "Prefs" action ShowMenu("preferences")
        textbutton "Skip" action Skip()
        textbutton "Auto" action Preference("auto-forward", "toggle")

label start:
    show screen button_overlay
Nearrectlink
The nearrect statement takes a single child, and lays that child out at a location near a rectangle. Usually, this is a rectangle focus captured using the CaptureFocus() action. This can be used for tooltips and dropdown or pulldown menus.

Nearrect takes the following properties:

rect
If given, this should be an (x, y, w, h) rectangle that the child is positioned relative to, as described below.

focus
If given, this should be a string. This string is passed to the equivalent of GetFocusRect() to find the rectangle. If a focus rectangle with that name is found, the child is rendered.

Passing "tooltip" to this uses the location of the last displayable that was focused while displaying a tooltip.

prefer_top
If given, positioning the child above the focus rect is preferred.

It also takes:

Common Properties

Position Style Properties

Nearrect differs from the other layouts in that it positions its child near the given rectangle, rather than inside it. The child is first rendered with the full width available, and the maximum of the height above and height below the rectangle. The y position is then computed as followed.

If the child will fit above the rectangle and prefer_top is given, the child is positioned directly above the rectangle.

Otherwise, if the child can fit below the rectangle, it's positioned directly below the rectangle.

Otherwise, the child is positioned directly above the rectangle.

The x positioning is computed using the normal rules, using the xpos and xanchor properties of the child, and properties that set them, such as xalign. The pos properties are relative to the x coordinate of the rectangle, and in the case of a floating point number, the width.

At the end of positioning, the xoffset and yoffset properties are applied as normal.

If the child of the nearrect is a transform, the transform is given show and hide events. However, the position will change instantly. Nearrect works best on the top of a screen, with transforms and positioning applied to its child, rather the nearrect.

One use of nearrect is for dropdown menus:

default difficulty = "Easy"

screen select_difficulty():

    # This frame can be a very complex layout, if required.
    frame:
        align (.5, .3)
        padding (20, 20)

        has vbox

        # This is the button that is clicked to enable the dropdown,
        textbutton "Difficulty: [difficulty]":

            # This action captures the focus rectangle, and in doing so,
            # displays the dropdown.
            action CaptureFocus("diff_drop")

        textbutton "Done":
            action Return()

    # All sorts of other screen elements could be here, but the nearrect needs
    # be at the top level, and the last thing show, apart from its child.

    # Only if the focus has been captured, display the dropdown.
    # You could also use showif instead of basic if
    if GetFocusRect("diff_drop"):

        # If the player clicks outside the frame, dismiss the dropdown.
        # The ClearFocus action dismisses this dropdown.
        dismiss action ClearFocus("diff_drop")

        # This positions the displayable near (usually under) the button above.
        nearrect:
            focus "diff_drop"

            # Finally, this frame contains the choices in the dropdown, with
            # each using ClearFocus to dismiss the dropdown.
            frame:
                modal True

                has vbox

                textbutton "Easy" action [ SetVariable("difficulty", "Easy"), ClearFocus("diff_drop") ]
                textbutton "Medium" action [ SetVariable("difficulty", "Medium"), ClearFocus("diff_drop") ]
                textbutton "Hard" action [ SetVariable("difficulty", "Hard"), ClearFocus("diff_drop") ]
                textbutton "Nightmare" action [ SetVariable("difficulty", "Nightmare"), ClearFocus("diff_drop") ]
Dropdowns may benefit from improved styling, which isn't done here.

Nulllink
The null statement inserts an empty area on the screen. This can be used to space things out. The null statement takes no parameters, and the following properties:

width
The width of the empty area, in pixels.

height
The height of the empty area, in pixels.

It also takes:

Common Properties

Position Style Properties

It does not take children.

screen text_box():
    vbox:
         text "The title."
         null height 20
         text "This body text."
Sidelink
This positions displayables in the corners or center of a grid. It takes a single parameter, string containing a space-separated list of places to place its children. Each component of this list should be one of:

'c', 't', 'b', 'l', 'r', 'tl', 'tr', 'bl', 'br'

'c' means center, 't' top, 'tl' top left, 'br' bottom right, and so on.

A side takes the following properties:

spacing
The spacing between the rows and columns of the grid.

A side takes the following property groups:

Common Properties

Position Style Properties

When being rendered, this first sizes the corners, then the sides, then the center. The corners and sides are rendered with an available area of 0, so it may be necessary to supply them a minimum size (using xminimum or yminimum) to ensure they render at all. The order of placing children is controlled from top to bottom when adding them (i.e. also in the order of substrings in the argument), the latter will be the highest. This is may be disabled by config.keep_side_render_order.

Children correspond to entries in the places list, so this must have the same number of children as there are entries in the places list.

screen side_test():
     side "c tl br":
          text "Center"
          text "Top-Left"
          text "Bottom-Right"
Textlink
The text statement displays text. It takes a single parameter, the text to display. It also takes the following groups of properties:

Common Properties

Position Style Properties

Text Style Properties

It does not take children.

screen hello_world():
    text "Hello, World." size 40
Textbuttonlink
Creates a button containing a text label. The button takes a single parameter, the text to include as part of the button. It takes the following properties:

action
The action to run when the button is activated. This also controls if the button is sensitive if sensitive is not provided or None, and if the button is selected if selected is not provided or None.

alternate
An action that is run if the button is activated in an alternate manner. Alternate activation occurs when the player right-clicks on the button on a mouse-based platform, or when the player long presses the button on a touch-based platform.

hovered
An action to run when the button gains focus.

unhovered
An action to run when the button loses focus.

selected
An expression that determines whether the button is selected or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine selectedness.

sensitive
An expression that determines whether the button is sensitive or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine sensitivity.

keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the action of this button.

alternate_keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the alternate action of this button.

text_style
The name of the style to use for the button text. If not supplied, and the style property is a string, then "_text" is appended to that string to give the default text style.

text_-
Other properties prefixed with text have this prefix stripped, and are then passed to the text displayable.

It also takes:

Common Properties

Position Style Properties

Window Style Properties

Button Style Properties

It does not take children.

screen textbutton_screen():
    vbox:
        textbutton "Wine" action Jump("wine")
        textbutton "Women" action Jump("women")
        textbutton "Song" action Jump("song")
Timerlink
This creates a timer that runs an action when time runs out. It takes one positional parameter, giving the timeout time, in seconds. It takes the properties:

action
This gives an action that is run when the timer expires. This property is mandatory.

repeat
If True, the timer repeats after it times out.

modal
If True, the timer will not fire if it is blocked by a modal screen. If false or not given, the timer will fire even if it is blocked by a modal screen.

Timer takes no children.

screen timer_test():
    vbox:
         textbutton "Yes." action Jump("yes")
         textbutton "No." action Jump("no")

    timer 3.0 action Jump("too_slow")
Transformlink
Applies a transform to its child. This takes no parameters, and the following property groups:

Common Properties

Transform Properties

This should take a single child.

Vbarlink
The vertically oriented equivalent of bar. Properties are the same as bar.

screen volume_controls():
     frame:
         has hbox

         vbar value Preference("sound volume")
         vbar value Preference("music volume")
         vbar value Preference("voice volume")
Vboxlink
This displays its children one above the other, in an invisible vertical box. It takes no parameters, and the following groups of properties:

Common Properties

Position Style Properties

Box Style Properties

UI displayable children are added to the box.

screen vbox_test():
    vbox:
         text "Top."
         text "Bottom."
Viewportlink
A viewport is area of the screen that can be scrolled by dragging, with the mouse wheel, or with scrollbars. It can be used to display part of something that is bigger than the screen. It takes the following properties:

child_size
The size that is offered to the child for rendering. An (xsize, ysize) tuple. This can usually be omitted, when the child can compute it's own size. If either component is None, the child's size is used.

mousewheel
This should be one of:

False
To ignore the mousewheel. (The default.)

True
To scroll vertically.

"horizontal"
To scroll horizontally.

"change"
To scroll the viewport vertically, only if doing so would cause the viewport to move. If not, the mousewheel event is passed to the rest of the interface. (For example, if change is given, placing key "viewport_wheeldown" action Return() before the viewport will cause the screen to return if the viewport scrolls past the bottom.)

"horizontal-change"
Combines horizontal scrolling with change mode.

draggable
If True, dragging the mouse will scroll the viewport. This can also be a variant, in which case the viewport will be draggable if the variant is in place. (For example, draggable "touch".)

edgescroll
Controlls scrolling when the mouse reaches the edge of the viewport. If not None, this should be a two- or three-element tuple:

The first element in the tuple is the distance from the edge of the viewport that edgescrolling begins to take effect, in pixels.

The second element is the maximum scrolling rate, in pixels per second.

If present, the third element is a function that adjusts the scrolling speed, based on how close to the pointer is to an edge. The function should take a number between -1.0 and 1.0, and return a number in the same range. The default function returns its input, and implements proportional scrolling. A function that returned -1.0 or 1.0 based on the sign of its input would implement constant-speed scrolling.

xadjustment
The ui.adjustment() used for the x-axis of the viewport. When omitted, a new adjustment is created.

yadjustment
The ui.adjustment() used for the y-axis of the viewport. When omitted, a new adjustment is created.

xinitial
The initial horizontal offset of the viewport. This may be an integer giving the number of pixels, or a float giving a fraction of the possible offset.

yinitial
The initial vertical offset of the viewport. This may be an integer giving the number of pixels, or a float giving a fraction of the possible offset.

scrollbars
If not None, scrollbars are added along with this viewport. This works by creating a side layout, and placing the created viewport in the center of the side. If scrollbars is "horizontal", a horizontal scrollbar is placed beneath the viewport. If scrollbars is "vertical", a vertical scrollbar is placed to the right of the viewport. If scrollbars is "both", both horizontal and vertical scrollbars are created.

When scrollbars is not None, the viewport takes prefixed properties:

Properties beginning with viewport_ are passed to the viewport.

Properties beginning with side_ are passed to the side.

Properties beginning with scrollbar_ are passed to the horizontal scrollbar, if it exists.

Properties beginning with vscrollbar_ are passed to the verical scrollbar, if it exists.

Unprefixed properties are also accepted. Position Style Properties are passed to the side, while other unprefixed properties are supplied to the viewport.

arrowkeys
If true, the viewport can be scrolled with the left, right, up, and down arrow keys. This takes precedence over the usual function of these keys, which is changing focus. However, the arrow keys will change focus when the viewport reaches its limits.

pagekeys
If true, the viewport can be scrolled up and down by the pageup and pagedown keys. This disables the usual functionality of these keys, which is to cause rollback and rollforward.

In addition, it takes the following groups of style properties:

Common Properties

Position Style Properties

It takes one child. If zero, two, or more children are supplied, then a fixed is created to contain them.

To make a viewport scrollable, it's often best to assign an id to it, and then use XScrollValue() and YScrollValue() with that id.

screen viewport_example():
    side "c b r":
         area (100, 100, 600, 400)

         viewport id "vp":
             draggable True

             add "washington.jpg"

         bar value XScrollValue("vp")
         vbar value YScrollValue("vp")
Vpgridlink
A vpgrid (viewport grid) combines a viewport and grid into a single displayable. The vpgrid takes multiple children (like a grid) and is optimized so that only the children being displayed within the viewport are rendered.

A vpgrid assumes that all children are the same size, the size being taken from the dimensions of the first child. If a vpgrid appears to be rendering incorrectly, please ensure that all children are of the same size.

A vpgrid must be given at least one of the cols and rows properties. If one is omitted or None, the other is automatically determined from the size, spacing, and number of children. If a row or column would be underfull, null displayable are used to fill the remaining space.

Vpgrids take the the following properties:

cols
The number of columns in the grid.

rows
The number of rows in the grid.

transpose
If true, columns are filled before rows. The default of this depends on the cols and rows properties. If cols is given, columns are filled before rows, otherwise rows are filled before columns.

In addition, a vpgrid takes all properties a viewport can, and the following groups of style properties:

Common Properties

Position Style Properties

Grid Style Properties

When the scrollbar property is given, prefixed properties are passed to the vpgrid in the same way as they are with viewports. (Properties prefixed with viewport_ are passed to the vpgrid itself.)

screen vpgrid_test():

    vpgrid:

        cols 2
        spacing 5
        draggable True
        mousewheel True

        scrollbars "vertical"

        # Since we have scrollbars, this positions the side, rather than
        # the vpgrid.
        xalign 0.5

        for i in range(1, 101):

            textbutton "Button [i]":
                xysize (200, 50)
                action Return(i)
Windowlink
A window is a window that contains a background that is intended for displaying in-game dialogue. It takes the following groups of properties:

Common Properties

Position Style Properties

Window Style Properties

It takes one child. If zero, two, or more children are supplied, then a fixed is created to contain them.

screen say(who, what):
    window id "window"
        vbox:
            spacing 10

            text who id "who"
            text what id "what"
Imagemap Statementslink
A convenient way of creating a screen, especially for those who think visually, is to create an imagemap. When creating an imagemap, the imagemap statement is used to specify up to six images. The hotspot and hotbar images are used to carve rectangular areas out of the image, and apply actions and values to those areas.

Here's an example of a preferences screen that uses imagemaps.

screen preferences():

    tag menu
    use navigation

    imagemap:
        auto "gui_set/gui_prefs_%s.png"

        hotspot (740, 232, 75, 73) action Preference("display", "fullscreen") alt _("Display Fullscreen")
        hotspot (832, 232, 75, 73) action Preference("display", "window") alt _("Display Window")
        hotspot (1074, 232, 75, 73) action Preference("transitions", "all") alt _("Transitions All")
        hotspot (1166, 232, 75, 73) action  Preference("transitions", "none") alt _("Transitions None")

        hotbar (736, 415, 161, 20) value Preference("music volume") alt _("Music Volume")
        hotbar (1070, 415, 161, 20) value Preference("sound volume") alt _("Sound Volume")
        hotbar (667, 535, 161, 20) value Preference("voice volume") alt _("Voice Volume")
        hotbar (1001, 535, 161, 20) value Preference("text speed") alt _("Text Speed")
Imagemaplink
The imagemap statement is used to specify an imagemap. It takes no parameters, and the following properties:

auto
Used to automatically define the images used by this imagemap. This should be a string that contains %s in it. If it is, and one of the image properties is omitted, %s is replaced with the name of that property, and the value is used as the default for that property.

For example, if auto is "imagemap_%s.png", and idle is omitted, then idle defaults to "imagemap_idle.png". If auto is "imagemap %s", the imagemap idle image is used.

The behavior of auto can be customized by changing config.imagemap_auto_function.

ground
The image used for portions of the imagemap that are not part of a hotspot or hotbar.

insensitive
The image used when a hotspot or hotbar is insensitive.

idle
The image used when a hotspot is not selected and not focused, and for the empty portion of unfocused hotbars.

hover
The image used when a hotspot is not selected and focused, and for the empty portion of focused hotbars.

selected_idle
The image used when a hotspot is selected and not focused, and for the full portion of unfocused hotbars.

selected_hover
The image used when a hotspot is selected and focused, and for the full portion of focused hotbars.

alpha
If true, the default, a hotspot only gains focus when the mouse is in an area of the hover image that is opaque. If false, the hotspot gains focus whenever the mouse is within its rectangular boundary.

cache
If true, the default, hotspot data is cached in to improve performance at the cost of some additional disk space.

It takes the following groups of properties:

Common Properties

Position Style Properties

Fixed Style Properties

An imagemap creates a fixed, allowing any child to be added to it (not just hotspots and hotbars).

Hotspotlink
A hotspot is a button consisting of a portion of the imagemap that contains it. It takes a single parameter, a (x, y, width, height) tuple giving the area of the imagemap that makes up the button. It also takes the following properties:

action
The action to run when the button is activated. This also controls if the button is sensitive, and if the button is selected.

alternate
An action that is run if the hotspot is activated in an alternate manner. Alternate activation occurs when the player right-clicks on the hotspot on a mouse-based platform, or when the player long presses the hotspot on a touch-based platform.

hovered
An action to run when the button gains focus.

unhovered
An action to run when the button loses focus.

selected
An expression that determines whether the button is selected or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine selectedness.

sensitive
An expression that determines whether the button is sensitive or not. This expression is evaluated at least once per interaction. If not provided or None, the action will be used to determine sensitivity.

keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the action of this button.

alternate_keysym
A string giving a keysym describing a keyboard key that, when pressed, invokes the alternate action of this button.

It also takes:

Common Properties

Button Style Properties

A hotspot creates a fixed, allowing children to be added to it. The fixed has an area that is the same size as the hotspot, meaning that the children will be positioned relative to the hotspot.

Hotspots should be given the alt style property to allow Ren'Py's self-voicing feature to work.

Hotbarlink
A hotbar is a bar that consists of a portion of the imagemap that contains it. It takes a single parameter, a (x, y, width, height) tuple giving the area of the imagemap that makes up the button. It also takes the following properties:

value
The current value of the bar. This can be either a bar value object, or a number.

range
The maximum value of the bar. This is required if value is a number.

adjustment
A ui.adjustment() object that this bar adjusts.

One of value or adjustment must be given. In addition, this function takes:

Common Properties

Bar Style Properties

This does not take children.

Hotbars should be given the alt style property to allow Ren'Py's self-voicing feature to work.

Add Statementlink
The add statement is a bit special, as it adds an already-exising displayble to the screen. As a result, it doesn't take the properties common to the user interface statements.

Addlink
Adds an image or other displayable to the screen. This optionally takes transform properties. If at least one transform property is given, a Transform is created to wrap the image, and the properties are given to the transform.

If the displayable is None, nothing is added to the screen.

This does not take any children.

screen add_test():
    add "logo.png" xalign 1.0 yalign 0.0
Advanced Displayableslink
In addition to the commonly-used statements, the screen language has statements that correspond to advanced displayables. The mapping from displayable to statement is simple. Positional parameters of the displayables become positional parameters of the statement. Keyword arguments and the relevant style properties become screen language properties.

The advanced displayable statements are:

Areapickerlink
Intended for use in development tools, this lets the user select a rectangular area on the screen. It takes the following properties:

cols
If not None, the defaut, this divides the screen up into a grid with this many columns.

rows
If not None, the defaut, this divides the screen up into a grid with this many rows.

position
If not None, the default, this is a function called with the x and y coordinates of the location the user first clicked, rounded to the grid.

changed
This is called with the rectangle, an (x, y, width, height) tuple, whenever the user changes the selected area.

finished
This is called with the rectangle, an (x, y, width, height) tuple, when the user finishes selecting an area.

persist
If true, the child will be shown in the selected area when the selection is complete. If false, the default, the child will be hidden once the selection is complete.

It takes the following group of properties:

Common Properties

An areapicker takes one child. The child is displayed on the screen in the selected area.

Draglink
Creates a Drag that can be dragged around the screen. With the acception of d, which is supplied by the screen language, this takes all properties defined in that class.

It also takes the following properties:

Common Properties

The hover_sound and activate_sound style properties

The focus_mask style_property.

A drag takes one child, or the child style property can be used to supply the child and its focused variants.

Draggrouplink
Creates a DragGroup. This takes the same properties as DragGroup, and also takes the following properties:

Common Properties

A drag group may have zero or more drags as its children. It may also have non-drags as children, in which case it functions like fixed.

Has Statementlink
The has statement allows you to specify a container to use, instead of fixed, for statements that take only one child. The has statement may only be used inside a statement that takes one child. The keyword has is followed (on the same line) by another statement, which must be a statement that creates a container displayable, one that takes more than one child.

The has statement changes the way in which the block that contains it is parsed. Child displayables created in that block are added to the container, rather than the parent displayable. Keyword arguments to the parent displayable are not allowed after the has statement. Multiple has statements can be used in the same block.

The has statement can be supplied as a child of the following statements:

button

frame

window

The has statement can be given the following statements as a container.

fixed

grid

hbox

side

vbox

screen volume_controls():
     frame:
         has vbox

         bar value Preference("sound volume")
         bar value Preference("music volume")
         bar value Preference("voice volume")
Control Statementslink
The screen language includes control statements for conditional execution, iteration, including other screens, executing actions when events occur, and executing arbitrary Python.

Defaultlink
The default statement sets the default value of a variable, if it is not passed as an argument to the screen, or inherited from a screen that calls us using the use statement.

screen scheduler():
    default club = None
    vbox:
         text "What would you like to do?"
         textbutton "Art Club" action SetScreenVariable("club", "art")
         textbutton "Writing Club" action SetScreenVariable("club", "writing")

         if club:
             textbutton "Select" action Return(club)
Forlink
The for statement is similar to the Python for statement, except that it does not support the else clause (it does, however, support the continue and break statements). It supports assignment to (optionally nested) tuple patterns, as well as variables.

$ numerals = [ 'I', 'II', 'III', 'IV', 'V' ]

screen five_buttons():
    vbox:
        for i, numeral in enumerate(numerals):
            textbutton numeral action Return(i + 1)
The for statement takes an index clause:

screen five_buttons():
    vbox:
        for i, numeral index numeral in enumerate(numerals):
            textbutton numeral action Return(i + 1)
If given, the index clause should consist of an expression that returns a hashable and comparable value that is unique for each row in the list. Ren'Py uses this value to make sure that transforms and other state wind up associated with the correct iteration. If you're seeing weird behavior when elements are added to or removed from a list you're iterating over, you might want to use an index clause.

Iflink
The screen language if statement is the same as the Python/Ren'Py if statement. It supports the if, elif, and else clauses.

screen skipping_indicator():
    if renpy.is_skipping():
         text "Skipping."
    else:
         text "Not Skipping."
Onlink
The on statement allows the screen to execute an action when an event occurs. It takes one parameter, a string giving the name of an event. This should be one of:

"show"

"hide"

"replace"

"replaced"

It then takes an action property, giving an action to run if the event occurs.

screen preferences():
    frame:
        has hbox

        text "Display"
        textbutton "Fullscreen" action Preferences("display", "fullscreen")
        textbutton "Window" action Preferences("display", "window")

    on "show" action Show("navigation")
    on "hide" action Hide("navigation")
Uselink
The use statement allows a screen to include another. The use statement takes the name of the screen to use. This can optionally be followed by an argument list, in parenthesis.

If the used screen has no parentheses, it has read and write access to the scope of the current screen, updated with any keyword arguments passed via the use statement. Otherwise, its scope is initialized to the result of assigning the arguments to those parameters.

screen file_slot(slot):
    button:
        action FileAction(slot)

        has hbox

        add FileScreenshot(slot)
        vbox:
            text FileTime(slot, empty="Empty Slot.")
            text FileSaveName(slot)


 screen save():
     grid 2 5:
         for i in range(1, 11):
              use file_slot(i)
The use statement may take one property, id, which must be placed after the parameter list if present. This screen is only useful when two screens with the same tag use the same screen. In this case, when one screen replaces the other, the state of the used screen is transfered from old to new.

transform t1():
    xpos 150
    linear 1.0 xpos 0

screen common():
    text "Test" at t1

screen s1():
    tag s
    use common id "common"
    text "s1" ypos 100

screen s2():
    tag s
    use common id "common"
    text "s2" ypos 100

label start:
    show screen s1
    pause
    show screen s2
    pause
    return
Instead of the name of the screen, the keyword expression can be given, followed by an expression giving the name of the screen to use. If parameters are required, the pass keyword must be given to separate them from the expression.

screen ed(num):
    text "Ed"
    text "Captain"

screen kelly(num):
    text "Kelly"
    text "First Officer"

screen bortus(num):
    text "Bortus"
    text "Second Officer"

screen crew():
    hbox:
        for i, member in enumerate(party):
            vbox:
                use expression member.screen pass (i + 1)
Use and Transcludelink
A use statement may also take a block containing screen language statements. When a block is given, the screen that is used may contain the transclude statement. The transclude statement is replaced with the statements contained within the use statement's block.

This makes it possible to define reusable layouts using screens. For example, the screen:

screen movable_frame(pos):
    drag:
        pos pos

        frame:
            background Frame("movable_frame.png", 10, 10)
            top_padding 20

            transclude
is meant to be a reusable component that wraps other components. Here's an example of how it can be used:

screen test:
    use movable_frame((0, 0)):
        text "You can drag me."

    use movable_frame((0, 100)):
        vbox:
            text "You can drag me too."
            textbutton "Got it!" action Return(True)
The use and transclude constructs form the basis of creator-defined screen language statements.

Pythonlink
The screen language also includes single-line and multiple-line Python statements, which can execute Python. The Python runs in the scope of the screen.

Python must not cause side effects that are visible from outside the screen. Ren'Py will run a screen multiple times, as it deems necessary. It runs a screen as part of the image prediction process, before the screen is first shown. As a result, if a screen has side effects, those side effects may occur at unpredictable times.

screen python_screen:
    python:
        test_name = "Test %d" % test_number

    text test_name

    $ test_label = "test_%d" % test_label

    textbutton "Run Test" action Jump(test_label)
Showif Statementlink
The showif statement takes a condition. It shows its children when the condition is true, and hides the children when the condition is false. When showif's children have transforms, it will supply them with ATL events to manage the show and hide process, so that Ren'Py can animate the show and hide process.

The showif statement wraps its children in a displayable that manages the show and hide process.

Multiple showif statements can be grouped together into a single showif/elif/else construct, similiar to an if statement. Unlike the if statement, showif executes all of its blocks, including Python, even if the condition is false. This is because the showif statement needs to create the children that it is hiding.

Showif delivers three events to its children:

appear
Is delivered if the condition is true when the screen is first shown, to instantly show the child.

show
Is delivered when the condition changes from false to true.

hide
Is delivered when the condition changes from true to false.

For these purposes, the condition of an elif clause is always false if any prior condition is true, while the condition of an else clause is only true when all prior conditions are false.

For example:

transform cd_transform:
    # This is run before appear, show, or hide.
    xalign 0.5 yalign 0.5 alpha 0.0

    on appear:
        alpha 1.0
    on show:
        zoom .75
        linear .25 zoom 1.0 alpha 1.0
    on hide:
        linear .25 zoom 1.25 alpha 0.0

screen countdown():
    default n = 3

    vbox:
        textbutton "3" action SetScreenVariable("n", 3)
        textbutton "2" action SetScreenVariable("n", 2)
        textbutton "1" action SetScreenVariable("n", 1)
        textbutton "0" action SetScreenVariable("n", 0)

    showif n == 3:
        text "Three" size 100 at cd_transform
    elif n == 2:
        text "Two" size 100 at cd_transform
    elif n == 1:
        text "One" size 100 at cd_transform
    else:
        text "Liftoff!" size 100 at cd_transform

label start:
    call screen countdown
Screen Statementslink
In addition to the screen statement, there are three Ren'Py script language statements that involve screens.

Show Screenlink
The show screen statement causes a screen to be shown. It takes an screen name, a series of optional clauses, and optional Python arguments which are passed to the screen. renpy.show_screen() and renpy.call_screen() take additional specific keywords.

The show screen statement takes the following clauses, some of them similar to the clauses of the Show Statement:

as
The as clause takes a name. If not specified, it defaults to the tag associated with the screen (see the Screen Statement). If that's not specified, it defaults to the name of the screen.

onlayer
The layer to show the screen on.

zorder
The zorder to show the screen on. If not specified, defaults to the zorder associated with the screen. If that's not specified, it is 0 by default.

expression
If the expression keyword is given, the expression following it will be evaluated as the screen name. To pass arguments to the screen with the expression keyword, separate the expression and arguments with the pass keyword:

$ screen_name = "my_screen"
show screen expression screen_name
# Or if you need to pass some arguments
show screen expression screen_name pass ("Foo", message="Bar")
with
This is interpreted in the same way that the with clause of a show statement is:

show screen clock_screen with dissolve
nopredict
The nopredict keyword doesn't take a value. It prevents screen prediction from occurring. During screen prediction, arguments to the screen are evaluated. Please ensure that evaluating the screen arguments does not cause unexpected side-effects to occur.

Warning

If evaluating the arguments to a screen causes side-effects to occur, your game may behave in unexpected ways.

Screens shown in this way are displayed until they are explicitly hidden. This allows them to be used for overlay purposes.

show screen overlay_screen
show screen clock_screen(hour=11, minute=30)

if rare_case:
    show rare_screen nopredict
Hide Screenlink
The hide screen statement is used to hide a screen that is currently being shown. It takes a screen tag. It first tries to find a screen with the given tag on the given layer (see the onlayer clause). If none is found, it looks for a screen with that name on the layer, regardless of the tag the screen is shown as. If none is found, nothing happens:

show screen A
show screen B as A # B replaces A (which hides it)
hide screen A # hides B, tagged as A
show screen A as B
show screen B as C

hide screen B
# hides the A screen, shown as B
# the B screen, shown as C, stays shown

hide screen B
# hides the B screen
It also takes the onlayer clause, which defaults to the screens layer.

The with clause is interpreted the same way the with clause of a Show Statement is.

Similar to the show screen statement, hide screen also takes the expression keyword, allowing to use an arbitrary expression as the screen name.

hide screen rare_screen
hide screen clock_screen with dissolve
hide screen overlay_screen
$ screen_name = "some_screen"
hide screen expression screen_name
Call Screenlink
The call screen statement shows a screen, and then hides it again at the end of the current interaction. If the screen returns a value, then the value is placed in the global _return variable.

This can be used to display an imagemap. The imagemap can place a value into the _return variable using the Return() action, or can jump to a label using the Jump() action.

The call screen statement takes various optional clauses, most of them similar to those of the Show Screen:

as
The as clause takes a name. If not specified, it defaults to the tag associated with the screen (see the Screen Statement). If that's not specified, it defaults to the name of the screen.

onlayer
The layer to show the screen on.

zorder
The zorder to show the screen on. If not specified, defaults to the zorder associated with the screen. If that's not specified, it is 0 by default.

nopredict
This keyword prevents screen prediction from occurring. During screen prediction, arguments to the screen are evaluated. Please ensure that evaluating the screen arguments does not cause unexpected side-effects to occur.

Warning

If evaluating the arguments to a screen causes side-effects to occur, your game may behave in unexpected ways.

expression
Similar to the show screen statement, call screen also takes the expression keyword, allowing to use an arbitrary expression as the screen name. This also comes with the pass keyword, allowing arguments to be passed to the screen.

with
In a call screen statement, the with clause causes a transition to occur when the screen is shown.

Since calling a screen is an interaction, and interactions trigger an implicit with None, using a with statement after the call screen instruction won't make the screen disappear using the transition, as the screen will already will be gone. To disable the implicit with None transition, pass the _with_none=False special keyword argument to the screen, as in the example below.

Other ways of triggering transitions also work, such as the [ With(dissolve), Return() ] action list.

call screen my_imagemap

call screen my_screen(side_effect_function()) nopredict

# Shows the screen with dissolve
call screen my_other_screen with dissolve
# The screens instantly hides with None, then the pixellate transition executes
with pixellate

# Shows the screen with dissolve and hides it with pixellate.
call screen my_other_screen(_with_none=False) with dissolve
with pixellate

$ screen_name = "my_screen"
call screen expression screen_name pass (foo="bar")
Screen Variantslink
Ren'Py runs both on traditional mouse-oriented devices such as Windows, Mac, and Linux PCs, and newer touch-oriented devices such as Android-based smartphones and tablets. Screen variants allow a game to supply multiple versions of a screen, and use the version that best matches the hardware it is running on.

Ren'Py chooses a screen variant to use by searching variants in the order they are listed in config.variants. The first variant that exists is used.

If the RENPY_VARIANT environment variable is present, config.variants is initialized by splitting the value of the variable on whitespace, and then appending None. Setting RENPY_VARIANT to a value such as "medium tablet touch" or "small phone touch" allows screens intended for Android devices to be tested on a PC.

If the environment variable is not present, a list of variants is built up automatically, by going through the following list in order and choosing the entries that apply to the current platform.

"steam_deck"
True if running on a Steam Deck or equivalent hardware.

"steam_big_picture"
True if running in Steam Big Picture mode.

"large"
A screen large enough that relatively small text can be comfortably read, and buttons can be easily clicked. This is used for computer screens.

"medium"
A screen where smallish text can be read, but buttons may need to grow in size so they can be comfortably pressed. This is used for tablets.

"small"
A screen where text must be expanded in order to be read. This is used for phones and televisions. (A television might be physically large, but it's often far away, making it hard to read.)

"tablet"
Defined on touchscreen based devices where the screen has a diagonal size of 6 inches or more. (In general, "medium" should be used instead of "tablet".)

"phone"
Defined on touchscreen-based devices where the diagonal size of the screen is less than 6 inches. On such a small device, it's important to make buttons large enough a user can easily choose them. (In general, "small" should be used instead of "phone".)

"touch"
Defined on touchscreen-based devices.

"tv"
Defined on television-based devices.

"firetv"
Defined on the Amazon Fire TV console. ("tv" and "small" are also defined.)

"chromeos"
Defined when running as an Android app on a Chromebook.

"android"
Defined on all Android devices.

"ios"
Defined on iOS devices, like the iPad (where "tablet" and "medium" are also defined) and the iPhone (where "phone" and "small" are also defined).

"mobile"
Defined on mobile platforms, such as Android, iOS and mobile web browsers.

"pc"
Defined on Windows, Mac OS X, and Linux. A PC is expected to have a mouse and keyboard present, to allow buttons to be hovered, and to allow precise pointing.

"web"
Defined when running inside a web browser.

None
Always defined.

An example of defining a screen variant is:

# A variant hello_world screen, used on small touch-based
# devices.
screen hello_world():
     tag example
     zorder 1
     modal False
     variant "small"

     text "Hello, World." size 30

Screen Actions, Values, and Functionslink
Ren'Py ships with a number of actions, values, and functions intended for use with screens and the screen language.

Actionslink
Actions are invoked when a button (including imagebuttons, textbuttons, and hotspots) is activated, hovered, or unhovered. Actions may determine when a button is selected or insensitive.

Along with these actions, an action may be a function that does not take any arguments. The function is called when the action is invoked. If the action returns a value, then the value is returned from an interaction.

A list of actions can usually be provided in lieu of a single action, in which case the actions in the list are run in order.

Control Actionslink
These are actions that manage screens, interaction results, and control flow.

Call(label, *args, **kwargs)link
Ends the current statement, and calls label, given as a string. Arguments and keyword arguments are passed to renpy.call().

Hide(screen=None, transition=None, _layer=None)link
This causes a screen to be hidden if it is shown.

screen
Either a string giving the name of the screen to be hidden, or None to hide the current screen.

transition
If not None, a transition that occurs when hiding the screen.

_layer
This is passed as the layer argument to renpy.hide_screen(). Ignored if screen is None.

Jump(label)link
Causes control to transfer to label, given as a string.

NullAction()link
Does nothing.

This can be used to make a button responsive to hover/unhover events, without actually doing anything.

Return(value=None)link
Causes the current interaction to return the supplied non-None value. This is often used with menus and imagemaps, to select what the return value of the interaction is. If the screen was called using the call screen statement, the return value is placed in the _return variable.

When in a menu, this returns from the menu. (The value should be None in this case.)

Show(screen, transition=None, *args, **kwargs)link
This causes another screen to be shown. screen is a string giving the name of the screen. The arguments are passed to the screen being shown.

If not None, transition is used to show the new screen.

This action takes the _layer, _zorder and _tag keyword arguments, which have the same meaning as in the renpy.show_screen() function.

ShowTransient(screen, transition=None, *args, **kwargs)link
Shows a transient screen. A transient screen will be hidden when the current interaction completes. The arguments are passed to the screen being shown.

If not None, transition is use to show the new screen.

This action takes the _layer, _zorder and _tag keyword arguments, which have the same meaning as in the renpy.show_screen() function.

ToggleScreen(screen, transition=None, *args, **kwargs)link
This toggles the visibility of screen. If it is not currently shown, the screen is shown with the provided arguments. Otherwise, the screen is hidden.

If not None, transition is use to show and hide the screen.

This action takes the _layer, _zorder and _tag keyword arguments, which have the same meaning as in the renpy.show_screen() function.

Data Actionslink
These set or toggle data.

AddToSet(set, value)link
Adds value to set.

set
The set to add to. This may be a Python set or list, in which case the value is appended to the list.

value
The value to add or append.

RemoveFromSet(set, value)link
Removes value from set.

set
The set to remove from. This may be a set or list.

value
The value to remove.

SetDict(dict, key, value)link
Causes the value of key in dict to be set to value. This also works with lists, where key is the index at which the value will be set.

SetField(object, field, value)link
Causes the a field on an object to be set to a given value. object is the object, field is a string giving the name of the field to set, and value is the value to set it to.

SetLocalVariable(name, value)link
Causes the variable called name to be set to value in the current local context.

This function is only useful in a screen that has been used by another screen, as it provides a way of setting the value of a variable inside the used screen. In all other cases, SetScreenVariable() should be preferred, as it allows more of the screen to be cached.

For more information, see Use.

This must be created in the context that the variable is set in - it can't be passed in from somewhere else.

SetScreenVariable(name, value)link
Causes the variable called name associated with the current screen to be set to value. In a used screen, this action sets the variable in the context of the screen containing the used one(s). To set variables within a used screen, and only in that case, use SetLocalVariable() instead.

SetVariable(name, value)link
Causes the variable called name to be set to value.

The name argument must be a string, and can be a simple name like "strength", or one with dots separating the variable from fields, like "hero.strength" or "persistent.show_cutscenes".

ToggleDict(dict, key, true_value=None, false_value=None)link
Toggles the value of key in dict. It also works on lists, in which case key is the index of the value to toggle. Toggling means to invert the value when the action is performed.

true_value
If not None, then this is the true value used.

false_value
If not None, then this is the false value used.

ToggleField(object, field, true_value=None, false_value=None)link
Toggles field on object. Toggling means to invert the boolean value of that field when the action is performed.

true_value
If not None, then this is the true value we use.

false_value
If not None, then this is the false value we use.

ToggleLocalVariable(name, true_value=None, false_value=None)link
Toggles the value of the variable called name in the current local context.

This function is only useful in a screen that has been used by another screen, as it provides a way of setting the value of a variable inside the used screen. In all other cases, ToggleScreenVariable() should be preferred, as it allows more of the screen to be cached.

For more information, see Use.

This must be created in the context that the variable is set in - it can't be passed in from somewhere else.

true_value
If not None, then this is the true value used.

false_value
If not None, then this is the false value used.

ToggleScreenVariable(name, true_value=None, false_value=None)link
Toggles the value of the variable called name in the current screen. In a used screen, this action accesses and sets the given variable in the context of the screen containing the used one(s). To access and set variables within a used screen, and only in that case, use ToggleLocalVariable() instead.

true_value
If not None, then this is the true value used.

false_value
If not None, then this is the false value used.

ToggleSetMembership(set, value)link
Toggles the membership of value in set. If the value is not in the set, it's added. Otherwise, it is removed.

Buttons with this action are marked as selected if and only if the value is in the set.

set
The set to add to or remove from. This may be a set or list. In the case of a list, new items are appended.

value
The value to add or append.

ToggleVariable(variable, true_value=None, false_value=None)link
Toggles the variable whose name is given in variable.

The variable argument must be a string, and can be a simple name like "strength", or one with dots separating the variable from fields, like "hero.strength" or "persistent.show_cutscenes".

true_value
If not None, then this is the true value used.

false_value
If not None, then this is the false value used.

Menu Actionslink
These actions invoke menus, or are primarily useful while in the main or game menus.

MainMenu(confirm=True, save=True)link
Causes Ren'Py to return to the main menu.

confirm
If true, causes Ren'Py to ask the user if he wishes to return to the main menu, rather than returning directly.

save
If true, the game is saved in _quit_slot before Ren'Py restarts and returns the user to the main menu. The game is not saved if _quit_slot is None.

Quit(confirm=None)link
Quits the game.

confirm
If true, prompts the user if he wants to quit, rather than quitting directly. If None, asks if and only if the user is not at the main menu.

ShowMenu(screen=None, *args, **kwargs)link
Causes us to enter the game menu, if we're not there already. If we are in the game menu, then this shows a screen or jumps to a label.

screen is usually the name of a screen, which is shown using the screen mechanism. If the screen doesn't exist, then "_screen" is appended to it, and that label is jumped to.

If the optional keyword argument _transition is given, the menu will change screens using the provided transition. If not manually specified, the default transition is config.intra_transition.

ShowMenu("load")

ShowMenu("save")

ShowMenu("preferences")

This can also be used to show user-defined menu screens. For example, if one has a "stats" screen defined, one can show it as part of the game menu using:

ShowMenu("stats")

ShowMenu without an argument will enter the game menu at the default screen, taken from _game_menu_screen.

Extra arguments and keyword arguments are passed on to the screen

Start(label='start')link
Causes Ren'Py to jump out of the menu context to the named label. The main use of this is to start a new game from the main menu. Common uses are:

Start() - Start at the start label.

Start("foo") - Start at the "foo" label.

File Actionslink
These actions handle saving, loading, and deleting of files. Many of these take the name and page arguments.

name
The name of the file to save to. This can be a string or an integer. It's combined with the page to create the filename.

page
The page that this action acts on. This is one of "auto", "quick", or a positive integer. If None, the page is determined automatically, based on a persistent page number.

These are converted to a slot name using config.file_slotname_callback, if it's set.

FileAction(name, page=None, **kwargs)link
"Does the right thing" with the file. This means loading it if the load screen is showing (current screen is named "load"), and saving otherwise.

name
The name of the slot to save to or load from. If None, an unused slot (a large number based on the current time) will be used.

page
The page that the file will be saved to or loaded from. If None, the current page is used.

Other keyword arguments are passed to FileLoad or FileSave.

FileDelete(name, confirm=True, page=None, slot=False)link
Deletes the file.

name
The name of the slot to delete.

confirm
If true and not at the main menu, prompt for confirmation before loading the file.

page
The page that the file will be loaded from. If None, the current page is used.

slot
If True, name is taken to be a slot name, and page is ignored.

FileLoad(name, confirm=True, page=None, newest=True, cycle=False, slot=False)link
Loads the file.

name
The name of the slot to load from. If None, an unused slot will be used, and hence the file will not be loadable.

confirm
If true and not at the main menu, prompt for confirmation before loading the file.

page
The page that the file will be loaded from. If None, the current page is used.

newest
If true, the button is selected if this is the newest file.

cycle
Ignored.

slot
If True, name is taken to be a slot name, and page is ignored.

FilePage(page)link
Sets the file page to page, which should be one of "auto", "quick", or an integer.

FilePageNext(max=None, wrap=False, auto=True, quick=True)link
Goes to the next file page.

max
If set, this should be an integer that gives the number of the maximum file page we can go to.

wrap
If true, we can go to the first page when on the last file page if max is set.

auto
If true and wrap is set, this can bring the player to the page of automatic saves.

quick
If true and wrap is set, this can bring the player to the page of automatic saves.

FilePagePrevious(max=None, wrap=False, auto=True, quick=True)link
Goes to the previous file page, if possible.

max
If set, this should be an integer that gives the number of the maximum file page we can go to. This is required to enable wrap.

wrap
If true, we can go to the last page when on the first file page if max is set.

auto
If true, this can bring the player to the page of automatic saves.

quick
If true, this can bring the player to the page of automatic saves.

FileSave(name, confirm=True, newest=True, page=None, cycle=False, slot=False, action=None)link
Saves the file.

The button with this slot is selected if it's marked as the newest save file.

name
The name of the slot to save to. If None, an unused slot (a large number based on the current time) will be used.

confirm
If true, then we will prompt before overwriting a file.

newest
Ignored.

page
The name of the page that the slot is on. If None, the current page is used.

cycle
If true, then saves on the supplied page will be cycled before being shown to the user. config.quicksave_slots slots are used in the cycle.

slot
If True, name is taken to be a slot name, and page is ignored.

action
An action that is run after the save is complete. This is only run if the save is successful.

FileTakeScreenshot()link
Take a screenshot to be used when the game is saved. This can be used to ensure that the screenshot is accurate, by taking a picture of the screen before a file save screen is shown.

QuickLoad(confirm=True)link
Performs a quick load.

confirm
If true and not at the main menu, prompt for confirmation before loading the file.

QuickSave(message='Quick save complete.', newest=False)link
Performs a quick save.

message
A message to display to the user when the quick save finishes.

newest
Set to true to mark the quicksave as the newest save.

Sync Actionslink
DownloadSync()link
This action begins the process of downloading a Sync from the Ren'Py Sync server.

UploadSync()link
This action begins the process of uploading the most recent saves to the Ren'Py Sync server.

Audio Actionslink
The concept of channels and how they work, as well as most information about audio in Ren'Py, is explained at Audio.

GetMixer(mixer, db=False)link
Returns the volume of mixer.

db
If true, returns the volume in decibels. If false, the default, returns the volume as a number between 0.0 and 1.0.

PauseAudio(channel, value=True)link
Sets the pause flag for channel.

If value is True, the channel is paused. If False, the channel is unpaused. If "toggle", the pause flag will be toggled.

Play(channel, file, selected=None, **kwargs)link
Causes an audio file to be played on a given channel.

channel
The channel to play the sound on.

file
The file to play.

selected
If True, buttons using this action will be marked as selected if the file is playing on the channel. If False, this action will not cause the button to start playing. If None, the button is marked selected if the channel is a music channel, and not otherwise.

Any other keyword arguments are passed to renpy.music.play().

Queue(channel, file, **kwargs)link
Causes an audio file to be queued on a given channel.

channel
The channel to play the sound on.

file
The file to play.

Any keyword arguments are passed to renpy.music.queue()

SetMixer(mixer, volume)link
Sets the volume of mixer to value.

mixer
The mixer to set the volume of. A string, usually one of "main", "music", "sfx", or "voice". See Volume for more information about mixers.

value
The value to set the volume to. A number between 0.0 and 1.0, inclusive.

SetMute(mixer, mute)link
Sets the mute status of one or more mixers. When a mixer is muted, audio channels associated with that mixer will stop playing audio.

mixer
Either a single string giving a mixer name, or a list of strings giving a list of mixers. The strings should be mixer names.

mute
True to mute the mixer, False to ummute it.

Stop(channel, **kwargs)link
Causes an audio channel to be stopped.

channel
The channel to stop the sound on.

Any keyword arguments are passed to renpy.music.stop()

ToggleMute(mixer)link
Toggles the mute status of one or more mixers.

mixer
Either a single string giving a mixer name, or a list of strings giving a list of mixers. The strings should be mixer names.

Focus Actionslink
CaptureFocus(name='default')link
If a displayable is focused when this action is run, the rectangle containing that displayable is stored with the name name. This rectangle can then be retrieved with the GetFocusRect() action, or the focus property of the Nearrect displayable.

If no displayable is focused, the previous capture with that name is removed.

name
The name of the focus rectangle to store. This should be a string. The name "tooltip" is special, as it is automatically captured when the tooltip is changed.

ClearFocus(name='default')link
Clears a stored focus rectangle captured with CaptureFocus(). If name is None, all focus rectangles are cleared.

GetFocusRect(name='default')link
If a focus rectangle with the given name has been stored (either with CaptureFocus(), or automatically by a tooltip, returns the a (x, y, h, w) rectangle. Otherwise, returns None.

name
The name of the focus rectangle to retrieve. The name "tooltip" is special, as it is automatically captured when the tooltip is changed.

ToggleFocus(name='default')link
If the focus rectangle exists, clears it, otherwise captures it.

name
The name of the focus rectangle to store. This should be a string. The name "tooltip" is special, as it is automatically captured when the tooltip is changed.

Other Actionslink
These are other actions, not found anywhere else.

Confirm(prompt, yes, no=None, confirm_selected=False)link
Prompts the user for confirmation of an action. If the user clicks yes, the yes action is performed. Otherwise, the no action is performed.

prompt
The prompt to display to the user.

confirm_selected
If true, the prompt will be displayed even if the yes action is already selected. If false (the default), the prompt will not be displayed if the yes action is selected.

The sensitivity and selectedness of this action match those of the yes action.

See layout.yesno_screen() for a function version of this action.

DisableAllInputValues()link
Disables all active InputValue. This will re-focus the default InputValue, if there is one. Otherwise, no InputValue will be focused.

ExecJS(code)link
Executes the given JavaScript source code. This is only supported on the web, and will raise an exception on other platforms. The script is executed asynchronously in the window context, and the return value is not available.

code
The JavaScript code to execute.

Function(callable, *args, _update_screens=True, **kwargs)link
This Action calls callable(*args, **kwargs).

callable
Callable object. This assumes that if two callables compare equal, calling either one will be equivalent.

args
positional arguments to be passed to callable.

kwargs
keyword arguments to be passed to callable.

_update_screens
When true, the interaction restarts and the screens are updated after the function returns.

If the function returns a non-None value, the interaction stops and returns that value. (When called using the call screen statement, the result is placed in the _return variable.)

Instead of using a Function action, you can define your own subclass of the Action class. This lets you name the action, and determine when it should be selected and sensitive.

Help(help=None)link
Displays help.

help
A string that is used to find help. This is used in the following way:

If a label with this name exists, the label is called in a new context.

Otherwise, this is interpreted as giving the name of a file that should be opened in a web browser.

If help is None, config.help is used as the default value. If it is also None, the config.help_screen screen is shown in a new context, if it exists. Otherwise, does nothing.

HideInterface()link
Causes the interface to be hidden until the user clicks. This is typically what happens when hitting the H key in a Ren'Py game.

If(expression, true=None, false=None)link
This returns true if expression is true, and false otherwise. Use this to select an action based on an expression. Note that the default, None, can be used as an action that causes a button to be disabled.

InvertSelected(action)link
This inverts the selection state of the provided action, while proxying over all of the other methods.

MouseMove(x, y, duration=0)link
Move the mouse pointer to x, y. If the device does not have a mouse pointer or if the "automatic move" preference is False, this does nothing.

duration
The time it will take to perform the move, in seconds. During this time, the mouse may be unresponsive.

Notify(message)link
Displays message using renpy.notify().

OpenDirectory(directory)link
Opens directory in a file browser. directory is relative to config.basedir.

OpenURL(url)link
Causes url to be opened in a web browser.

QueueEvent(event, up=False)link
Queues the given event using renpy.queue_event().

RestartStatement()link
This action causes Ren'Py to rollback to before the current statement, and then re-run the current statement. This may be used when changing a persistent variable that affects how the statement is displayed.

If run in a menu context, this waits until the player exits to a top-level context before performing the rollback.

RollForward()link
This action causes a rollforward to occur, if a roll forward is possible. Otherwise, it is insensitive.

Rollback(*args, force='menu', **kwargs)link
This action causes a rollback to occur, when a rollback is possible. Otherwise, nothing happens.

The arguments are given to renpy.rollback(). This includes the force argument which here defaults to "menu".

RollbackToIdentifier(identifier)link
This causes a rollback to an identifier to occur. Rollback identifiers are returned as part of HistoryEntry objects.

Screenshot()link
Takes a screenshot.

Scroll(id, direction, amount='step', delay=0.0)link
Causes a Bar, Viewport, or Vpgrid to scroll.

id
The id of a bar, viewport, or vpgrid in the current screen.

direction
For a vbar, one of "increase" or "decrease". For a viewport or vpgrid, one of "horizontal increase", "vertical increase", "horizontal decrease", or "vertical decrease".

amount
The amount to scroll by. This can be a number of pixels, or else "step" or "page".

delay
If non-zero, the scroll will be animated for this many seconds.

SelectedIf(expression)link
This indicates that one action in a list of actions should be used to determine if a button is selected. This only makes sense when the button has a list of actions. For example:

# The button is selected only if mars_flag is True
textbutton "Marsopolis":
    action [ SelectedIf(SetVariable("mars_flag", True)), SetVariable("on_mars", True) ]
The action inside SelectedIf is run normally when the button is clicked.

SensitiveIf(expression)link
This indicates that one action in a list of actions should be used to determine if a button is sensitive. This only makes sense when the button has a list of actions. For example:

# The button is sensitive only if mars_flag is True
textbutton "Marsopolis":
    action [ SensitiveIf(SetVariable("mars_flag", True)), SetVariable("on_mars", True) ]
The action inside SensitiveIf is run normally when the button is clicked.

Skip(fast=False, confirm=False)link
Causes the game to begin skipping. If the game is in a menu context, then this returns to the game. Otherwise, it just enables skipping.

fast
If true, skips directly to the next menu choice.

confirm
If true, asks for confirmation before beginning skipping.

With(transition)link
Causes transition to occur.

Additional actions are available in other pages of this documentation, such as Language, Replay and EndReplay, gui.SetPreference and gui.TogglePreference, StylePreference, and the voice actions.

Other actions can be created using the Action class.

Bar Valueslink
Bar values are used with bars, to set the bar value, and to allow the bar to adjust an underlying property. To create a new bar value, subclass the BarValue class. All classes that have the step keyword also accept the force_step keyword whose behavior is described in ui.adjustment().

AnimatedValue(value=0.0, range=1.0, delay=1.0, old_value=None)link
This animates a value, taking delay seconds to vary the value from old_value to value.

value
The value itself, a number.

range
The range of the value, a number.

delay
The time it takes to animate the value, in seconds. Defaults to 1.0.

old_value
The old value. If this is None, then the value is taken from the AnimatedValue we replaced, if any. Otherwise, it is initialized to value.

AudioPositionValue(channel='music', update_interval=0.1)link
A value that shows the playback position of the audio file playing in channel.

update_interval
How often the value updates, in seconds.

DictValue(dict, key, range, max_is_zero=False, style='bar', offset=0, step=None, action=None, force_step=False)link
A value that allows the user to adjust the value of a key in a dict.

dict
The dict.

key
The key.

range
The range to adjust over.

max_is_zero
If True, then when the value of a key is zero, the value of the bar will be range, and all other values will be shifted down by 1. This works both ways - when the bar is set to the maximum, the value of a key is set to 0.

style
The styles of the bar created.

offset
An offset to add to the value.

step
The amount to change the bar by. If None, defaults to 1/10th of the bar.

action
If not None, an action to call when the field has changed.

FieldValue(self, object, field, range, max_is_zero=False, style='bar', offset=0, step=None, action=None, force_step=False)link
A bar value that allows the user to adjust the value of a field on an object.

object
The object.

field
The field, a string.

range
The range to adjust over.

max_is_zero
If True, then when the field is zero, the value of the bar will be range, and all other values will be shifted down by 1. This works both ways - when the bar is set to the maximum, the field is set to 0.

This is used internally, for some preferences.

style
The styles of the bar created.

offset
An offset to add to the value.

step
The amount to change the bar by. If None, defaults to 1/10th of the bar.

action
If not None, an action to call when the field has changed.

MixerValue(mixer)link
The value of an audio mixer.

mixer
The name of the mixer to adjust. This is usually one of "main", "music", "sfx", or "voice". See Volume for more information.

ScreenVariableValue(variable, range, max_is_zero=False, style='bar', offset=0, step=None, action=None, force_step=False)link
A bar value that adjusts the value of a variable in a screen.

variable
A string giving the name of the variable to adjust.

range
The range to adjust over.

max_is_zero
If True, then when the field is zero, the value of the bar will be range, and all other values will be shifted down by 1. This works both ways - when the bar is set to the maximum, the field is set to 0.

This is used internally, for some preferences.

style
The styles of the bar created.

offset
An offset to add to the value.

step
The amount to change the bar by. If None, defaults to 1/10th of the bar.

action
If not None, an action to call when the field has changed.

StaticValue(value=0.0, range=1.0)link
This allows a value to be specified statically.

value
The value itself, a number.

range
The range of the value.

VariableValue(variable, range, max_is_zero=False, style='bar', offset=0, step=None, action=None, force_step=False)link
A bar value that allows the user to adjust the value of a variable in the default store.

variable
The variable parameter must be a string, and can be a simple name like "strength", or one with dots separating the variable from fields, like "hero.strength" or "persistent.show_cutscenes".

range
The range to adjust over.

max_is_zero
If True, then when the field is zero, the value of the bar will be range, and all other values will be shifted down by 1. This works both ways - when the bar is set to the maximum, the field is set to 0.

This is used internally, for some preferences.

style
The styles of the bar created.

offset
An offset to add to the value.

step
The amount to change the bar by. If None, defaults to 1/10th of the bar.

action
If not None, an action to call when the field has changed.

XScrollValue(viewport)link
The value of an adjustment that horizontally scrolls the viewport with the given id, on the current screen. The viewport must be defined before a bar with this value is.

YScrollValue(viewport)link
The value of an adjustment that vertically scrolls the viewport with the given id, on the current screen. The viewport must be defined before a bar with this value is.

Input Valueslink
Input values are used with text inputs, to set the default text, to accept changed text, to respond to the enter key, and to determine if the text is editable by default. To create a new input value, subclass the InputValue class.

Ren'Py-defined input values inherit from InputValue, which means that all values also include Enable(), Disable(), and Toggle() methods that return actions that enable, disable, and toggle editing, respectively. See also the DisableAllInputValues() action.

DictInputValue(dict, key, default=True, returnable=False)link
An input value that updates key in dict.

default
If true, this input can be editable by default.

returnable
If true, the value of this input will be returned when the user presses enter.

FieldInputValue(object, field, default=True, returnable=False)link
An input value that updates field on object.

field
A string giving the name of the field.

default
If true, this input can be editable by default.

returnable
If true, the value of this input will be returned when the user presses enter.

FilePageNameInputValue(pattern='Page {}', auto='Automatic saves', quick='Quick saves', page=None, default=False)link
An input value that updates the name of a file page.

pattern
This is used for the default name of a page. Python-style substition is performed, such that {} is replaced with the number of the page.

auto
The name of the autosave page.

quick
The name of the quicksave page.

page
If given, the number of the page to display. This should usually be left as None, to give the current page.

default
If true, this input can be editable by default.

ScreenVariableInputValue(variable, default=True, returnable=False)link
An input value that updates variable.

variable
A string giving the name of the variable to update.

default
If true, this input can be editable by default.

returnable
If true, the value of this input will be returned when the user presses enter.

VariableInputValue(variable, default=True, returnable=False)link
An input value that updates variable.

variable
A string giving the name of the variable to update.

The variable parameter must be a string, and can be a simple name like "strength", or one with dots separating the variable from fields, like "hero.strength" or "persistent.show_cutscenes".

default
If true, this input can be editable by default.

returnable
If true, the value of this input will be returned when the user presses enter.

Functions and Classeslink
These functions and classes are useful in association with screens.

Preferenceslink
While all preferences can be defined based on the Actions and Values given above, it requires some knowledge of Ren'Py to figure out the correct one to use. The preferences constructor makes this easy, by creation an action or value, as appropriate, based on the names used in the default preferences screen.

Preference(name, value=None, range=None)link
This constructs the appropriate action or value from a preference. The preference name should be the name given in the standard menus, while the value should be either the name of a choice, "toggle" to cycle through choices, a specific value, or left off in the case of buttons.

Actions that can be used with buttons and hotspots are:

Preference("display", "fullscreen") - displays in fullscreen mode.

Preference("display", "window") - displays in windowed mode at 1x normal size.

Preference("display", 2.0) - displays in windowed mode at 2.0x normal size.

Preference("display", "any window") - displays in windowed mode at the previous size.

Preference("display", "toggle") - toggle display mode.

Preference("transitions", "all") - show all transitions.

Preference("transitions", "none") - do not show transitions.

Preference("transitions", "toggle") - toggle transitions.

Preference("video sprites", "show") - show all video sprites.

Preference("video sprites", "hide") - fall back to images where possible.

Preference("video sprites", "toggle") - toggle image fallback behavior.

Preference("show empty window", "show") - Allow the "window show" and "window auto" statement to show an empty window outside of the say statement.

Preference("show empty window", "hide") - Prevent the above.

Preference("show empty window", "toggle") - Toggle the above.

Preference("text speed", 0) - make text appear instantaneously.

Preference("text speed", 142) - set text speed to 142 characters per second.

Preference("joystick") - Show the joystick preferences.

Preference("skip", "seen") - Only skip seen messages.

Preference("skip", "all") - Skip unseen messages.

Preference("skip", "toggle") - Toggle between skip seen and skip all.

Preference("begin skipping") - Starts skipping.

Preference("after choices", "skip") - Skip after choices.

Preference("after choices", "stop") - Stop skipping after choices.

Preference("after choices", "toggle") - Toggle skipping after choices.

Preference("auto-forward time", 0) - Set the auto-forward time to infinite.

Preference("auto-forward time", 10) - Set the auto-forward time (unit is seconds per 250 characters).

Preference("auto-forward", "enable") - Enable auto-forward mode.

Preference("auto-forward", "disable") - Disable auto-forward mode.

Preference("auto-forward", "toggle") - Toggle auto-forward mode.

Preference("auto-forward after click", "enable") - Remain in auto-forward mode after a click.

Preference("auto-forward after click", "disable") - Disable auto-forward mode after a click.

Preference("auto-forward after click", "toggle") - Toggle auto-forward after click.

Preference("automatic move", "enable") - Allow Ren'Py to move the mouse automatically using the MouseMove() action.

Preference("automatic move", "disable") - Disable the MouseMove() action.

Preference("automatic move", "toggle") - Toggle automatic mouse mode.

Preference("wait for voice", "enable") - Wait for the currently playing voice to complete before auto-forwarding.

Preference("wait for voice", "disable") - Do not wait for the currently playing voice to complete before auto-forwarding.

Preference("wait for voice", "toggle") - Toggle wait voice.

Preference("voice sustain", "enable") - Sustain voice past the current interaction.

Preference("voice sustain", "disable") - Don't sustain voice past the current interaction.

Preference("voice sustain", "toggle") - Toggle voice sustain.

Preference("music mute", "enable") - Mute the music mixer.

Preference("music mute", "disable") - Un-mute the music mixer.

Preference("music mute", "toggle") - Toggle music mute.

Preference("sound mute", "enable") - Mute the sound mixer.

Preference("sound mute", "disable") - Un-mute the sound mixer.

Preference("sound mute", "toggle") - Toggle sound mute.

Preference("voice mute", "enable") - Mute the voice mixer.

Preference("voice mute", "disable") - Un-mute the voice mixer.

Preference("voice mute", "toggle") - Toggle voice mute.

Preference("mixer <mixer> mute", "enable") - Mute the specified mixer.

Preference("mixer <mixer> mute", "disable") - Unmute the specified mixer.

Preference("mixer <mixer> mute", "toggle") - Toggle mute of the specified mixer.

Preference("all mute", "enable") - Mute each individual mixer.

Preference("all mute", "disable") - Unmute each individual mixer.

Preference("all mute", "toggle") - Toggle mute of each individual mixer.

Preference("main volume", 0.5) - Set the adjustment applied to all channels.

Preference("music volume", 0.5) - Set the music volume.

Preference("sound volume", 0.5) - Set the sound volume.

Preference("voice volume", 0.5) - Set the voice volume.

Preference("mixer <mixer> volume", 0.5) - Set the specified mixer volume.

Preference("emphasize audio", "enable") - Emphasize the audio channels found in config.emphasize_audio_channels.

Preference("emphasize audio", "disable") - Do not emphasize audio channels.

Preference("emphasize audio", "toggle") - Toggle emphasize audio.

Preference("self voicing", "enable") - Enables self-voicing.

Preference("self voicing", "disable") - Disable self-voicing.

Preference("self voicing", "toggle") - Toggles self-voicing.

Preference("self voicing volume drop", 0.5) - Drops the volume of non-voice mixers when self voicing is active.

Preference("clipboard voicing", "enable") - Enables clipboard-voicing.

Preference("clipboard voicing", "disable") - Disable clipboard-voicing.

Preference("clipboard voicing", "toggle") - Toggles clipboard-voicing.

Preference("debug voicing", "enable") - Enables self-voicing debug

Preference("debug voicing", "disable") - Disable self-voicing debug.

Preference("debug voicing", "toggle") - Toggles self-voicing debug.

Preference("rollback side", "left") - Touching the left side of the screen causes rollback.

Preference("rollback side", "right") - Touching the right side of the screen causes rollback.

Preference("rollback side", "disable") - Touching the screen will not cause rollback.

Preference("gl powersave", True) - Drop framerate to allow for power savings.

Preference("gl powersave", False) - Do not drop framerate to allow for power savings.

Preference("gl powersave", "auto") - Enable powersave when running on battery.

Preference("gl framerate", None) - Runs at the display framerate.

Preference("gl framerate", 60) - Runs at the given framerate.

Preference("gl tearing", True) - Tears rather than skipping frames.

Preference("gl tearing", False) - Skips frames rather than tearing.

Preference("font transform", "opendyslexic") - Sets the accessibility font transform to opendyslexic.

Preference("font transform", "dejavusans") - Sets the accessibility font transform to deja vu sans.

Preference("font transform", None) - Disables the accessibility font transform.

Preference("font size", 1.0) - Sets the accessibility font size scaling factor.

Preference("font line spacing", 1.0) - Sets the accessibility font vertical spacing scaling factor.

Preference("system cursor", "disable") - Use the cursor defined in config.mouse or config.mouse_displayable.

Preference("system cursor", "enable") - Use the system cursor, ignoring config.mouse.

Preference("system cursor", "toggle") - Toggle system cursor.

Preference("high contrast text", "enable") - Enables white text on a black background.

Preference("high contrast text", "disable") - Disables high contrast text.

Preference("high contrast text", "toggle") - Toggles high contrast text.

Preference("audio when minimized", "enable") - Enable sounds playing when the window has been minimized.

Preference("audio when minimized", "disable") - Disable sounds playing when the window has been minimized.

Preference("audio when minimized", "toggle") - Toggle sounds playing when the window has been minimized.

Preference("audio when unfocused", "enable") - Enable sounds playing when the window is not in focus.

Preference("audio when unfocused", "disable") - Disable sounds playing when the window is not in focus.

Preference("audio when unfocused", "toggle") - Toggle sounds playing when the window is not in focus.

Preference("web cache preload", "enable") - Will cause the web cache to be preloaded.

Preference("web cache preload", "disable") - Will cause the web cache to not be preloaded, and preloaded data to be deleted.

Preference("web cache preload", "toggle") - Will toggle the web cache preload state.

Preference("voice after game menu", "enable") - Will cause the voice to continue being played when entering the game menu.

Preference("voice after game menu", "disable") - Will cause the voice to stop being played when entering the game menu.

Preference("voice after game menu", "toggle") - Will toggle the voice after game menu state.

Values that can be used with bars are:

Preference("text speed")

Preference("auto-forward time")

Preference("main volume")

Preference("music volume")

Preference("sound volume")

Preference("voice volume")

Preference("mixer <mixer> volume")

Preference("self voicing volume drop")

Preference("font size")

Preference("font line spacing")

The range parameter can be given to give the range of certain bars. For "text speed", it defaults to 200 cps. For "auto-forward time", it defaults to 30.0 seconds per chunk of text. (These are maximums, not defaults.)

Actions that can be used with buttons are:

Preference("renderer menu") - Show the renderer menu.

Preference("accessibility menu") - Show the accessibility menu.

These screens are intended for internal use, and are not customizable.

GetCharacterVolume(voice_tag)link
This returns the volume associated with voice tag, a number between 0.0 and 1.0, which is interpreted as a fraction of the mixer volume for the voice channel.

Gamepadlink
These functions and actions work with the gamepad.

GamepadCalibrate()link
An action that invokes the gamepad calibration routine.

GamepadExists(developer=True)link
A function that returns true if a gamepad is present, and false otherwise.

developer
Forces this function to always return true while config.developer is true.

File Functionslink
These functions return useful information about files. They use the same default page as the file actions.

FileCurrentPage()link
Returns the current file page as a string.

classFileCurrentScreenshot(empty=None, **properties)link
A displayable that shows the screenshot that will be saved with the current file, if a screenshot has been taken when entering a menu or with FileTakeScreenshot().

If there is no current screenshot, empty is shown in its place. (If empty is None, it defaults to Null().)

FileJson(name, key=None, empty=None, missing=None, page=None, slot=False)link
Accesses the Json information associated with name.

This always returns empty if the slot is empty.

If not, and if key is None, returns the entire dictionary containing the Json data.

Otherwise, this returns json[key] if key is defined on the json object of the save, and missing if there is a save with the given name, but it does not contain key.

Such Json data is added to a save slot by callbacks registered using config.save_json_callbacks.

FileLoadable(name, page=None, slot=False)link
This is a function that returns true if the file is loadable, and false otherwise.

FileNewest(name, page=None, slot=False)link
Returns True if this is the newest file slot, or False otherwise.

FilePageName(auto='a', quick='q')link
Returns the name of the current file page, as a string. If a normal page, this returns the page number. Otherwise, it returns auto or quick.

FileSaveName(name, empty='', page=None, slot=False)link
Return the save_name that was in effect when the file was saved, or empty if the file does not exist.

FileScreenshot(name, empty=None, page=None, slot=False)link
Returns the screenshot associated with the given file. If the file is not loadable, then empty is returned, unless it's None, in which case, a Null displayable is created.

The return value is a displayable.

FileSlotName(slot, slots_per_page, auto='a', quick='q', format='%s%d')link
Returns the name of the numbered slot. This assumes that slots on normal pages are numbered in a linear order starting with 1, and that page numbers start with 1. When slot is 2, and slots_per_page is 10, and the other variables are the defaults:

When the first page is showing, this returns "2".

When the second page is showing, this returns "12".

When the auto page is showing, this returns "a2".

When the quicksave page is showing, this returns "q2".

slot
The number of the slot to access.

slots_per_page
The number of slots per page.

auto
A prefix to use for the auto page.

quick
A prefix to use for the quick page.

format
The formatting code to use. This is given two arguments: A string giving the page prefix, and an integer giving the slot number.

FileTime(name, format='%b %d, %H:%M', empty='', page=None, slot=False)link
Returns the time the file was saved, formatted according to the supplied format. If the file is not found, empty is returned.

The return value is a string.

FileUsedSlots(page=None, highest_first=True)link
Returns a list of used numeric file slots on the page.

page
The name of the page that will be scanned. If None, the current page is used.

highest_first
If true, the highest-numbered file slot is listed first. Otherwise, the lowest-numbered slot is listed first.

Side Image Functionslink
This function returns the side image to use.

SideImage()link
Returns the side image associated with the currently speaking character, or a Null displayable if no such side image exists.

Other Functionslink
CurrentScreenName()link
Returns the name of the current screen, or None if there is no current screen. In the case of a screen including by the use screen, this returns the name of the screen that is doing the including, not the name of the screen being included.

Tooltipslink
Tooltips can now be accessed by the tooltip property available on all displayables, and the GetTooltip function. The GetTooltip function returns the value of the tooltip property when the displayable gains focus.

As a reminder, values passed to the tooltip property must support equality.

Here's an example:

screen tooltip_example():
    vbox:
        textbutton "North":
            action Return("n")
            tooltip "To meet a polar bear."

        textbutton "South":
            action Return("s")
            tooltip "All the way to the tropics."

        textbutton "East":
            action Return("e")
            tooltip "So we can embrace the dawn."

        textbutton "West":
            action Return("w")
            tooltip "Where to go to see the best sunsets."

        $ tooltip = GetTooltip()

        if tooltip:
            text "[tooltip]"
The Nearrect displayable can be used to display "popup-style" tooltips, and has support for a special "tooltip" focus name, that is set to the location of the last focus that set a tooltip:

screen tooltip_example2():
    frame:

        padding (20, 20)
        align (.5, .3)

        has vbox

        textbutton "North":
            action Return("n")
            tooltip "To meet a polar bear."

        textbutton "South":
            action Return("s")
            tooltip "All the way to the tropics."

        textbutton "East":
            action Return("e")
            tooltip "So we can embrace the dawn."

        textbutton "West":
            action Return("w")
            tooltip "Where to go to see the best sunsets."

    # This has to be the last thing shown in the screen.

    $ tooltip = GetTooltip()

    if tooltip:

        nearrect:
            focus "tooltip"
            prefer_top True

            frame:
                xalign 0.5
                text tooltip
GetTooltip(screen=None, last=False)link
Returns the tooltip of the currently focused displayable, or None if no displayable is focused.

screen
If not None, this should be the name or tag of a screen. If given, this function only returns the tooltip if the focused displayable is part of the screen.

last
If true, returns the last non-None value this function would have returned.

Legacylink
Warning

This has been obsoleted by the above, but you might see it in older projects.

The tooltip class changes the screen when a button is hovered.

classTooltip(default)link
A tooltip object can be used to define a portion of a screen that is updated when the mouse hovers an area.

A tooltip object has a value field, which is set to the default value passed to the constructor when the tooltip is created. When a button using an action created by the tooltip is hovered, the value field changes to the value associated with the action.

Action(value)link
Returns an action that is generally used as the hovered property of a button. When the button is hovered, the value field of this tooltip is set to value. When the button loses focus, the value field of this tooltip reverts to the default.

When using a tooltip with a screen, the usual behavior is to create a tooltip object in a default statement. The value of the tooltip and the action method can then be used within the screen. The order of use within a screen doesn't matter – it's possible to use the value before an action is used.

Tooltips can take on any value. While in the example below we use the text statement to display a string on the screen, it's also possible to use the add statement to add a displayable. More complex behavior is also possible.

screen tooltip_test:

    default tt = Tooltip("No button selected.")

    frame:
        xfill True

        has vbox

        textbutton "One.":
            action Return(1)
            hovered tt.Action("The loneliest number.")

        textbutton "Two.":
            action Return(2)
            hovered tt.Action("Is what it takes.")

        textbutton "Three.":
            action Return(3)
            hovered tt.Action("A crowd.")

        text tt.value

Special Screen Nameslink
There are two kinds of special screen names in Ren'Py. The first are screens that will be automatically displayed when Ren'Py script language commands (or their programmatic equivalents) are run. The other type are menu screens. These have conventional names for conventional functionality, but screens can be omitted or changed as is deemed necessary.

On this page, we'll give example screens. It's important to realize that, while some screens must have minimal functionality, the screen system makes it possible to add additional functionality to screens. For example, while the standard say screen only displays text, the screen system makes it easy to add features like skipping, auto-forward mode, or muting.

Some special screens take parameters. These parameters can be accessed as variables in the screen's scope.

Some of the screens also have special ids associated with them. A special id should be assigned to a displayable of a given type. It can cause properties to be assigned to that displayable, and can make that displayable accessible to the part of Ren'Py that displays the screen.

In-Game Screenslink
These screens are automatically displayed when certain Ren'Py statements execute.

Saylink
The say screen is called by the say statement, when displaying ADV-mode dialogue. It is displayed with the following parameters:

who
The text of the name of the speaking character.

what
The dialogue being said by the speaking character.

It's expected to declare displayables with the following ids:

"who"
A text displayable, displaying the name of the speaking character. The character object can be given arguments that style this displayable.

"what"
A text displayable, displaying the dialogue being said by the speaking character. The character object can be given arguments that style this displayable. A displayable with this id must be defined, as Ren'Py uses it to calculate auto-forward-mode time, click-to-continue, and other things.

"window"
A window or frame. This conventionally contains the who and what text. The character object can be given arguments that style this displayable.

screen say(who, what):

    window id "window":
        has vbox

        if who:
            text who id "who"

        text what id "what"
Choicelink
The choice screen is used to display the in-game choices created with the menu statement. It is given the following parameter:

items
This is a list of menu entry objects, representing each of the choices in the menu. Each of the objects has the following fields on it:

captionlink
A string giving the caption of the menu choice.

actionlink
An action that should be invoked when the menu choice is chosen. This may be None if this is a menu caption, and config.narrator_menu is False.

chosenlink
This is True if this choice has been chosen at least once in any playthrough of the game.

argslink
This is a tuple that contains any positional arguments passed to the menu choice.

kwargslink
This is a dictionary that contains any keyword arguments passed to the menu choice.

These items, and the actions within, become invalid when the menu statement ends.

In addition, any arguments passed to a menu statement are passed in during the call to the screen.

screen choice(items):

    window:
        style "menu_window"

        vbox:
            style "menu"

            for i in items:

                if i.action:

                    button:
                        action i.action
                        style "menu_choice_button"

                        text i.caption style "menu_choice"

                else:
                    text i.caption style "menu_caption"
Inputlink
The input screen is used to display renpy.input(). It is given one parameter:

prompt
The prompt text supplied to renpy.input.

It is expected to declare a displayable with the following id:

"input"
An input displayable, which must exist. This is given all the parameters supplied to renpy.input, so it must exist.

screen input(prompt):

    window:
        has vbox

        text prompt
        input id "input"
NVLlink
The nvl screen is used to display NVL-mode dialogue. It is given the following parameter:

dialogue
A list of NVL Entry objects, each of which corresponds to a line of dialogue to be displayed. Each entry has the following fields:

currentlink
True if this is the current line of dialogue. The current line of dialogue must have its what text displayed with an id of "what".

wholink
The name of the speaking character, or None of there is no such name.

whatlink
The text being spoken.

who_id, what_id, window_id
Preferred ids for the speaker, dialogue, and window associated with an entry.

who_args, what_args, window_args
Properties associated with the speaker, dialogue, and window. These are automatically applied if the id is set as above, but are also made available separately.

multiplelink
If multiple character dialogue, this is a two component tuple. The first component is the one-based number of the dialogue block, and the second is the total number of dialogue blocks in the multiple statement.

items
This is the same list of items that would be supplied to the choice screen. If this is empty, the menu should not be shown.

When items is not present, the NVL screen is expected to always give a text widget an id of "what". Ren'Py uses it to calculate auto-forward-mode time, click-to-continue, and other things. (This is satisfied automatically if the default what_id is used.)

Ren'Py also supports an nvl_choice screen, which takes the same parameters as nvl, and is used in preference to nvl when an in-game choice is presented to the user, if it exists.

screen nvl(dialogue, items=None):

    window:
        style "nvl_window"

        has vbox:
            style "nvl_vbox"

        # Display dialogue.
        for d in dialogue:
            window:
                id d.window_id

                has hbox:
                    spacing 10

                if d.who is not None:
                    text d.who id d.who_id

                text d.what id d.what_id

        # Display a menu, if given.
        if items:

            vbox:
                id "menu"

                for i in items:

                    if action:

                        button:
                            style "nvl_menu_choice_button"
                            action i.action

                            text i.caption style "nvl_menu_choice"

                    else:

                        text i.caption style "nvl_dialogue"
Notifylink
The notify screen is used by renpy.notify() to display notifications to the user. It's generally used in conjunction with a transform to handle the entire task of notification. It's given a single parameter:

message
The message to display.

The default notify screen, and its associated transform, are:

screen notify(message):
    zorder 100

    text message at _notify_transform

    # This controls how long it takes between when the screen is
    # first shown, and when it begins hiding.
    timer 3.25 action Hide('notify')

transform _notify_transform:
    # These control the position.
    xalign .02 yalign .015

    # These control the actions on show and hide.
    on show:
        alpha 0
        linear .25 alpha 1.0
    on hide:
        linear .5 alpha 0.0
Skip Indicatorlink
If present, skip_indicator screen is displayed when skipping is in progress, and hidden when skipping finishes. It takes no parameters.

Here's a very simple skip indicator screen:

screen skip_indicator():

    zorder 100

    text _("Skipping")
CTC (Click-To-Continue)link
If present, the ctc screen is displayed when dialogue has finished showing, to prompt the player to click to display more text. It may be given a single parameter and multiple keyword arguments.

arg
The ctc displayable selected by the Character(). This is one of the ctc, ctc_pause, or ctc_timedpause arguments to Character, as appropriate. If no CTC is given to the Character, this argument is not passed at all.

In addition, there are several parameters that are only passed if the screen requires them.

ctc_kind
The kind of CTC to display. One of "last" (for the last CTC on a line), "pause", or "timedpause".

ctc_last
The ctc argument to Character().

ctc_pause
The ctc_pause argument to Character().

ctc_timedpause
The ctc_timedpause argument to Character().

Here's a very simple ctc screen:

screen ctc(arg=None):

    zorder 100

    hbox:
        xalign 0.98
        yalign 0.98

        add arg

        text _("Click to Continue"):
            size 12
Out-Of-Game Menu Screenslink
These are the menu screens. The main_menu and yesno_prompt are invoked implicitly. When the user invokes the game menu, the screen named in _game_menu_screen will be displayed. (This defaults to save.)

Remember, menu screens can be combined and modified fairly freely.

Main Menulink
The main_menu screen is the first screen shown when the game begins.

screen main_menu():

    # This ensures that any other menu screen is replaced.
    tag menu

    # The background of the main menu.
    window:
        style "mm_root"

    # The main menu buttons.
    frame:
        style_prefix "mm"
        xalign .98
        yalign .98

        has vbox

        textbutton _("Start Game") action Start()
        textbutton _("Load Game") action ShowMenu("load")
        textbutton _("Preferences") action ShowMenu("preferences")
        textbutton _("Help") action Help()
        textbutton _("Quit") action Quit(confirm=False)

style mm_button:
    size_group "mm"
Navigationlink
The navigation screen isn't special to Ren'Py. But by convention, we place the game menu navigation in a screen named navigation, and then use that screen from the save, load and preferences screens.

screen navigation():

    # The background of the game menu.
    window:
        style "gm_root"

    # The various buttons.
    frame:
        style_prefix "gm_nav"
        xalign .98
        yalign .98

        has vbox

        textbutton _("Return") action Return()
        textbutton _("Preferences") action ShowMenu("preferences")
        textbutton _("Save Game") action ShowMenu("save")
        textbutton _("Load Game") action ShowMenu("load")
        textbutton _("Main Menu") action MainMenu()
        textbutton _("Help") action Help()
        textbutton _("Quit") action Quit()

style gm_nav_button:
    size_group "gm_nav"
Savelink
The save screen is used to select a file in which to save the game.

screen save():

    # This ensures that any other menu screen is replaced.
    tag menu

    use navigation

    frame:
        has vbox

        # The buttons at the top allow the user to pick a
        # page of files.
        hbox:
            textbutton _("Previous") action FilePagePrevious()
            textbutton _("Auto") action FilePage("auto")

            for i in range(1, 9):
                textbutton str(i) action FilePage(i)

            textbutton _("Next") action FilePageNext()

        # Display a grid of file slots.
        grid 2 5:
            transpose True
            xfill True

            # Display ten file slots, numbered 1 - 10.
            for i in range(1, 11):

                # Each file slot is a button.
                button:
                    action FileAction(i)
                    xfill True
                    style "large_button"

                    has hbox

                    # Add the screenshot and the description to the
                    # button.
                    add FileScreenshot(i)
                    text ( " %2d. " % i
                           + FileTime(i, empty=_("Empty Slot."))
                           + "\n"
                           + FileSaveName(i)) style "large_button_text"
Loadlink
The load screen is used to select a file from which to load the game.

screen load():

    # This ensures that any other menu screen is replaced.
    tag menu

    use navigation

    frame:
        has vbox

        # The buttons at the top allow the user to pick a
        # page of files.
        hbox:
            textbutton _("Previous") action FilePagePrevious()
            textbutton _("Auto") action FilePage("auto")

            for i in range(1, 9):
                textbutton str(i) action FilePage(i)

            textbutton _("Next") action FilePageNext()

        # Display a grid of file slots.
        grid 2 5:
            transpose True
            xfill True

            # Display ten file slots, numbered 1 - 10.
            for i in range(1, 11):

                # Each file slot is a button.
                button:
                    action FileAction(i)
                    xfill True
                    style "large_button"

                    has hbox

                    # Add the screenshot and the description to the
                    # button.
                    add FileScreenshot(i)
                    text ( " %2d. " % i
                           + FileTime(i, empty=_("Empty Slot."))
                           + "\n"
                           + FileSaveName(i)) style "large_button_text"
Preferenceslink
The preferences screen is used to select options that control the display of the game.

In general, the preferences are either actions or bar values returned from Preference().

screen preferences():

    tag menu

    # Include the navigation.
    use navigation

    # Put the navigation columns in a three-wide grid.
    grid 3 1:
        style_prefix "prefs"
        xfill True

        # The left column.
        vbox:
            frame:
                style_prefix "pref"
                has vbox

                label _("Display")
                textbutton _("Window") action Preference("display", "window")
                textbutton _("Fullscreen") action Preference("display", "fullscreen")

            frame:
                style_prefix "pref"
                has vbox

                label _("Transitions")
                textbutton _("All") action Preference("transitions", "all")
                textbutton _("None") action Preference("transitions", "none")

            frame:
                style_prefix "pref"
                has vbox

                label _("Text Speed")
                bar value Preference("text speed")

            frame:
                style_prefix "pref"
                has vbox

                textbutton _("Joystick...") action ShowMenu("joystick_preferences")

        vbox:

            frame:
                style_prefix "pref"
                has vbox

                label _("Skip")
                textbutton _("Seen Messages") action Preference("skip", "seen")
                textbutton _("All Messages") action Preference("skip", "all")

            frame:
                style_prefix "pref"
                has vbox

                textbutton _("Begin Skipping") action Skip()

            frame:
                style_prefix "pref"
                has vbox

                label _("After Choices")
                textbutton _("Stop Skipping") action Preference("after choices", "stop")
                textbutton _("Keep Skipping") action Preference("after choices", "skip")

            frame:
                style_prefix "pref"
                has vbox

                label _("Auto-Forward Time")
                bar value Preference("auto-forward time")

        vbox:

            frame:
                style_prefix "pref"
                has vbox

                label _("Music Volume")
                bar value Preference("music volume")

            frame:
                style_prefix "pref"
                has vbox

                label _("Sound Volume")
                bar value Preference("sound volume")
                textbutton "Test" action Play("sound", "sound_test.ogg") style "soundtest_button"

            frame:
                style_prefix "pref"
                has vbox

                label _("Voice Volume")
                bar value Preference("voice volume")
                textbutton "Test" action Play("voice", "voice_test.ogg") style "soundtest_button"

style pref_frame:
    xfill True
    xmargin 5
    top_margin 5

style pref_vbox:
    xfill True

style pref_button:
    size_group "pref"
    xalign 1.0

style pref_slider:
    xmaximum 192
    xalign 1.0

style soundtest_button:
    xalign 1.0
Confirmlink
The confirm screen is used to ask yes/no choices of the user. It takes the following parameters:

message
The message to display to the user. This is one of:

gui.ARE_YOU_SURE - "Are you sure?" This should be the default if the message is unknown.

gui.DELETE_SAVE - "Are you sure you want to delete this save?"

gui.OVERWRITE_SAVE - "Are you sure you want to overwrite your save?"

gui.LOADING - "Loading will lose unsaved progress.nAre you sure you want to do this?"

gui.QUIT - "Are you sure you want to quit?"

gui.MAIN_MENU - "Are you sure you want to return to the mainnmenu? This will lose unsaved progress."

gui.END_REPLAY - "Are you sure you want to end the replay?"

gui.SLOW_SKIP - "Are you sure you want to begin skipping?"

gui.FAST_SKIP_SEEN - "Are you sure you want to skip to the next choice?"

gui.FAST_SKIP_UNSEEN - "Are you sure you want to skip unseen dialogue to the next choice?"

The values of the variables are strings, which means they can be displayed using a text displayable.

yes_action
The action to run when the user picks "Yes".

no_action
The action to run when the user picks "No".

Until Ren'Py 6.99.10, this screen was known as the yesno_prompt screen. If no confirm screen is present, yesno_prompt is used instead.

This screen will also be called by the layout.yesno_screen() and the Confirm() action.

screen confirm(message, yes_action, no_action):

    modal True

    window:
        style "gm_root"

    frame:
        style_prefix "confirm"

        xfill True
        xmargin 50
        ypadding 25
        yalign .25

        vbox:
            xfill True
            spacing 25

            text _(message):
                textalign 0.5
                xalign 0.5

            hbox:
                spacing 100
                xalign .5
                textbutton _("Yes") action yes_action
                textbutton _("No") action no_action

Screen Language Optimizationlink
Ren'Py uses a number of techniques to optimize screen language speed. When using Ren'Py to create complex interfaces, such as those used by simulation games, it may help to understand how screen language works so you can achieve maximal performance.

This guide is applicable to the second implementation of screen language, which was added to Ren'Py 6.18. If your game was created in Ren'Py 6.17 or earlier, it may be necessary to chose the "Force Recompile" option in the launcher to ensure its screens are upgraded to the latest version.

This guide isn't a substitute for good programming practice. If a screen uses nested loops to do a lot of unproductive work, it will be slower than a screen that avoids such looping. While understanding the techniques in this guide is important, avoiding work entirely is always better than letting Ren'Py optimize the work for you.

Parameter Listlink
For best performance, all screens should be defined with a parameter list. When a screen doesn't take parameters, it should be defined with an empty parameter list. The screen:

screen test():
    vbox:
        for i in range(10):
            text "[i]"
is faster than:

screen test:
    vbox:
        for i in range(10):
            text "[i]"
When a screen is defined without a parameter list, any name used in that screen can be redefined when the screen is shown. This requires Ren'Py to be more conservative when analyzing the screen, which can limit the optimization it performs.

Predictionlink
Screens perform better when they're predicted in advance. That's because Ren'Py will execute the screen during prediction time, and load in images that are used by the screen.

There are two ways Ren'Py automatically predicts screens:

Ren'Py will predict screens shown by the show screen and call screen statements.

Ren'Py will predict screens that will be shown by the Show() and ShowMenu() actions.

If screens are shown from Python, it's a good idea to start predicting the screen before it is shown. To start predicting a screen, use the renpy.start_predict_screen() function. To stop predicting a screen, use the renpy.stop_predict_screen() function.

Displayable Reuselink
When evaluating a screen language statement that creates a displayable, Ren'Py will check to see if the positional arguments and properties given to that displayable are equal to the positional arguments and properties given the last time that statement was evaluated. If they are, instead of making a new displayable, Ren'Py will reuse the existing displayable.

Displayable reuse has a number of performance implications. It saves the cost of creating a new displayable, which may be significant for displayables that contain a lot of internal state. More importantly, reusing a displayable means that in many cases, Ren'Py will not need to re-render the displayable before showing it to the user, which can lead to another significant speedup.

To compare positional arguments and properties, Ren'Py uses the notion of equality embodied by Python's == operator. We've extended this notion of equality to actions by deciding two actions should be equal when they are indistinguishable from each other – when it doesn't matter which action is invoked, or which action is queried to determine sensitivity or selectedness.

All actions provided with Ren'Py conform to this definition. When defining your own actions, it makes sense to provide them with this notion of equality. This can be done by supplying an appropriate __eq__ method. For example:

class TargetShip(Action):
    def __init__(self, ship):
        self.ship = ship

    def __eq__(self, other):
        if not isinstance(other, TargetShip):
            return False

        return self.ship is other.ship

    def __call__(self):
        global target
        target = self.ship
It's important to define the __eq__ function carefully, making sure it compares all fields, and uses equality (==) and identity (is) comparison as appropriate.

Const Expressions and Pure Functionslink
Ren'Py can exploit the properties of const variables and pure functions to improve the speed of screen evaluation, and to entirely avoid the evaluation of some parts of screens.

Definitionslink
An expression is const (short for constant) if it always represents the same value when it is evaluated. For Ren'Py's purposes, an expression is const if and only if the following expressions always evaluate to the same const value or are undefined:

Applying any unary, binary, or ternary operator to the expression, provided the other operands are also const.

Accessing a field on the expression.

Indexing the expression, either using a number or an object.

Python numbers and strings are const, as are list, tuple, set, and dict literals for which all components are const. Ren'Py marks variables defined using the define statement as const. The renpy.const() and renpy.not_const() functions can be used to further control what Ren'Py considers to be const. The default list of const names is given in the Const Names section below.

If you have a variable that will never change, it makes sense to use define to both define it and declare it const. For example:

define GRID_WIDTH = 20
define GRID_HEIGHT = 10
A callable function, class, or action is pure if, when all of its arguments are const values, it always gives the same const value. Alternatively, an expression that invokes a pure function with const expression is also a const expression.

A large number of default functions, classes, and actions are marked as pure. These functions are listed in the Pure Names section below.

Functions are declared pure using the renpy.pure() function, which can be used as a decorator for functions declared in the default store.

Const expressions and pure functions do not need to retain the same value across the following events:

The end of the init phase.

A change of the language.

A style rebuild.

How Const Optimizes Screen Languagelink
There are three advantages to ensuring that screen language arguments and properties are const.

The first is that const arguments and properties are evaluated when screens are prepared, which is at the end of the init phase, when the language is changed, or when styles are rebuilt. After that, it is no longer necessary to spend time evaluating const arguments and properties.

The second is that const works well with displayable reuse. When all of the arguments and properties of a displayable are const, the displayable can always be reused, which gains all the benefits of displayable reuse.

Lastly, when Ren'Py encounters a tree of displayables such that all arguments, properties, and expressions affecting control flow are also const, Ren'Py will reuse the entire tree without evaluating expressions or creating displayables. This can yield a significant performance boost.

For example, the following screen does not execute any Python or create any displayables after the first time it is predicted or shown:

screen mood_picker():
    hbox:
        xalign 1.0
        yalign 0.0

        textbutton "Happy" action SetVariable("mood", "happy")
        textbutton "Sad" action SetVariable("mood", "sad")
        textbutton "Angry" action SetVariable("mood", "angry")
Const Textlink
When defining text, please note that strings containing new-style text substitutions are const:

$ t = "Hello, world."
text "[t]"
Supplying a variable containing the text directly is generally not const:

$ t = "Hello, world."
text t
Neither is using percent-substitution:

$ t = "Hello, world."
text "%s" % t
Lastly, note that the _ text translation function is pure, so if it contains a string, the entire expression is const:

text _("Your score is: [score]")
If a variable containing the text contains substitution, it's necessary to use the !i conversion flag:

$ who = "Jane"
$ t = "Hello, [who]!"
text 'Then I told her, "[t!i]"'
Const Functionslink
renpy.const(name)link
Declares a variable in the store to be constant.

A variable is constant if nothing can change its value, or any value reached by indexing it or accessing its attributes. Variables must remain constant out of define, init, and translate python blocks.

name
A string giving the name of the variable to declare constant.

renpy.not_const(name)link
Declares a name in the store to be not constant.

This undoes the effect of calls to renpy.const() and renpy.pure().

name
The name to declare not constant.

renpy.pure(fn)link
Declares a function as pure. A pure function must always return the same value when it is called with the same arguments, outside of define, init, and translate python blocks.

fn
The name of the function to declare pure. This may either be a string containing the name of the function, or the function itself. If a string is passed and the function is inside a module, this string should contain the module name with the dot.

Returns fn, allowing this function to be used as a decorator.

Profilinglink
Ren'Py supports profiling screen execution through the renpy.profile_screen function:

classrenpy.profile_screen(name, predict=False, show=False, update=False, request=False, time=False, debug=False, const=False)link
Requests screen profiling for the screen named name, which must be a string.

Apart from name, all arguments must be supplied as keyword arguments. This function takes three groups of arguments.

The first group of arguments determines when profiling occurs.

predict
If true, profiling occurs when the screen is being predicted.

show
If true, profiling occurs when the screen is first shown.

update
If true, profiling occurs when the screen is updated.

request
If true, profiling occurs when requested by pressing F8.

The second group of arguments controls what profiling output is produced when profiling occurs.

time
If true, Ren'Py will log the amount of time it takes to evaluate the screen.

debug
If true, Ren'Py will log information as to how screens are evaluated, including:

Which displayables Ren'Py considers constant.

Which arguments, if any, needed to be evaluated.

Which displayables were reused.

Producing and saving this debug information takes a noticeable amount of time, and so the time output should not be considered reliable if debug is set.

The last group of arguments controls what output is produced once per Ren'Py run.

const
Displays the variables in the screen that are marked as const and not-const.

All profiling output will be logged to profile_screen.txt in the game directory.

Const Nameslink
The following names are const by default.

False

None

True

config

style

Pure Nameslink
The following names are both pure and const by default.

ADVCharacter

ADVSpeaker

AddToSet()

Alpha

AlphaBlend()

AlphaDissolve()

AlphaMask

AnimatedValue()

Animation

At()

AudioPositionValue()

Call()

CaptureFocus()

Character()

ClearFocus()

Color

ComposeTransition()

ConditionSwitch()

Confirm()

CropMove()

DictInputValue()

DictValue()

DisableAllInputValues()

Dissolve()

Drag

DynamicCharacter

DynamicDisplayable

EndReplay()

ExecJS()

FactorZoom

Fade()

FieldInputValue()

FieldValue()

FileDelete()

FilePage()

FilePageNameInputValue()

FileTakeScreenshot()

Fixed()

Flatten

FontGroup

Frame

Function()

Grid()

HBox()

Help()

Hide()

HideInterface()

If()

Image()

ImageDissolve()

ImageReference

InputValue

InvertSelected()

Jump()

Language()

LiveComposite

LiveCrop

LiveTile

MainMenu()

MixerValue()

Motion

MouseMove()

Move

MoveFactory

MoveIn

MoveOut

MoveTransition()

Movie

MultipleTransition()

NVLCharacter

Notify()

Null

NullAction()

OldMoveTransition

OpenDirectory()

OpenURL()

Pan

ParameterizedText

Particles

Pause()

PauseAudio()

Pixellate()

Play

PlayCharacterVoice()

Position

Preference()

PushMove()

Queue()

QueueEvent()

QuickLoad()

QuickSave()

Quit()

RemoveFromSet()

Replay()

RestartStatement()

Return()

Revolve

RevolveInOut

RollForward()

Rollback()

RotoZoom

ScreenVariableValue()

Screenshot()

Scroll()

SelectedIf()

SensitiveIf()

SetCharacterVolume()

SetDict()

SetField()

SetMixer()

SetMute()

SetScreenVariable()

SetVariable()

SetVoiceMute()

Show()

ShowMenu()

ShowTransient()

ShowingSwitch()

SizeZoom

Skip()

SnowBlossom()

Solid

Speaker

Start()

StaticValue()

Stop

StylePreference()

SubTransition

Swing()

Text

ToggleDict()

ToggleField()

ToggleFocus()

ToggleMute()

ToggleScreen()

ToggleScreenVariable()

ToggleSetMembership()

ToggleVariable()

ToggleVoiceMute()

Transform

VBox()

VariableInputValue()

VariableValue()

Viewport

VoiceReplay()

Window

Zoom

ZoomInOut

_()

_CharacterVolumeValue

_DisplayReset

_InputValueAction

_TouchKeyboardBackspace

_TouchKeyboardReturn

_TouchKeyboardTextInput

__renpy__dict__

__renpy__list__

__renpy__set__

_m1_00gallery__GalleryAction

_m1_00gallery__GalleryToggleSlideshow

_m1_00musicroom__MusicRoomPlay

_m1_00musicroom__MusicRoomRandomPlay

_m1_00musicroom__MusicRoomStop

_m1_00musicroom__MusicRoomTogglePause

_m1_00musicroom__MusicRoomTogglePlay

_m1_00preferences__DisplayAction

_movebottom

_moveleft

_moveright

_movetop

_notify_transform

_p()

_touch_keyboard

abs

absolute

all

any

ascii

bin

blinds

bool

bytes

callable

chr

color

complex

dict

dir

dissolve

divmod

enumerate

fade

filter

float

format

frozenset

getattr

gui.SetPreference()

gui.TogglePreference()

gui.preference()

hasattr

hash

hex

hpunch

int

irisin

irisout

isinstance

issubclass

len

list

map

max

min

oct

ord

pixellate

pow

pushdown

pushleft

pushright

pushup

range

renpy.Keymap

renpy.ParameterizedText

renpy.check_text_tags()

renpy.curried_call_in_new_context

renpy.curried_invoke_in_new_context

renpy.curry

renpy.easy_displayable

renpy.exists()

renpy.filter_text_tags()

renpy.fsdecode()

renpy.fsencode()

renpy.get_all_labels()

renpy.has_label()

renpy.has_screen

renpy.image_exists

renpy.known_languages()

renpy.license

renpy.list_files()

renpy.loadable()

renpy.munged_filename

renpy.partial

renpy.split_properties()

renpy.unelide_filename

renpy.variant()

renpy.version()

renpy.version_name

renpy.version_only

renpy.version_string

renpy.version_tuple

repr

reversed

round

set

slice

slideawaydown

slideawayleft

slideawayright

slideawayup

slidedown

slideleft

slideright

slideup

sorted

squares

str

sum

tuple

type

ui.callsinnewcontext

ui.gamemenus

ui.invokesinnewcontext

ui.jumps

ui.jumpsoutofcontext

ui.returns

updater.Update()

vpunch

wipedown

wipeleft

wiperight

wipeup

zip

zoomin

zoominout

zoomout

Configuration Variableslink
Configuration variables control the behavior of Ren'Py's implementation, allowing Ren'Py itself to be customized in a myriad of ways. These range from the common (such as changing the screen size) to the obscure (adding new kinds of archive files).

Ren'Py's implementation makes the assumption that, once the GUI system has initialized, configuration variables will not change. Changing configuration variables outside of init blocks can lead to undefined behavior. Configuration variables are not part of the save data.

Most configuration variables are easily set using a define statement:

define config.rollback_enabled = False
Dict and list variables can be populated using define or in an init python block:

define config.preload_fonts += ["OrthodoxHerbertarian.ttf"]
define config.adjust_attributes["eileen"] = eileen_adjust_function

init python hide:
    def inter_cbk():
        # this is a terrible callback
        renpy.notify("Interacting !")

    config.interact_callbacks.append(inter_cbk)
Commonly Usedlink
define config.name = ""link
This should be a string giving the name of the game. This is included as part of tracebacks and other log files, helping to identify the version of the game being used.

define config.save_directory = "..."link
This is used to generate the directory in which games and persistent information are saved. The name generated depends on the platform:

Windows
%APPDATA%/RenPy/save_directory

Mac OS X
~/Library/RenPy/save_directory

Linux/Other
~/.renpy/save_directory

Setting this to None creates a "saves" directory underneath the game directory. This is not recommended, as it prevents the game from being shared between multiple users on a system. It can also lead to problems when a game is installed as Administrator, but run as a user.

This must be set with either the define statement, or in a python early block. In either case, this will be run before any other statement, and so it should be set to a string, not an expression.

To locate the save directory, read config.savedir instead of this variable.

define config.version = ""link
This should be a string giving the version of the game. This is included as part of tracebacks and other log files, helping to identify the version of the game being used.

define config.window = Nonelink
This controls the default method of dialogue window management. If not None, this should be one of "show", "hide", or "auto".

When set to "show", the dialogue window is shown at all times. When set to "hide", the dialogue window is hidden when not in a say statement or other statement that displays dialogue. When set to "auto", the dialogue window is hidden before scene statements, and shown again when dialogue is shown.

This sets the default. Once set, the default can be changed using the window show, window hide and window auto statements. See Dialogue Window Management for more information.

Transitionslink
These control transitions between various screens.

define config.adv_nvl_transition = Nonelink
A transition that is used when showing NVL-mode text directly after ADV-mode text.

define config.after_load_transition = Nonelink
A transition that is used after loading, when entering the loaded game.

define config.end_game_transition = Nonelink
The transition that is used to display the main menu after the game ends normally, either by invoking return with no place to return to, or by calling renpy.full_restart().

define config.end_splash_transition = Nonelink
The transition that is used to display the main menu after the end of the splashscreen.

define config.enter_replay_transition = Nonelink
If not None, a transition that is used when entering a replay.

define config.enter_transition = Nonelink
If not None, this variable should give a transition that will be used when entering the game menu.

define config.enter_yesno_transition = Nonelink
If not None, a transition that is used when entering the yes/no prompt screen.

define config.exit_replay_transition = Nonelink
If not None, a transition that is used when exiting a replay.

define config.exit_transition = Nonelink
If not None, this variable should give a transition that will be performed when exiting the game menu.

define config.exit_yesno_transition = Nonelink
If not None, a transition that is used when exiting the yes/no prompt screen.

define config.game_main_transition = Nonelink
If not None, a transition that is used when returning to the main menu from the game menu, using the MainMenu() action.

define config.intra_transition = Nonelink
The transition that is used between screens of the game and main menu. (That is, when the screen is changed with ShowMenu().)

define config.nvl_adv_transition = Nonelink
A transition that is used when showing ADV-mode text directly after NVL-mode text.

define config.say_attribute_transition = Nonelink
If not None, a transition to use when the image is changed by a say statement with image attributes.

define config.say_attribute_transition_callback : Callablelink
This is a function that return a transition to apply and a layer to apply it on

This should be a function that takes four arguments, the image tag being shown, a mode parameter, a set containing pre-transition tags and a set containing post-transition tags. Where the value of the mode parameter is one of:

"permanent", for permanent attribute change (one that lasts longer than the current say statement).

"temporary", for a temporary attribute change (one that is restored at the end of the current say statement).

"both", for a simultaneous permanent and temporary attribute change (one that in part lasts longer than the current say statement, and in part is restored at the end of the current say statement).

"restore", for when a temporary (or both) change is being restored.

This should return a 2-component tuple, consisting of:

The transition to use, or None if no transition should occur.

The layer the transition should be on, either a string or None. This is almost always None.

The default implementation of this returns (config.say_attribute_transition, config.say_attribute_transition_layer).

define config.say_attribute_transition_layer = Nonelink
If not None, this must be a string giving the name of a layer. (Almost always "master".) The say attribute is applied to the named layer, and Ren'Py will not pause to wait for the transition to occur. This will have the effect of transitioning in the attribute as dialogue is shown.

define config.window_hide_transition = Nonelink
The transition used by the window hide statement when no transition has been explicitly specified.

define config.window_show_transition = Nonelink
The transition used by the window show statement when no transition has been explicitly specified.

Preference Defaultslink
Ren'Py has a number of variables that set the default values of preferences. Please see the section on preference variables for more information on how to set defaults for various preferences.

Occasionally Usedlink
define config.adjust_attributes = { }link
If not None, this is a dictionary. When a statement or function that contains image attributes executes or is predicted, the tag is looked up in this dictionary. If it is not found, the None key is looked up in this dictionary.

If either is found, they're expected to be a function. The function is given an image name, a tuple consisting of the tag and any attributes. It should return an adjusted tuple, which contains and a potential new set of attributes.

As this function may be called during prediction, it must not rely on any state.

define config.after_default_callbacks = [ ... ]link
A list of functions that are called (with no arguments) whenever default statements are processed. The default statements are run after the init phase, but before the game starts; when the a save is loaded; after rollback; before lint; and potentially at other times.

Similar to the default statement, these callbacks are a good place to add data to the game that does not exist, but needs to.

define config.after_load_callbacks = [ ... ]link
A list of functions that are called (with no arguments) when a load occurs.

If these callbacks change data (for example, migrating data from an old version of the game), renpy.block_rollback() should be called to prevent the player from rolling back and reverting the changes.

define config.after_replay_callback = Nonelink
If not None, a function that is called with no arguments after a replay completes.

define config.always_shown_screens = [ ... ]link
A list of names of screens that Ren'Py will always show, even in menus, and when the interface is hidden. If a screen in this list is ever not shown, that screen will be re-shown. This is used by Ren'Py, which may modify the list.

Setting config.overlay_screens is usually more appropriate.

define config.audio_filename_callback = Nonelink
If not None, this is a function that is called with an audio filename, and is expected to return a second audio filename, the latter of which will be played.

This is intended for use when an a games has audio file formats changed, but it's not destired to update the game script.

define config.auto_channels = { "audio" : ( "sfx", "", ""  ), ... }link
This is used to define automatic audio channels. It's a map the channel name to a tuple containing 3 components:

The mixer the channel uses.

A prefix that is given to files played on the channel.

A suffix that is given to files played on the channel.

define config.auto_movie_channel = Truelink
If True, and the play argument is given to Movie(), an audio channel name is automatically generated for each movie.

config.single_movie_channel takes precendece over this variable.

define config.auto_load = Nonelink
If not None, the name of a save file to automatically load when Ren'Py starts up. This is intended for developer use, rather than for end users. Setting this to "1" will automatically load the game in save slot 1.

define config.auto_voice = Nonelink
This may be a string, a function, or None. If None, auto-voice is disabled.

If a string, this is formatted with the id variable bound to the identifier of the current line of dialogue. If this gives an existing file, that file is played as voice audio.

If a function, the function is called with a single argument, the identifier of the current line of dialogue. The function is expected to return a string. If this gives an existing file, that file is played as voice audio.

See Automatic Voice for more details.

define config.autosave_callback = Nonelink
A callback or list of callbacks or Actions that will be called after each time a background autosave happens. Although actions may be used, the Return action will not function.

If a non-Action callback shows a displayable or screen, renpy.restart_interaction() should be called.

::
define config.autosave_callback = Notify("Autosaved.")

define config.autosave_prefix_callback = Nonelink
If not None, this is a function that is called with no arguments, and return the prefix of autosave files. The default prefix used is "auto-", which means the autosave slots will be "auto-1", "auto-2", etc.

define config.autosave_slots = 10link
The number of slots used by autosaves.

define config.cache_surfaces = Falselink
If True, the underlying data of an image is stored in RAM, allowing image manipulators to be applied to that image without reloading it from disk. If False, the data is dropped from the cache, but kept as a texture in video memory, reducing RAM usage.

define config.character_id_prefixes = [ ... ]link
This specifies a list of style property prefixes that can be given to a Character(). When a style prefixed with one of the given prefix is given, it is applied to the displayable with that prefix as its ID.

For example, the default GUI adds "namebox" to this. When a Character is given the namebox_background property, it sets background on the displayable in the say screen with the id "namebox".

define config.conditionswitch_predict_all = Falselink
The default value of the predict_all argument for ConditionSwitch() and ShowingSwitch(), which determines if all possible displayables are shown.

define config.context_callback = Nonelink
This is a callback that is called with no arguments when Ren'Py enters a new context, such as a menu context.

define config.context_copy_remove_screens = [ 'notify', ... ]link
Contains a list of screens that are removed when a context is copied for rollback or saving.

define config.context_fadein_music = 0link
The amount of time in seconds Ren'Py spends fading in music when the music is played due to a context change. (Usually, when the game is loaded.)

define config.context_fadeout_music = 0link
The amount of time in seconds Ren'Py spends fading out music when the music is played due to a context change. (Usually, when the game is loaded.)

define config.debug_image_cache = Falselink
If True, Ren'Py will write information about the image cache to image_cache.txt.

define config.debug_prediction = Falselink
If True, Ren'Py will will write information about and errors that occur during prediction (of execution flow, images, and screens) to log.txt and the console.

define config.debug_sound = Falselink
Enables debugging of sound functionality. This disables the suppression of errors when generating sound. However, if a sound card is missing or flawed, then such errors are normal, and enabling this may prevent Ren'Py from functioning normally. This should always be False in a released game.

define config.debug_text_overflow = Falselink
When true, Ren'Py will log text overflows to text_overflow.txt. A text overflow occurs when a Text displayable renders to a size larger than that allocated to it. By setting this to True and setting the xmaximum and ymaximum style properties of the dialogue window to the window size, this can be used to report cases where the dialogue is too large for its window.

define config.default_attribute_callbacks = { }link
When a statement or function that contains image attributes executes or is predicted, and the tag is not currently being shown, it's looked up in this dictionary. If it is not found, the None key is looked up instead.

If either is found, they're expected to be a function. The function is given an image name, a tuple consisting of the tag and any attributes. It should return an iterable which contains any additional attributes to be applied when an image is first shown.

The results of the function are treated as additive-only, and any explicit conflicting or negative attributes will still take precedence.

As this function may be called during prediction, it must not rely on any state.

define config.default_language = Nonelink
If not None, this should be a string giving the default language that the game is translated into by the translation framework.

See Translation for more details.

define config.default_tag_layer = "master"link
The layer an image is shown on if its tag is not found in config.tag_layer.

define config.default_transform = ...link
When a displayable is shown using the show or scene statements, the transform properties are taken from this transform and used to initialize the values of the displayable's transform.

The default transform is center.

define config.defer_styles = Falselink
When true, the execution of style statements is deferred until after all translate python blocks have executed. This lets a translate python block update variables that are then used in style (not translate style) statements.

While this defaults to False, it's set to True when gui.init() is called.

define config.developer = "auto"link
If set to True, developer mode is enabled. Developer mode gives access to the shift+D developer menu, shift+R reloading, and various other features that are not intended for end users.

This can be True, False, or "auto". If "auto", Ren'Py will detect if the game has been packaged into a distribution, and set config.developer as appropriate.

define config.disable_input = Falselink
When true, renpy.input() terminates immediately and returns its default argument.

define config.displayable_prefix = { }link
See Displayable prefixes.

define config.emphasize_audio_channels = [ 'voice' ]link
A list of strings giving audio channel names.

If the "emphasize audio" preference is enabled, when one of the audio channels listed starts playing a sound, all channels that are not listed in this variable have their secondary audio volume reduced to config.emphasize_audio_volume over config.emphasize_audio_time seconds.

When no channels listed in this variable are playing audio, all channels that are not listed have their secondary audio volume raised to 1.0 over config.emphasize_audio_time seconds.

For example, setting this to [ 'voice' ] will lower the volume of all non-voice channels when a voice is played.

define config.emphasize_audio_time = 0.5link
See above.

define config.emphasize_audio_volume = 0.5link
See above.

define config.empty_window : Callablelink
This is called with no arguments when _window is True, and no window has been shown on the screen. (That is, no call to renpy.shown_window() has occurred.) It's expected to show an empty window on the screen, and return without causing an interaction.

The default implementation of this uses the narrator character to display a blank line without interacting.

define config.enable_language_autodetect = Falselink
If true, Ren'Py will attempt to determine the name of the language to use based on the locale of the player's system. If successful, this language will be used as the default language.

define config.enter_sound = Nonelink
If not None, this is a sound file that is played when entering the game menu.

define config.exit_sound = Nonelink
If not None, this is a sound file that is played when exiting the game menu.

define config.file_slotname_callback = Nonelink
If not None, this is a function that is used by the file actions to convert a page and name into a slot name that can be passed to the save functions.

page
This is a string containing the name of the page that is being accessed. This is a string, usually containing a number, but it also may contain special values like "quick" or "auto".

name
The is a string that contains the name of the slot on the page. It may also contain a regular expression pattern (like r'd+'), in which case the same pattern should be included in the result.

The default behavior is equivalent to:

def file_slotname_callback(page, name):
    return page + "-" + name

config.file_slotname_callback = file_slotname_callback
One use of this is to allow the the game to apply a prefix to save files.

See also config.autosave_prefix_callback.

define config.fix_rollback_without_choice = Falselink
This option determines how the built-in menus or imagemaps behave during fixed rollback. The default value is False, which means that only the previously selected menu option remains clickable. If set to True, the selected option is marked but no options are clickable. The user can progress forward through the rollback buffer by clicking.

define config.font_name_map = { }link
This is a map from (font name) to (font filepath/fontgroup). Font names simplify and shorten {font} tags, and gives them access to the Font Groups feature.

define config.font_replacement_map = { }link
This is a map from (font, bold, italics) to (font, bold, italics), used to replace a font with one that's specialized as having bold and/or italics. For example, if you wanted to have everything using an italic version of "Vera.ttf" use "VeraIt.ttf" instead, you could write:

init python:
    config.font_replacement_map["Vera.ttf", False, True] = ("VeraIt.ttf", False, False)
Please note that these mappings only apply to specific variants of a font. In this case, requests for a bold italic version of vera will get a bold italic version of vera, rather than a bold version of the italic vera.

define config.game_menu_music = Nonelink
If not None, a music file to play when at the game menu.

define config.gl_clear_color = "#000"link
The color that the window is cleared to before images are drawn. This is mainly seen as the color of the letterbox or pillarbox edges drawn when aspect ratio of the window or monitor in fullscreen mode) does not match the aspect ratio of the game.

define config.gl_lod_bias = -0.5link
The default value of the u_lod_bias uniform, which controls the mipmap level Ren'Py uses.

define config.gl_test_image = "black"link
The name of the image that is used when running the OpenGL performance test. This image will be shown for 5 frames or .25 seconds, on startup. It will then be automatically hidden.

define config.has_autosave = Truelink
If true, the game will autosave. If false, no autosaving will occur.

define config.history_callbacks = [ ... ]link
This contains a list of callbacks that are called before Ren'Py adds a new object to _history_list. The callbacks are called with the new HistoryEntry object as the first argument, and can add new fields to that object.

Ren'Py uses history callbacks internally, so creators should append their own callbacks to this list, rather than replacing it entirely.

define config.history_length = Nonelink
The number of entries of dialogue history Ren'Py keeps. This is set to 250 by the default gui.

define config.history_current_dialogue = Truelink
If true, the current dialogue will appear in the history screen.

define config.hw_video = Falselink
If true, hardware video playback will be used on mobile platforms. This may be faster, but only some formats are supported and only fullscreen video is available. If false, software playback will be used.

define config.hyperlink_handlers = { ... }link
A dictionary mapping a hyperlink protocol to the handler for that protocol. A handler is a function that takes the value (everything after the :) and performs some action. If a value is returned, the interaction ends. Otherwise, the click is ignored and the interaction continues.

define config.hyperlink_protocol = "call_in_new_context"link
The protocol that is used for hyperlinks that do not have a protocol assigned to them. See the a text tag for a description as to what the possible protocols mean.

define config.image_cache_size = Nonelink
If not None, this is used to set the size of the image cache, as a multiple of the screen size. This number is multiplied by the size of the screen, in pixels, to get the size of the image cache in pixels.

If set too large, this can waste memory. If set too small, images can be repeatedly loaded, hurting performance.

define config.image_cache_size_mb = 300link
This is used to set the size of the image cache, in megabytes. If config.cache_surfaces is False, an image takes 4 bytes per pixel, otherwise it takes 8 bytes per pixel.

If set too large, this can waste memory. If set too small, images can be repeatedly loaded, hurting performance. If not none, config.image_cache_size is used instead of this variable.

define config.input_caret_blink = 1.0link
If not False, sets the blinking period of the default caret, in seconds.

define config.lint_character_statistics = Truelink
If true, and config.developer is true, the lint report will include statistics about the number of dialogue blocks spoken for each character. The chanracter statistics are disabled when the game is packaged, to prevent spoilers.

define config.load_failed_label = Nonelink
If a string, this is a label that is jumped to when a load fails because the script has changed so much that Ren'Py can't recover. Before performing the load, Ren'Py will revert to the start of the last statement, then it will clear the call stack.

This may also be a function. If it is, the function is called with no arguments, and is expected to return a string giving the label.

define config.locale_to_language_function : Callablelink
A function that determines the language the game should use, based on the the user's locale. It takes 2 string arguments that give the ISO code of the locale and the ISO code of the region.

It should return a string giving the name of a translation to use, or None to use the default translation.

define config.main_menu_music = Nonelink
If not None, a music file to play when at the main menu.

define config.main_menu_music_fadein = 0.0link
The number of seconds to take to fade in config.main_menu_music.

define config.menu_arguments_callback = Nonelink
If not None, this should be a function that takes positional and/or keyword arguments. It's called whenever a menu statement runs, with the arguments to that menu statement.

This should return a pair, containing a tuple of positional arguments (almost always empty), and a dictionary of keyword arguments.

define config.menu_clear_layers = [ ... ]link
A list of layer names (as strings) that are cleared when entering the game menu.

define config.menu_include_disabled = Falselink
When this variable is set, choices disables with the if statement are included as disabled buttons.

define config.menu_window_subtitle = ""link
The _window_subtitle variable is set to this value when entering the main or game menus.

define config.minimum_presplash_time = 0.0link
The minimum amount of time, in seconds, a presplash, Android presplash, or iOS LaunchImage is displayed for. If Ren'Py initializes before this amount of time has been reached, it will sleep to ensure the image is shown for at least this amount of time. The image may be shown longer if Ren'Py takes longer to start up.

define config.missing_background = "black"link
This is the background that is used when config.developer is True and an undefined image is used in a scene statement. This should be an image name (a string), not a displayable.

define config.mode_callbacks = [ ... ]link
A list of callbacks called when entering a mode. For more documentation, see the section on Modes.

The default value includes a callback that implements config.adv_nvl_transition and config.nvl_adv_transition.

define config.mouse = Nonelink
This variable controls the use of user-defined mouse cursors. If None, the system mouse is used, which is usually a black-and-white mouse cursor.

Otherwise, this should be a dictionary giving the mouse animations for various mouse types. Keys used by the default library include default, say, with, menu, prompt, imagemap, button, pause, mainmenu, and gamemenu. The default key should always be present, as it is used when a more specific key is absent. Keys can have an optional prefix pressed_ to indicate that the cursor will be used when the mouse is pressed.

Each value in the dictionary should be a list of (image, xoffset, yoffset) tuples, representing frames.

image
The mouse cursor image. The maximum size for this image varies based on the player's hardware. 32x32 is guaranteed to work everywhere, while 64x64 works on most hardware. Larger images may not work.

xoffset
The offset of the hotspot pixel from the left side of the cursor.

yoffset
The offset of the hotspot pixel from the top of the cursor.

The frames are played back at 20Hz, and the animation loops after all frames have been shown.

See Custom Mouse Cursors for more information and examples.

define config.mouse_displayable = Nonelink
If not None, this should either be a displayable, or a callable that returns a displayable. The callable may return None, in which case Ren'Py proceeds if the displayable is None.

If a displayable is given, the mouse cursor is hidden, and the displayable is shown above anything else. This displayable is responsible for positioning and drawing a sythetic mouse cursor, and so should probably be a MouseDisplayable() or something very similar.

See Custom Mouse Cursors for more information.

define config.narrator_menu = Truelink
If true, narration inside a menu is displayed using the narrator character. Otherwise, narration is displayed as captions within the menu itself.

define config.nearest_neighbor = Falselink
Uses nearest-neighbor filtering by default, to support pixel art or melting players' eyes.

define config.notify : Callablelink
This is called by renpy.notify() or Notify() with a single message argument, to display the notification. The default implementation is renpy.display_notify(). This is intended to allow creators to intercept notifications.

define config.optimize_texture_bounds = Truelink
When True, Ren'Py will scan images to find the bounding box of the non-transparent pixels, and only load those pixels into a texture.

define config.overlay_screens = [ ... ]link
A list of screens that are displayed when the overlay is enabled, and hidden when the overlay is suppressed. (The screens are shown on the screens layer, not the overlay layer.)

define config.pause_after_rollback = Falselink
If False, the default, rolling back will skip any pauses (timed or not) and stop only at other interactions such as dialogues, menus... If True, renpy will include timeless pauses to the valid places a rollback can take the user.

define config.physical_height = Nonelink
If set, this is the default height of the window containing the Ren'Py game, in pixels. If not set, the height of the window defaults to config.screen_height.

define config.physical_width = Nonelink
If set, this is the default height of the window containing the Ren'Py game, in pixels. If not set, the height of the window defaults to config.screen_width.

define config.preload_fonts = [ ... ]link
A list of the names of TrueType and OpenType fonts that Ren'Py should load when starting up. Including the name of a font here can prevent Ren'Py from pausing when introducing a new typeface.

define config.preserve_volume_when_muted = Falselink
If False, the default, the volume of channels are shown as 0 and changing it disables mute when the channel is mute. Otherwise, It is shown and adjustable while keeping mute.

define config.python_callbacks = [ ... ]link
A list of functions. The functions in this list are called, without any arguments, whenever a Python block is run outside of the init phase.

One possible use of this would be to have a function limit a variable to within a range each time it is adjusted.

The functions may be called while Ren'Py is starting up, before the start of the game proper, and potentially before the variables the function depends on are initialized. The functions are required to deal with this, perhaps by using hasattr(store, 'varname') to check if a variable is defined.

define config.quicksave_slots = 10link
The number of slots used by quicksaves.

define config.quit_action : Actionlink
The action that is called when the user clicks the quit button on a window. The default action prompts the user to see if they want to quit the game.

define config.reload_modules = [ ... ]link
A list of strings giving the names of python modules that should be reloaded along with the game. Any submodules of these modules will also be reloaded.

define config.replace_text = Nonelink
If not None, a function that is called with a single argument, a text to be displayed to the user. The function can return the same text it was passed, or a replacement text that will be displayed instead.

The function is called after substitutions have been performed and after the text has been split on tags, so its argument contains nothing but actual text. All displayed text passes through the function: not only dialogue text, but also user interface text.

This can be used to replace specific ASCII sequences with corresponding Unicode characters, as demonstrated by the following:

def replace_text(s):
    s = s.replace("'", u'\u2019') # apostrophe
    s = s.replace('--', u'\u2014') # em dash
    s = s.replace('...', u'\u2026') # ellipsis
    return s
config.replace_text = replace_text
define config.replay_scope = { "_game_menu_screen" : "preferences", ... }link
A dictionary mapping variables in the default store to the values the variables will be given when entering a replay.

define config.return_not_found_label = Nonelink
If not None, a label that is jumped to when a return site is not found. The call stack is cleared before this jump occurs.

define config.save_json_callbacks = [ ... ]link
A list of callback functions that are used to create the json object that is stored with each save and marked accessible through FileJson() and renpy.slot_json().

Each callback is called with a Python dictionary that will eventually be saved. Callbacks should modify that dictionary by adding JSON-compatible Python types, such as numbers, strings, lists, and dicts. The dictionary at the end of the last callback is then saved as part of the save slot.

The dictionary passed to the callbacks may have already have keys beginning with an underscore _. These keys are used by Ren'Py, and should not be changed.

For example:

init python:
    def jsoncallback(d):
        d["playername"] = player_name

    config.save_json_callbacks.append(jsoncallback)
FileJson(slot) and renpy.slot_json(slot) will recover the state of the d dict-like object as it was at the moment the game was saved. The value of the player_name variable at the moment the game was saved is also accessible by FileJson(slot, "playername").

define config.save_token_keys = [ ]link
A list of keys that the game will trust when loading a save file. This can be used to allow the game's creator to distribute save files that will be loaded without displaying a warning.

To allow the save token for the current computer to be trusted in this way, open the console and run:

print(renpy.get_save_token_keys())
This will print the keys out in log.txt. The value can then be used to define this config.save_token_keys. This variable must be set with a define statement, or in a python early block.

define config.say_arguments_callback = Nonelink
If not None, this should be a function that takes the speaking character, followed by positional and keyword arguments. It's called whenever a say statement occurs, even when the statement doesn't explicitly pass arguments. The arguments passed to the callback always include an interact argument, and include the others provided in the say statement (if any).

This should return a pair, containing a tuple of positional arguments (almost always empty), and a dictionary of keyword arguments (almost always with at least interact in it). Those will replace the arguments passed to the callback.

For example:

def say_arguments_callback(who, interact=True, color="#fff"):
    return (), { "interact" : interact, "what_color" : color }

config.say_arguments_callback = say_arguments_callback
define config.scene_callbacks = [ ... ]link
A list of functions that are called when the scene statement runs, or renpy.scene() is called. The functions are called with a single argument, the layer that the scene statement is called on. These functions are called after the layer is cleared, but before the optional image is added, if present.

Ren'Py may call renpy.scene for its own purposes, so it's recommended to check the layer name before acting on these callbacks.

define config.screen_height = 600link
The virtual height of the the game, in pixels. If config.physical_height is not set, this is also the default size of the window containing the game. Usually set by gui.init() to a much larger size.

define config.screen_width = 800link
The virtual width of the the game, in pixels. If config.physical_width is not set, this is also the default size of the window containing the game. Usually set by gui.init() to a much larger size.

define config.single_movie_channel = Nonelink
If not None, and the play argument is give to Movie(), this is the name used for the channel the movie is played on. This should not be "movie", as that name is reserved for Ren'Py's internal use.

define config.skip_sounds = Falselink
If False, non-looping audio will not be played when Ren'Py is skipping.

define config.speaking_attribute = Nonelink
If not None, this should be a string giving an image attribute, which is added to the character's image tag when the character is speaking, and removed when the character stops.

This is applied to the image on the default layer for the tag, which can be set using config.tag_layer.

This is very similar to temporary attributes shown using @ in dialogue lines. The attribute is not removed when the text apparition animation ends, but when the dialogue window gets dismissed.

define config.tag_layer = { }link
A dictionary mapping image tag strings to layer name strings. When an image is shown without a specific layer name, the image's tag is looked up in this dictionary to get the layer to show it on. If the tag is not found here, config.default_tag_layer is used.

define config.tag_transform = { ... }link
A dictionary mapping image tag strings to transforms or lists of transforms. When an image is newly-shown without an at clause, the image's tag is looked up in this dictionary to find a transform or list of transforms to use.

define config.tag_zorder = { }link
A dictionary mapping image tag strings to zorders. When an image is newly-shown without a zorder clause, the image's tag is looked up in this dictionary to find a zorder to use. If no zorder is found, 0 is used.

define config.thumbnail_height = 75link
The height of the thumbnails that are taken when the game is saved. These thumbnails are shown when the game is loaded. Please note that the thumbnail is shown at the size it was taken at, rather than the value of this setting when the thumbnail is shown to the user.

This is changed by the default GUI.

define config.thumbnail_width = 100link
The width of the thumbnails that are taken when the game is saved. These thumbnails are shown when the game is loaded. Please note that the thumbnail is shown at the size it was taken at, rather than the value of this setting when the thumbnail is shown to the user.

This is changed by the default GUI.

define config.tts_voice = Nonelink
If not None, a string giving a non-default voice that is used to play back text-to-speech for self voicing. The possible choices are platform specific, and so this should be set in a platform-specific manner. (It may make sense to change this in translations, as well.)

define config.tts_substitutions = [ ]link
This is a list of (pattern, replacement) pairs that are used to perform substitutions on text before it is passed to the text-to-speech engine, so that the text-to-speech engine can pronounce it correctly.

Patterns may be either strings or regular expressions, and replacements must be strings.

If the pattern is a string, it is escaped, then prefixed and suffixed with r'\b' (to indicate it must begin and end at a word boundary), and then compiled into a regular expression. When the pattern is a string, the replacement is also escaped.

If the pattern is a regular expression, it is used as-is, and the replacement is not escaped.

The substitutions are performed in the order they are given. If a substitution matches the string, the match is checked to see if it is in title case, upper case, or lower case ; and if so the corresponding casing is performed on the replacement. Once this is done, the replacement is applied.

For example:

define config.tts_substitutions = [
    ("Ren'Py", "Ren Pie"),
]
Will cause the string "Ren'Py is pronounced ren'py." to be voiced as if it were "Ren Pie is pronounced ren pie."

define config.webaudio_required_types = [ "audio/ogg", "audio/mpeg", ... ]link
When running on the web platform, Ren'Py will check the browser to see if it can play audio files of these mime types. If the browser can, it is used to play the files. If not, a slower and potentially skip prone wasm decoder is used.

By default, the browser's web audio system is used on Chrome and Firefox, and wasm is used on safari. If your game only uses mp3 audio, this can be changed using

define config.webaudio_required_types = [ "audio/mpeg" ]
To used the faster web audio system on Safari as well.

define config.web_input = Truelink
If True, the web platform will use the browser's input system to handle renpy.input(). If False, Ren'Py's own input system will be used. The browser's input system supports more languages, virtual keyboards, and other conveniences, but is not as customizable.

This may be changed at init time, and also in translate python blocks.

To only use the browser's input system on touchscreen devices, use:

define config.web_input = renpy.variant("touch")
define config.window_auto_hide = [ "scene", "call screen", "menu", "say-centered", "say-bubble", ... ]link
A list of statements that cause window auto to hide the empty dialogue window.

define config.window_auto_show = [ 'say', 'menu-with-caption', ... ]link
A list of statements that cause window auto to show the empty dialogue window.

define config.window_icon = Nonelink
If not None, this is expected to be the filename of an image giving an icon that is used for the game's main window. This does not set the icon used by windows executables and mac apps, as those are controlled by Special Files.

define config.window_title = Nonelink
The static portion of the title of the window containing the Ren'Py game. _window_subtitle is appended to this to get the full title of the window.

If None, the default, this defaults to the value of config.name.

Rarely or Internally Usedlink
define config.adjust_view_size = Nonelink
If not None, this should be a function taking two arguments, the width and height of the physical window. It is expected to return a tuple giving the width and height of the OpenGL viewport, the portion of the screen that Ren'Py will draw pictures to.

This can be used to configure Ren'Py to only allow certain sizes of screen. For example, the following allows only integer multiples of the original screen size:

init python:

    def force_integer_multiplier(width, height):
        multiplier = min(width / config.screen_width, height / config.screen_height)
        multiplier = max(int(multiplier), 1)
        return (multiplier * config.screen_width, multiplier * config.screen_height)

    config.adjust_view_size = force_integer_multiplier
define config.afm_bonus = 25link
The number of bonus characters added to every string when auto-forward mode is in effect.

define config.afm_callback = Nonelink
If not None, a Python function that is called to determine if it is safe to auto-forward. The intent is that this can be used by a voice system to disable auto-forwarding when a voice is playing.

define config.afm_characters = 250link
The number of characters in a string it takes to cause the amount of time specified in the auto forward mode preference to be delayed before auto-forward mode takes effect.

define config.afm_voice_delay = .5link
The number of seconds after a voice file finishes playing before AFM can advance text.

define config.all_character_callbacks = [ ... ]link
A list of callbacks that are called by all characters. This list is prepended to the list of character-specific callbacks. Ren'Py includes its own callbacks at the start of this list.

define config.allow_skipping = Truelink
If set to False, the user is not able to skip over the text of the game. See _skipping.

define config.allow_screensaver = Truelink
If True, the screensaver may activite while the game is running. If False, the screensaver is disabled.

define config.archives = [ ... ]link
A list of archive files that will be searched for images and other data. The entries in this should consist of strings giving the base names of archive files, without the .rpa extension.

The archives are searched in the order they are found in this list. A file is taken from the first archive it is found in.

At startup, Ren'Py will automatically populate this variable with the names of all archives found in the game directory, sorted in reverse ascii order. For example, if Ren'Py finds the files data.rpa, patch01.rpa, and patch02.rpa, this variable will be populated with ['patch02', 'patch01', 'data'].

define config.at_exit_callbacks = [ ]link
A list of callbacks that are called when Ren'Py quits or restarts the game. These callbacks should not interact with the user.

define config.auto_choice_delay = Nonelink
If not None, this variable gives a number of seconds that Ren'Py will pause at an in-game menu before picking a random choice from that menu. We'd expect this variable to always be set to None in released games, but setting it to a number will allow for automated demonstrations of games without much human interaction.

define config.autoreload = Truelink
If True, Shift+R will toggle automatic reloading. When automatic reloading is enabled, Ren'Py will reload the game whenever a used file is modified.

If False, Ren'Py will reload the game once per press of Shift+R.

define config.autosave_frequency = 200link
Roughly, the number of interactions that will occur before an autosave occurs. To disable autosaving, set config.has_autosave to False, don't change this variable.

define config.autosave_on_choice = Truelink
If True, Ren'Py will autosave upon encountering an in-game choice. (When renpy.choice_for_skipping() is called.)

define config.autosave_on_quit = Truelink
If True, Ren'Py will attempt to autosave when the user attempts to quit, return to the main menu, or load a game over the existing game. (To save time, the autosave occurs while the user is being prompted to confirm his or her decision.)

define config.bottom_layers = [ "bottom", ... ]link
This is a list of names of layers that are displayed above all other layers, and do not participate in a transition that is applied to all layers. If a layer name is listed here, it should not be listed in config.layers` or config.top_layers.

define config.autosave_on_input = Truelink
If True, Ren'Py will autosave when the user inputs text. (When renpy.input() is called.)

define config.call_screen_roll_forward = Falselink
The value is used when the roll_forward property of a screen is None.

define config.character_callback = Nonelink
The default value of the callback parameter of Character.

define config.choice_empty_window = Nonelink
If not None, and a choice menu (usually invoked with the menu statement) does not have a caption, this function is called with the arguments ("", interact=False).

The expected use of this is:

define config.choice_empty_window = extend
Doing this displays repeats the last line of dialogue as the caption of the menu, if no other caption is given.

Other implementations are possible, but it's assumed that this will always display a dialogue window.

define config.choice_layer = "screens"link
The layer the choice screen (used by the menu statement) is shown on.

define config.clear_layers = [ ... ]link
A list of names of layers to clear when entering the main and game menus.

define config.console = Falselink
This enables the console in the case config.developer is not true.

define config.context_clear_layers = [ 'screens', 'top', 'bottom', ... ]link
A list of layers that are cleared when entering a new context.

define config.controller_blocklist = [ ... ]link
A list of strings, where each string is matched against the GUID of a game controller. These strings are mached as a prefix to the controller GUID (which cand be found in log.txt), and if matched, prevent the controller from being initialized.

define config.exception_handler = Nonelink
If not None, this should be a function that takes three arguments:

A string giving the text of a traceback, abbreviated so that it only includes creator-written files.

The full text of the traceback, including both creator-written and Ren'Py files.

The path to a file containing a traceback method.

This function can present the error to a user in any way fit. If it returns True, the exception is ignored and control is transferred to the next statement. If it returns False, the built-in exception handler is use. This function may also call renpy.jump() to transfer control to some other label.

define config.detached_layers = [ ]link
These are layers which do not get automatically added to scenes. They are always treated as sticky and intended for use with the Layer displayable for embedding.

define config.display_start_callbacks = [ ]link
This contains a list of functions that are called after Ren'Py displays a window, but before the first frame is rendered. The main use of this is to allow libraries to gain access to resources that need an initializd gui, like OpenGL functions.

define config.ex_rollback_classes = [ ]link
A list of class objects that should not generate a warning that the object supported rollback in the past, but do not now. If you have intentionally removed rollack support from a class, place the class object in this list and the warning will be suppressed.

Chances are, you don't want to use this - you want to add object to the list of base types for your class.

define config.fadeout_audio = 0.016link
The default audio fadeout time that's used to fade out audio, when audio is stopped with the stop statement or renpy.music.stop(), or when a new audio track is started with the play statement or renpy.music.play(). This is not used when queued audio beings.

A short fadeout is the default to prevent clicks and pops when audio is stopped or changed.

define config.fast_skipping = Falselink
Set this to True to allow fast skipping outside of developer mode.

define config.file_open_callback = Nonelink
If not None, this is a function that is called with the file name when a file needs to be opened. It should return a file-like object, or None to load the file using the usual Ren'Py mechanisms. Your file-like object must implement at least the read, seek, tell, and close methods.

One may want to also define a config.loadable_callback that matches this.

define config.focus_crossrange_penalty = 1024link
This is the amount of penalty to apply to moves perpendicular to the selected direction of motion, when moving focus with the keyboard.

define config.gamedir = ...link
The full path leading to the game's game/ directory. This is a read-only variable. There is no guarantee that any file will be there, typically on platforms such as android.

define config.gl_resize = Truelink
Determines if the user is allowed to resize an OpenGL-drawn window.

define config.hard_rollback_limit = 100link
This is the number of steps that Ren'Py will let the user interactively rollback. Set this to 0 to disable rollback entirely, although we don't recommend that, as rollback is useful to let the user see text he skipped by mistake.

define config.help = Nonelink
The default value for the Help() action.

define config.help_screen = "help"link
The name of the screen shown by pressing f1 on the keyboard, or by the Help() action under certain circumstances.

define config.hide = renpy.hidelink
A function that is called when the hide statement is executed. This should take the same arguments as renpy.hide.

define config.imagemap_auto_function : Callablelink
A function that expands the auto property of a screen language imagebutton or imagemap statement into a displayable. It takes the value of the auto property, and the desired image, one of: "insensitive", "idle", "hover", "selected_idle", "selected_hover", or "ground". It should return a displayable or None.

The default implementation formats the auto property with the desired image, and then checks if the computed filename exists.

define config.keep_side_render_order = Truelink
If True, the order of substrings in the Side positions will be determine the order of children render.

define config.implicit_with_none = Truelink
If True, then by default the equivalent of a with None statement will be performed after interactions caused by dialogue, menus input, and imagemaps. This ensures that old screens will not show up in transitions.

define config.interact_callbacks = [ ... ]link
A list of functions that are called (without any arguments) when an interaction is started or restarted.

define config.keep_running_transform = Truelink
If True, showing an image without supplying a transform or ATL block will cause the image to continue the previous transform an image with that tag was using, if any. If False, the transform is stopped.

define config.keymap = { ... }link
This variable contains a keymap giving the keys and mouse buttons assigned to each possible operation. Please see the section on Keymaps for more information.

define config.label_callbacks = [ ]link
This is a list of callbacks that are called whenever a labels is reached. The callbacks are called with two arguments. The first is the name of the label. The second is True if the label was reached through jumping, calling, or creating a new context, and False otherwise.

define config.label_overrides = { }link
This variable gives a way of causing jumps and calls of labels in Ren'Py script to be redirected to other labels. For example, if you add a mapping from "start" to "mystart", all jumps and calls to "start" will go to "mystart" instead.

define config.layer_clipping = { ... }link
Controls layer clipping. This is a map from layer names to (x, y, height, width) tuples, where x and y are the coordinates of the upper-left corner of the layer, with height and width giving the layer size.

If a layer is not mentioned in config.layer_clipping, then it is assumed to take up the full screen.

define config.layeredimage_offer_screen = Truelink
This variable sets the default value for the offer_screen property of layeredimages. See the related section for more information.

define config.layers = [ 'master', 'transient', 'screens', 'overlay', ... ]link
This variable gives a list of all of the layers that Ren'Py knows about, in the order that they will be displayed to the screen. (The lowest layer is the first entry in the list.) Ren'Py uses the layers "master", "transient", "screens", and "overlay" internally (and possibly others in future versions), so they should always be in this list.

The renpy.add_layer() can add layers to this variable without needing to know the original contents.

define config.lint_hooks = [ ... ]link
This is a list of functions that are called, with no arguments, when lint is run. The functions are expected to check the script data for errors, and print any they find to standard output (using the Python print statement is fine in this case).

define config.load_before_transition = Truelink
If True, the start of an interaction will be delayed until all images used by that interaction have loaded. (Yeah, it's a lousy name.)

define config.loadable_callback = Nonelink
When not None, a function that's called with a filename. It should return True if the file is loadable, and False if not. This can be used with config.file_open_callback or config.missing_image_callback.

define config.log = Nonelink
If not None, this is expected to be a filename. Much of the text shown to the user by say or menu statements will be logged to this file.

define config.log_width = 78link
The width of lines logged when config.log is used.

define config.longpress_duration = 0.5link
The amount of time the player must press the screen for a longpress to be recognized on a touch device.

define config.longpress_radius = 15link
The number of pixels the touch must remain within for a press to be recognized as a longpress.

define config.longpress_vibrate = .1link
The amount of time the device will vibrate for after a longpress.

define config.main_menu_stop_channels = [ "movie", "sound", "voice", ... ]link
A list of channels that are stopped when entering or returning to the main menu.

define config.mipmap_dissolves = Falselink
The default value of the mipmap argument to Dissolve(), ImageDissolve(), AlphaDissolve(), and AlphaMask().

define config.mipmap_movies = Falselink
The default value of the mipmap argument to Movie().

define config.mipmap_text = Falselink
The default value of the mipmap argument to Text(), including text used in screen statements.

define config.missing_image_callback = Nonelink
If not None, this function is called when an attempt to load an image fails. The callback is passed the filename of the missing image. It may return None, or it may return an image manipulator. If an image manipulator is returned, that image manipulator is loaded in the place of the missing image.

One may want to also define a config.loadable_callback, especially if this is used with a DynamicImage().

define config.missing_label_callback = Nonelink
If not None, this function is called when Ren'Py attempts to access a label that does not exist in the game. The callback should take a single parameter, the name of the missing label. It should return the name of a label to use as a replacement for the missing label, or None to cause Ren'Py to raise an exception.

define config.mouse_focus_clickthrough = Falselink
If true, clicks that cause a window to be focused will be processed normally. If false, such clicks will be ignored.

define config.mouse_hide_time = 30link
The mouse is hidden after this number of seconds has elapsed without any mouse input. This should be set to longer than the expected time it will take to read a single screen, so mouse users will not experience the mouse appearing then disappearing between clicks.

If None, the mouse will never be hidden.

define config.movie_mixer = "music"link
The mixer that is used when a Movie() automatically defines a channel for video playback.

define config.new_translate_order = Truelink
Enables the new order of style and translate statements introduced in Ren'Py 6.99.11.

define config.new_substitutions = Truelink
If True, Ren'Py will apply new-style (square-bracket) substitutions to all text displayed.

define config.old_substitutions = Truelink
If True, Ren'Py will apply old-style (percent) substitutions to text displayed by the say and menu statements.

define config.open_file_encoding = Falselink
If not False, this is the encoding that renpy.open_file() uses when its encoding parameter is none. This is mostly used when porting Python 2 games that used renpy.file() extensively to Python 3, to have those files open as text by default.

This gets its default value from the RENPY_OPEN_FILE_ENCODING environment variable.

define config.overlay_during_with = Truelink
True if we want overlays to be shown during with statements, or False if we'd prefer that they be hidden during the with statements.

define config.overlay_layers = [ 'overlay', ... ]link
This is a list of all of the overlay layers. Overlay layers are cleared before the overlay functions are called. "overlay" should always be in this list.

define config.pad_bindings = { ... }link
An equivalent of config.keymap for gamepads. Please see Customizing the Keymap's section about pad bindings for more information.

define config.pause_with_transition = Falselink
If false, renpy.pause() is always, used by the pause statement. If true, when given a delay, pause is equivalent to with Pause(...).

define config.per_frame_screens = [ ... ]link
This is a list of strings giving the name of screens that are updated once per frame, rather than once per interaction. Ren'Py uses this internally, so if you add a screen, append the name rather than replacing the list in its entirety.

define config.periodic_callback = Nonelink
If not None, this should be a function. The function is called, with no arguments, at around 20Hz.

define config.play_channel = "audio"link
The name of the audio channel used by renpy.play(), hover_sound, and activate_sound.

define config.predict_statements = 32link
This is the number of statements, including the current one, to consider when doing predictive image loading. A breadth-first search from the current statement is performed until this number of statements is considered, and any image referenced in those statements is potentially predictively loaded. Setting this to 0 will disable predictive loading of images.

define config.profile = Falselink
If set to True, some profiling information will be output to stdout.

define config.profile_init = 0.25link
init and init python blocks taking longer than this amount of time to run are reported to log file.

define config.quit_on_mobile_background = Falselink
If True, the mobile app will quit when it loses focus, rather than saving and restoring its state. (See also config.save_on_mobile_background, which controls this behavior.)

define config.rollback_enabled = Truelink
Should the user be allowed to rollback the game? If set to False, the user cannot interactively rollback.

define config.rollback_length = 128link
When there are more than this many statements in the rollback log, Ren'Py will consider trimming the log. This also covers how many steps Ren'Py will rollback when trying to load a save when the script has changed.

Decreasing this below the default value may cause Ren'Py to become unstable.

define config.rollback_side_size = .2link
If the rollback side is enabled, the fraction of the screen on the rollback side that, when clicked or touched, causes a rollback to occur.

define config.say_allow_dismiss = Nonelink
If not None, this should be a function. The function is called with no arguments when the user attempts to dismiss a say statement. If this function returns True, the dismissal is allowed, otherwise it is ignored.

define config.say_layer = "screens"link
The layer the say screen is shown on.

define config.say_menu_text_filter = Nonelink
If not None, then this is a function that is given the text found in strings in the say and menu statements. It is expected to return new (or the same) strings to replace them.

define config.say_sustain_callbacks = [ ... ]link
A list of functions that are called, without arguments, before the second and later interactions caused by a line of dialogue with pauses in it. Used to sustain voice through pauses.

define config.save_dump = Falselink
If set to True, Ren'Py will create the file save_dump.txt whenever it saves a game. This file contains information about the objects contained in the save file. Each line consists of a relative size estimate, the path to the object, information about if the object is an alias, and a representation of the object.

define config.save_on_mobile_background = Truelink
If True, the mobile app will save its state when it loses focus. The state is saved in a way that allows it to be automatically loaded (and the game to resume its place) when the app starts again.

define config.save_physical_size = Truelink
If True, the physical size of the window will be saved in the preferences, and restored when the game resumes.

define config.savedir = ...link
The complete path to the directory in which the game is saved. This should only be set in a python early block. See also config.save_directory, which generates the default value for this if it is not set during a python early block.

define config.scene = renpy.scenelink
A function that's used in place of renpy.scene() by the scene statement. Note that this is used to clear the screen, and config.show is used to show a new image. This should have the same signature as renpy.scene().

define config.screenshot_callback : Callablelink
A function that is called when a screenshot is taken. The function is called with a single parameter, the full filename the screenshot was saved as.

define config.screenshot_crop = Nonelink
If not None, this should be a (x, y, height, width) tuple. Screenshots are cropped to this rectangle before being saved.

define config.screenshot_pattern = "screenshot%04d.png"link
The pattern used to create screenshot files. This pattern is applied (using Python's %-formatting rules) to the natural numbers to generate a sequence of filenames. The filenames may be absolute, or relative to config.renpy_base. The first filename that does not exist is used as the name of the screenshot.

Directories are created if they do not exist.

See also _screenshot_pattern, which is used in preference to this variable if not None.

define config.script_version = Nonelink
If not None, this is interpreted as a script version. The library will use this script version to enable some compatibility features, if necessary. If None, we assume this is a latest-version script.

This is normally set in a file added by the Ren'Py launcher when distributions are built.

define config.searchpath = [ 'common', 'game', ... ]link
A list of directories that are searched for images, music, archives, and other media, but not scripts. This is initialized to a list containing "common" and the name of the game directory.

define config.search_prefixes = [ "", "images/", ... ]link
A list of prefixes that are prepended to filenames that are searched for.

define config.show = renpy.showlink
A function that is used in place of renpy.show() by the show and scene statements. This should have the same signature as renpy.show(), and pass unknown keyword arguments unchanged.

define config.skip_delay = 75link
The amount of time that dialogue will be shown for, when skipping statements using ctrl, in milliseconds. (Although it's nowhere near that precise in practice.)

define config.skip_indicator = Truelink
If True, the library will display a skip indicator when skipping through the script.

define config.sound = Truelink
If True, sound works. If False, the sound/mixer subsystem is completely disabled.

define config.sound_sample_rate = 48000link
The sample rate that the sound card will be run at. If all of your wav files are of a lower rate, changing this to that rate may make things more efficient.

define config.start_callbacks = [ ... ]link
A list of callbacks functions that are called with no arguments after the init phase, but before the game (including the splashscreen) starts. This is intended to be used by frameworks to initialize variables that will be saved.

The default value of this variable includes callbacks that Ren'Py uses internally to implement features such as nvl-mode. New callbacks can be appended to this list, but the existing callbacks should not be removed.

define config.start_interact_callbacks = [ ... ]link
A list of functions that are called (without any arguments) when an interaction is started. These callbacks are not called when an interaction is restarted.

define config.quit_callbacks = [ ... ]link
A list of functions that are called (without any arguments) when Ren'Py terminates. This is intended to free resources, such as opened files or started threads.

define config.sticky_layers = [ "master", ... ]link
A list of layer names that will, when a tag is shown on them, take precedence over that tag's entry in config.tag_layer for the duration of it being shown.

define config.top_layers = [ "top", ... ]link
This is a list of names of layers that are displayed above all other layers, and do not participate in a transition that is applied to all layers. If a layer name is listed here, it should not be listed in config.layers` or config.bottom_layers.

define config.transient_layers = [ 'transient', ... ]link
This variable gives a list of all of the transient layers. Transient layers are layers that are cleared after each interaction. "transient" should always be in this list.

define config.transform_uses_child_position = Truelink
If True, transforms will inherit position properties from their child. If not, they won't.

define config.transition_screens = Truelink
If True, screens will participate in transitions, dissolving from the old state of the screen to the new state of the screen. If False, only the latest state of the screen will be shown.

define config.translate_clean_stores = [ "gui", ... ]link
A list of named stores that are cleaned to their state at the end of the init phase when the translation language changes.

define config.variants = [ ... ]link
A list of screen variants that are searched when choosing a screen to display to the user. This should always end with None, to ensure that the default screens are chosen. See Screen Variants.

define config.voice_filename_format = "{filename}"link
A string that is formatted with the string argument to the voice statement to produce the filename that is played to the user. For example, if this is "{filename}.ogg", the voice "test" statement will play test.ogg.

define config.web_video_base = "./game"link
When playing a movie in the web browser, this is a URL that is appended to to the movie filename to get the full URL to play the movie from. It can include directories in it, so "https://share.renpy.org/movies-for-mygame" would also be fine.

This allows large movie files to be hosted on a different server than the rest of the game.

define config.web_video_prompt = _("Touch to play the video.")link
On Mobile Safari on iOS, by default, the player will need to click to play a movie with sound. This variable gives the message that's used to prompt players to click.

define config.with_callback = Nonelink
If not None, this should be a function that is called when a with statement occurs. This function can be responsible for putting up transient things on the screen during the transition. The function is called with two arguments: the transition that is occurring, and the transition it is paired with. The latter is None except in the case of the implicit None transition produced by an inline with statement, in which case it is the inline transition that produced the with None. It is expected to return a transition, which may or may not be the transition supplied as its argument.

Garbage Collectionlink
These variables allow you to tune the Python garbage collector and the Ren'Py management of the Python garbage collector.

define config.manage_gc = Truelink
If True, Ren'Py will manage the GC itself. This means that it will apply the settings below.

define config.gc_thresholds = (25000, 10, 10)link
The GC thresholds that Ren'Py uses when not idle. These are set to try to ensure that garbage collection doesn't happen. The three numbers are:

The net number of objects that need to be allocated before a level-0 collection.

The number of level-0 collections that trigger a level-1 collection.

The number of level-1 collections that trigger a level-2 collection.

(Level-0 collections should be fast enough to not cause a frame drop, level-1 collections might, level-2 will.)

define config.idle_gc_count = 2500link
The net number of objects that triggers a collection when Ren'Py has reached a steady state. (The fourth frame or later after the screen has been updated.)

define config.gc_print_unreachable = Falselink
If True, Ren'Py will print to its console and logs information about the objects that are triggering collections.

Other Configuration Variableslink
Some other pages of this documentation contain and define other configuration variables. You can locate them there, in their context.

3D Stage

config.perspective

Achievements:

config.steam_appid

Custom Text Tags:

config.custom_text_tags

config.self_closing_custom_text_tags

Gestures:

config.dispatch_gesture

config.gestures

GUI Customization Guide:

config.thumbnail_height

config.thumbnail_width

Live2D Cubism:

config.log_live2d_loading

Model-Based Rendering:

config.gl_blend_func

config.log_gl_shaders

NVL-Mode Tutorial:

config.nvl_layer

config.nvl_list_length

config.nvl_page_ctc

config.nvl_page_ctc_position

config.nvl_paged_rollback

Preference Variables:

config.default_music_volume

config.default_sfx_volume

config.default_voice_volume

Self-Voicing:

config.descriptive_text_character

Side Images:

config.side_image_change_transform

config.side_image_null

config.side_image_only_not_showing

config.side_image_prefix_tag

config.side_image_same_transform

config.side_image_tag

Preference Variableslink
Preference variables store the values of Ren'Py preferences. While the value of a preference should be set at runtime using the Preference() action, preference variables should be used in conjunction with the default statement to set the default value of a preference.

For example:

default preferences.text_cps = 40
sets the default text speed to 40 characters per second. The default statement only sets the value of the preference if the default has changed since the preference was set. For example, if the player changes the speed to 50, it will remain at 50 over future runs of the game. If, in an upgrade, the default is set to 42, the player's setting will be changed to 42. (The player can then change it again.)

preferences.afm_after_click = Falselink
If True, the auto-forward mode will be continued after a click. If False, a click will end auto-forward mode. The equivalent of the "auto-forward after click" preference.

preferences.afm_enable = Falselink
If True, auto-forward move is enabled, otherwise False. The equivalent of the "auto-forward time" preference.

preferences.afm_time = 15link
The amount of time to wait for auto-forward mode. Bigger numbers are slower, though the conversion to wall time is complicated, as the speed takes into account line length. The equivalent of the "auto-forward" preference.

preferences.desktop_rollback_side = "disable"link
When on a desktop platform, touches or clicks to this side of the window cause rollback to occur. One of "left", "right", or "disable". This is the equivalend of the "rollback side" preference when on a desktop platform.

preferences.mobile_rollback_side = "disable"link
When on a mobile platform, touches or clicks to this side of the window cause rollback to occur. One of "left", "right", or "disable". This is the equivalend of the "rollback side" preference when on a mobile platform.

preferences.language = Nonelink
The language that the player has selected to use when running the game. This is None for the default language or a string containing a language the game is translated to.

This can be used to set the default language, and can be read to determine the current language. The Language() action can be used to change the language.

See Translation for more information.

preferences.emphasize_audio = Falselink
If True, Ren'Py will emphasize the audio channels found in config.emphasize_audio_channels by reducing the volume of other channels. (For example, reducing the music volume when voice is playing.) If False, this doesn't happen.

preferences.fullscreen = Falselink
This is True when Ren'Py is in fullscreen mode, and False when it is running in a window. The equivalent of the "display" preference.

preferences.gl_framerate = Nonelink
This is either an integer, or None. If not None, it's a target framerate that Ren'Py will attempt to achieve. If this is set low (for example, to 30), on a monitor with a high framerate (say, 60 frames per second), Ren'Py will only draw on every other frame.

If None, Ren'Py will attempt to draw at the monitor's full framerate.

preferences.gl_powersave = "auto"link
This determines how often Ren'Py will redraw an unchanging screen. If True, Ren'Py will only draw the screen 5 times a second. If False, it will always draw at the full framerate possible. If "auto", it will draw at full speed when the device is powered, and 5hz when it is running on battery.

preferences.gl_tearing = Falselink
This determines if tearing (True) or frameskip (False) is the preferred behavior when the game can't keep up with its intended framerate.

preferences.mouse_move = Truelink
If True, the mouse will automatically move to a selected button. If False, it will not. The equivalent of the "automatic move" preference.

preferences.show_empty_window = Truelink
If True, the window show and window auto statements will function. If False, those statements are disabled. The equivalent of the "show empty window" preference.

preferences.skip_after_choices = Falselink
If True, skipping will resume after a choice. If False, a choice will prevent Ren'Py from skipping. The equivalent of the "after choices" preference.

preferences.skip_unseen = Falselink
When True, Ren'Py will skip all text. When False, Ren'Py will only skip text that has been read by the player in any session. The equivalent of the "skip" preference.

preferences.text_cps = 0link
The speed of text display. 0 is infinite, otherwise this is the number of characters per second to show. The equivalent of the "text speed" preference.

preferences.transitions = 2link
Determines which transitions should be shown. 2 shows all transitions, 0 shows no transitions. (1 is reserved.) The equivalent of the "transitions" preference.

preferences.video_image_fallback = Falselink
If True, images are displayed instead of videosprites. If False, video sprites are displayed normally. The equivalent (inverted) of the "video sprites" preference.

preferences.voice_sustain = Falselink
If True, voice keeps playing until finished, or another voice line replaces it. If False, the voice line ends when the line of dialogue advances. The equivalent of the "voice sustain" preference.

preferences.wait_voice = Truelink
If True, auto-forward mode will wait for voice files and self-voicing to finish before advancing. If False, it will not. The equivalent of the "wait for voice" preference.

preferences.system_cursor = Falselink
If True, the system cursor is forced to be used, ignoring the value of config.mouse and config.mouse_displayable. If False, it will not. The equivalent of the "system cursor" preference.

preferences.audio_when_minimized = Truelink
If False, audio channels are stopped when the window is minimized, and resumed when the window is restored. If True, window state will have no effect on audio. The equivalent of the "audio when minimized" preference.

preferences.audio_when_unfocused = Truelink
If False, audio channels are stopped when the window loses keyboard focus, and resumed when the window regains keyboard focus. If True, keyboard focus will have no effect on audio. The equivalent of the "audio when unfocused" preference.

preferences.web_cache_preload = Falselink
If True the game files will be loaded into the web browser's cache, allowing the game to be played offline. If False, the game files will not be loaded into the web browser's cache, and the game will require internet access to play. The equivalent of the "web cache preload" preference.

preferences.voice_after_game_menu = Falselink
If True, voice will continue playing after the game menu is shown. If False, voice will be stopped when the game menu is shown. The equivalent of the "voice after menu" preference.

Mixer Functionslink
See Volume for more details about mixers.

preferences.set_mixer(mixer, volume)link
Sets mixer to volume.

mixer
A string giving the name of the mixer. By default, the mixers are "main", "music", "sfx", and "voice" ("main" being a special mixer).

volume
A number between 0.0 and 1.0, where 0.0 is -40 dB (power), and 1.0 is 0 dB (power).

preferences.get_mixer(mixer)link
Gets the volume for mixer. If the mixer is muted, this returns 0.0. The is returns a number between 0.0 and 1.0, where 0.0 is -40 dB (power) and 1.0 is 0 dB (power).

preferences.set_mute(mixer, mute)link
Sets the mute setting for mixer. If mute is true, the mixer is muted. If mute is false, the mixer's volume is reverted to its value before it was muted.

preferences.get_mute(mixer)link
Gets the mute setting for mixer.

Audio Channel Defaultslink
These config variables set the default volumes on various audio mixers.

define config.default_music_volume = 1.0link
The default volume of the music mixer, which is used for the music and movie channels. This should be a number between 0.0 and 1.0, with 1.0 being full volume.

define config.default_sfx_volume = 1.0link
The default volume of the sfx mixer, which is used for the sound and audio channels. This should be a number between 0.0 and 1.0, with 1.0 being full volume.

define config.default_voice_volume = 1.0link
The default volume of the voice mixer, which is used for the voice channel (and hence the voice statement, auto-voice, etc.). This should be a number between 0.0 and 1.0, with 1.0 being full volume.

Store Variableslink
Ren'Py has a number of store variables that control its function. Store variables may be changed at any time. If a store variable is changed after the game has started, it will be be saved and loaded by the save system, and rolled-back when rollback occurs.

adv = Character(...)link
This is a template ADV-mode character, and the default character kind that is used when Character() is called.

_autosave = Truelink
This variable can be set to False to disable autosave.

_confirm_quit = Truelink
This determines if quitting the game asks for confirmation. It is set to False during the splashscreen, and is ignored when in the main menu.

_constantlink
If set to true in a store, indicates the store is constant. See Constant Stores.

default_mouselink
This is undefined by default. If defined, and if config.mouse is set at game startup, this is a key that is used to look up a mouse cursor when the current cursor does not exist, or is the default. This is used by config.mouse and MouseDisplayable().

See Custom Mouse Cursors for more information.

_dismiss_pause = Truelink
If True, the player can dismiss pauses and transitions.

_game_menu_screen = "save"link
This is the screen that is displayed when entering the game menu with no more specific screen selected. (For example, when right-clicking, pressing escape, or when ShowMenu() is not given an argument.) If None, entry to the game menu is disallowed.

This is set to None at the start of the splashscreen, and restored to its original value when the splashscreen ends.

_history = Truelink
If true, Ren'Py will record dialogue history when a line is shown. (Note that config.history_length must be set as well.)

_history_list = [ ]link
This is a list of history objects, corresponding to each line of history from oldest to newest. See the History section for more information.

_ignore_action = Nonelink
When this is not None, it's an action that is run after clicking Ignore on the error handling screen. The action is usually Jump(), to jump the game to a place that can recover from an error. If None, control continues with the next Ren'Py statement.

main_menu = Falselink
Ren'Py sets this variable to True while in the main menu. This can be used to have screens display differently while in the main menu.

_menu = Falselink
Ren'Py sets this variable to True when entering a main menu or game menu context.

menu = renpy.display_menulink
The function that's called to display the in-game menu. It should take the same arguments as renpy.display_menu(), and pass unknown keyword arguments unchanged. Assigning nvl_menu() to this will display an nvl-mode menu.

mouse_visible = Truelink
Controls if the mouse is visible. This is automatically set to true when entering the standard game menus.

name_only = Character(...)link
This is a template character that is used when a string is given as the character name in a say statement. This:

"Eileen" "Hello, world."
is equivalent to:

$ temp_char = Character("Eileen", kind=name_only)
temp_char "Hello, world."
except that the temp_char variable is not used.

narrator = Character(...)link
This is the character that speaks narration (say statements that do not give a character or character name). This:

"Hello, world."
is equivalent to:

narrator "Hello, world."
_quit_slot = Nonelink
If not None, this should be a string giving the name of a file slot. When Ren'Py quits, the game will be saved in this slot.

_rollback = Truelink
Controls if rollback is allowed.

say = ...link
A function that is called by Ren'Py to display dialogue. This is called with three arguments. The first argument (who) is the character saying the dialogue (or None for the narrator). The second argument (what) is what dialogue is being said.

The third argument must be a keyword argument named interact and defaulting to True. If true, the say function will wait for a click. If false, it will immediately return with the dialogue displayed on the screen.

It's rare to call this function directly, as one can simply call a character with dialogue. This variable mostly exists to be redefined, as a way of hooking the say statement.

save_name = ""link
A save name that is included with saves.

_screenshot_pattern = Nonelink
If not None, this string is used in preference to config.screenshot_pattern to determine the filename of a screenshot. Please see the documentation for that variable for the format of the string.

_skipping = Truelink
Controls if skipping is allowed.

_version = ...link
This is set to config.version when a new game is started. It can be used by the after_load label or config.after_load_callbacks to determine which upgrades need to be done.

This is only set once, upon the initial start. After that, the game is responsible for updating _version as necessary.

_window = Falselink
This set by the window show and window hide statements, and indirectly by window auto. If true, the dialogue window is shown during non-dialogue statements.

_window_auto = Falselink
This is set to true by window auto and to false by window show and window hide. If true, the window auto behavior occurs.

_window_subtitle = ''link
This is appended to config.window_title to produce the caption for the game window. This is automatically set to config.menu_window_subtitle while in the game menu.

Custom Mouse Cursorslink
Ren'Py has two systems for creating custom mouse cursors. The first takes advantage of the hardware mouse cursor, while the second uses Ren'Py to draw a displayable as the mouse cursor.

The hardware mouse cursor has the advantages:

It is very fast.

It is very low overhead, leaving Ren'Py time to do other things.

And the limitation:

Cursors are limited to small sizes. 32x32 is guaranteed, while 64x64 seems to work widely.

Cursors are limited to sequences of image files.

Using Ren'Py to draw a displayable as a cursor inverts these restrictions. While the cursors can be anything Ren'Py can draw, Ren'Py needs to do the drawing. When triple buffering is enabled on a computer, a lag can be present that isn't for the harware cursor.

Hardware Mouse Cursorlink
The hardware cursor is controlled by the config.mouse variable. This variable consists of a dictionary, that maps mouse names to a list of frames. Each frame is a 3-component tuple that contains an image file, and then X and Y offsets within that image.

For example:

define config.mouse = { }
define config.mouse['default'] = [ ( "gui/arrow.png", 0, 0) ]
define config.mouse['spin' ] = [
    ( "gui/spin0.png", 7, 7 ),
    ( "gui/spin1.png", 7, 7 ),
    ( "gui/spin2.png", 7, 7 ),
    ( "gui/spin3.png", 7, 7 ),
    ( "gui/spin4.png", 7, 7 ),
    ( "gui/spin5.png", 7, 7 ),
    ( "gui/spin6.png", 7, 7 ),
    ( "gui/spin7.png", 7, 7 ),
]
When an animation consists of multiple frames, the frames are played back at 20fps. Ren'Py will only change the cursor when the image or offsets change.

The following table lists the various states that the cursor can be in and the corresponding usage:

State

Usage

default

Used at all times unless another state is specified. It should always be present, as it is used when a more specific key is absent

say

Used when the player is on the "Say" screen.

with

Used during transitions.

menu

Used when the player is in a menu (for example, choice).

prompt

Used when the player is prompted for input.

imagemap

Used on an imagemap.

button

Used when the player is hovering over a button/imagebutton.

pause

Used during pause, renpy.pause()

mainmenu

Used in the main menu.

gamemenu

Used in the game menu.

Every key can have an optional pressed_ prefix, which indicates the cursor to use when the mouse is pressed. For instance, pressed_button is used when the user clicks on a button. To define a default pressed cursor style, use pressed_default key. It is used when no other pressed cursor is defined.

For example:

define config.mouse = { }
define config.mouse['default'] = [ ( "gui/arrow.png", 0, 0) ]
define config.mouse['pressed_default'] = [ ( "gui/arrow_pressed.png", 0, 0) ]
define config.mouse['button'] = [ ( "gui/arrow_button.png", 0, 0) ]
define config.mouse['pressed_button'] = [ ( "gui/arrow_button_pressed.png", 0, 0) ]
define config.mouse['menu'] = [ ( "gui/arrow_menu.png", 0, 0) ] # This cursor will be used when the player is in a menu
# Since there is no "pressed_menu" cursor, "pressed_default" cursor will be used instead
Displayable Mouse Cursorlink
A displayable cursor uses the config.mouse_displayable variable, and the MouseDisplayable displayable. As an example:

image mouse spin:
    "gui/spin0.png"
    rotate 0.0
    linear 1.0 rotate 360.0

    # Pause so image prediction can happen.
    pause 1.0

    repeat

define config.mouse_displayable = MouseDisplayable(
    "gui/arrow.png", 0, 0).add("spin", "mouse spin", 9.9, 9.9)
classMouseDisplayable(cursor, x, y)link
A displayable that wraps a mouse cursor displayable, and causes it to move across the screen when the player moves their mouse.

cursor
A displayable that is used to draw the mouse.

x, y
The coordinates of the hotspot, relative to the upper left corner of the mouse, in virtual pixels.

add(name, cursor, x, y)link
This adds a second cursor, that is used when the name mouse is displayed. This returns the MouseDisplayable, so that calls to this method can be chained.

Using Mouse Cursorslink
The usual way to use a mouse cursor is to provide the mouse property, giving the name of the cursor, to something that can be focused in a screen. (A button or bar.) For example:

screen test():
    textbutton "Mouse Test" action NullAction() mouse "spin"
It's also possible to use default_mouse to set the mouse cursor globally:

$ default_mouse = "spin"

